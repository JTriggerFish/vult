# OASIS_START
# DO NOT EDIT (digest: ffc6a1fb531241faf924349090216b94)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library vult_util
"src/util/vult_util.cmxs": use_vult_util
<src/util/*.ml{,i,y}>: pkg_containers
# Library vult_core
"src/core/vult_core.cmxs": use_vult_core
<src/core/*.ml{,i,y}>: pkg_containers
<src/core/*.ml{,i,y}>: pkg_ppx_deriving.std
<src/core/*.ml{,i,y}>: use_vult_util
# Library vult_parser
"src/parser/vult_parser.cmxs": use_vult_parser
<src/parser/*.ml{,i,y}>: pkg_containers
<src/parser/*.ml{,i,y}>: pkg_ppx_deriving.std
<src/parser/*.ml{,i,y}>: use_vult_core
<src/parser/*.ml{,i,y}>: use_vult_util
# Library vult_generators
"src/generators/vult_generators.cmxs": use_vult_generators
<src/generators/*.ml{,i,y}>: pkg_containers
<src/generators/*.ml{,i,y}>: pkg_ppx_deriving.std
<src/generators/*.ml{,i,y}>: use_vult_core
<src/generators/*.ml{,i,y}>: use_vult_util
# Library vult_passes
"src/passes/vult_passes.cmxs": use_vult_passes
<src/passes/*.ml{,i,y}>: pkg_containers
<src/passes/*.ml{,i,y}>: pkg_ppx_deriving.std
<src/passes/*.ml{,i,y}>: use_vult_core
<src/passes/*.ml{,i,y}>: use_vult_util
# Library vult
"src/vult.cmxs": use_vult
# Executable vultc
"src/vultc.native": pkg_containers
"src/vultc.native": pkg_ppx_deriving.std
"src/vultc.native": use_vult
"src/vultc.native": use_vult_core
"src/vultc.native": use_vult_generators
"src/vultc.native": use_vult_parser
"src/vultc.native": use_vult_passes
"src/vultc.native": use_vult_util
# Executable vultdebug
"src/vultc.byte": oasis_executable_vultdebug_byte
<src/*.ml{,i,y}>: oasis_executable_vultdebug_byte
"src/vultc.byte": pkg_containers
"src/vultc.byte": pkg_ppx_deriving.std
"src/vultc.byte": use_vult
"src/vultc.byte": use_vult_core
"src/vultc.byte": use_vult_generators
"src/vultc.byte": use_vult_parser
"src/vultc.byte": use_vult_passes
"src/vultc.byte": use_vult_util
# Executable vult_node
"src/vult_node.byte": pkg_containers
"src/vult_node.byte": pkg_js_of_ocaml
"src/vult_node.byte": pkg_js_of_ocaml.syntax
"src/vult_node.byte": pkg_ppx_deriving.std
"src/vult_node.byte": use_vult
"src/vult_node.byte": use_vult_core
"src/vult_node.byte": use_vult_generators
"src/vult_node.byte": use_vult_parser
"src/vult_node.byte": use_vult_passes
"src/vult_node.byte": use_vult_util
<src/*.ml{,i,y}>: pkg_containers
<src/*.ml{,i,y}>: pkg_js_of_ocaml
<src/*.ml{,i,y}>: pkg_js_of_ocaml.syntax
<src/*.ml{,i,y}>: pkg_ppx_deriving.std
<src/*.ml{,i,y}>: use_vult
<src/*.ml{,i,y}>: use_vult_core
<src/*.ml{,i,y}>: use_vult_generators
<src/*.ml{,i,y}>: use_vult_parser
<src/*.ml{,i,y}>: use_vult_passes
<src/*.ml{,i,y}>: use_vult_util
# Executable vult_tests
<test/test.{native,byte}>: pkg_containers
<test/test.{native,byte}>: pkg_oUnit
<test/test.{native,byte}>: pkg_ppx_deriving.std
<test/test.{native,byte}>: pkg_str
<test/test.{native,byte}>: use_vult
<test/test.{native,byte}>: use_vult_core
<test/test.{native,byte}>: use_vult_generators
<test/test.{native,byte}>: use_vult_parser
<test/test.{native,byte}>: use_vult_passes
<test/test.{native,byte}>: use_vult_util
<test/*.ml{,i,y}>: pkg_containers
<test/*.ml{,i,y}>: pkg_oUnit
<test/*.ml{,i,y}>: pkg_ppx_deriving.std
<test/*.ml{,i,y}>: pkg_str
<test/*.ml{,i,y}>: use_vult
<test/*.ml{,i,y}>: use_vult_core
<test/*.ml{,i,y}>: use_vult_generators
<test/*.ml{,i,y}>: use_vult_parser
<test/*.ml{,i,y}>: use_vult_passes
<test/*.ml{,i,y}>: use_vult_util
# OASIS_STOP
true: debug
true: use_menhir
