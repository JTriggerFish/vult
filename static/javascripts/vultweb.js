// Generated by js_of_ocaml 3.0
(function(joo_global_object)
   {"use strict";
    function caml_array_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function caml_array_sub(a,i,len)
     {var a2=new Array(len + 1);
      a2[0] = 0;
      for(var i2=1,i1=i + 1;i2 <= len;i2++,i1++)a2[i2] = a[i1];
      return a2}
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_string(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    var caml_blit_bytes=caml_blit_string;
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return !/[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 128)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 224)
           {v = c - 12416;if(v < 128)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 240)
               {v = c - 925824;if(v < 2048 || v >= 55295 && v < 57344)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & -64)
                  ==
                  128
                  &&
                  c1
                  <
                  245)
                 {v = c2 - 63447168 + (c << 6);
                  if(v < 65536 || v > 1114111)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 65535)
          t += String.fromCharCode(55232 + (v >> 10),56320 + (v & 1023));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlString(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlString.prototype.toString = function(){return caml_to_js_string(this)};
    function caml_new_string(s){return new MlString(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.22507385850720138e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int_compare(a,b)
     {if(a < b)return -1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?-1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(!(total && a === b))
         if(a instanceof MlString)
          if(b instanceof MlString)
           {if(a !== b){var x=caml_string_compare(a,b);if(x != 0)return x}}
          else
           return 1;
         else
          if(a instanceof Array && a[0] === (a[0] | 0))
           {var ta=a[0];
            if(ta === 254)ta = 0;
            if(ta === 250)
             {a = a[1];continue}
            else
             if(b instanceof Array && b[0] === (b[0] | 0))
              {var tb=b[0];
               if(tb === 254)tb = 0;
               if(tb === 250)
                {b = b[1];continue}
               else
                if(ta != tb)
                 return ta < tb?-1:1;
                else
                 switch(ta)
                  {case 248:
                    var x=caml_int_compare(a[2],b[2]);if(x != 0)return x;break;
                   case 251:caml_invalid_argument("equal: abstract value");
                   case 255:
                    var x=caml_int64_compare(a,b);if(x != 0)return x;break;
                   default:
                    if(a.length != b.length)return a.length < b.length?-1:1;
                    if(a.length > 1)stack.push(a,b,1)}}
             else
              return 1}
          else
           if
            (b instanceof MlString
             ||
             b instanceof Array
             &&
             b[0]
             ===
             (b[0] | 0))
            return -1;
           else
            if(typeof a != "number" && a && a.compare)
             return a.compare(b,total);
            else
             if(typeof a == "function")
              caml_invalid_argument("compare: functional value");
             else
              {if(a < b)return -1;
               if(a > b)return 1;
               if(a != b)
                {if(!total)return NaN;if(a == a)return 1;if(b == b)return -1}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlString(len?2:9,"",len)}
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function caml_div(x,y)
     {if(y == 0)caml_raise_zero_divide();return x / y | 0}
    function caml_equal(x,y){return +(caml_compare_val(x,y,false) == 0)}
    function caml_fill_string(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    var caml_fill_bytes=caml_fill_string;
    function caml_float_compare(x,y)
     {if(x === y)return 0;
      if(x < y)return -1;
      if(x > y)return 1;
      if(x === x)return 1;
      if(y === y)return -1;
      return 0}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_bytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_float_of_string(s)
     {var res;
      s = caml_bytes_of_string(s);
      res = +s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = +s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[4] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return -Infinity;
      caml_failwith("float_of_string")}
    function caml_parse_format(fmt)
     {fmt = caml_bytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:-1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_new_string(buffer)}
    function caml_format_float(fmt,x)
     {var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == -Infinity){f.sign = -1;x = -x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(!isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = x.toFixed(prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+s.slice(j + 1);
           if(exp < -4 || x >= 1e+21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_bytes_of_string(fmt) == "%d")return caml_new_string("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = -1;i = -i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    var caml_method_cache=[];
    function caml_get_public_method(obj,tag,cacheid)
     {var meths=obj[1],ofs=caml_method_cache[cacheid];
      if(ofs === null)
       for(var i=caml_method_cache.length;i < cacheid;i++)
        caml_method_cache[i] = 0;
      else
       if(meths[ofs] === tag)return meths[ofs - 1];
      var li=3,hi=meths[1] * 2 + 1,mi;
      while(li < hi)
       {mi = li + hi >> 1 | 1;if(tag < meths[mi + 1])hi = mi - 2;else li = mi}
      caml_method_cache[cacheid] = li + 1;
      return tag == meths[li + 1]?meths[li]:0}
    function caml_greaterequal(x,y)
     {return +(caml_compare_val(x,y,false) >= 0)}
    if(!Math.imul)
     Math.imul
     =
     function(x,y){y |= 0;return ((x >> 16) * y << 16) + (x & 65535) * y | 0};
    var caml_mul=Math.imul;
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,3432918353 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,461845907);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (3864292196 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {var lo=v[1] | v[2] << 24,hi=v[2] >>> 8 | v[3] << 16;
      h = caml_hash_mix_int(h,hi ^ lo);
      return h}
    var log2_ok=Math.log2 && Math.log2(1.12355820928894744e+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return -Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int64_bits_of_float(x)
     {if(!isFinite(x))
       {if(isNaN(x))return [255,1,0,32752];
        return x > 0?[255,0,0,32752]:[255,0,0,65520]}
      var sign=x == 0 && 1 / x == -Infinity?32768:x >= 0?0:32768;
      if(sign)x = -x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,-1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 15 | sign | exp << 4;
      return [255,r1,r2,r3]}
    function caml_hash_mix_float(h,v0)
     {var
       v=caml_int64_bits_of_float(v0),
       lo=v[1] | v[2] << 24,
       hi=v[2] >>> 8 | v[3] << 16;
      h = caml_hash_mix_int(h,lo);
      h = caml_hash_mix_int(h,hi);
      return h}
    function caml_hash_mix_string_arr(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_string_str(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w
        =
        s.charCodeAt(i)
        |
        s.charCodeAt(i + 1)
        <<
        8
        |
        s.charCodeAt(i + 2)
        <<
        16
        |
        s.charCodeAt(i + 3)
        <<
        24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s.charCodeAt(i + 2) << 16;
        case 2:w |= s.charCodeAt(i + 1) << 8;
        case 1:w |= s.charCodeAt(i);h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_string(h,v)
     {switch(v.t & 6)
       {default:caml_convert_string_to_bytes(v);case 0:
         h = caml_hash_mix_string_str(h,v.c);break;
        case 2:h = caml_hash_mix_string_arr(h,v.c)
        }
      return h}
    function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h = caml_mul(h,2246822507 | 0);
      h ^= h >>> 13;
      h = caml_mul(h,3266489909 | 0);
      h ^= h >>> 16;
      return h}
    var HASH_QUEUE_SIZE=256;
    function caml_hash(count,limit,seed,obj)
     {var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
      if(sz < 0 || sz > HASH_QUEUE_SIZE)sz = HASH_QUEUE_SIZE;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
      while(rd < wr && num > 0)
       {v = queue[rd++];
        if(v instanceof Array && v[0] === (v[0] | 0))
         switch(v[0])
          {case 248:h = caml_hash_mix_int(h,v[2]);num--;break;
           case 250:queue[--rd] = v[1];break;
           case 255:h = caml_hash_mix_int64(h,v);num--;break;
           default:
            var tag=v.length - 1 << 10 | v[0];
            h = caml_hash_mix_int(h,tag);
            for(i = 1,len = v.length;i < len;i++)
             {if(wr >= sz)break;queue[wr++] = v[i]}
            break}
        else
         if(v instanceof MlString)
          {h = caml_hash_mix_string(h,v);num--}
         else
          if(v === (v | 0))
           {h = caml_hash_mix_int(h,v + v + 1);num--}
          else
           if(v === +v){h = caml_hash_mix_float(h,v);num--}}
      h = caml_hash_mix_final(h);
      return h & 1073741823}
    function caml_int64_to_bytes(x)
     {return [x[3] >> 8,
              x[3] & 255,
              x[2] >> 16,
              x[2] >> 8 & 255,
              x[2] & 255,
              x[1] >> 16,
              x[1] >> 8 & 255,
              x[1] & 255]}
    function caml_hash_univ_param(count,limit,obj)
     {var hash_accu=0;
      function hash_aux(obj)
       {limit--;
        if(count < 0 || limit < 0)return;
        if(obj instanceof Array && obj[0] === (obj[0] | 0))
         switch(obj[0])
          {case 248:count--;hash_accu = hash_accu * 65599 + obj[2] | 0;break;
           case 250:limit++;hash_aux(obj);break;
           case 255:
            count--;
            hash_accu = hash_accu * 65599 + obj[1] + (obj[2] << 24) | 0;
            break;
           default:
            count--;
            hash_accu = hash_accu * 19 + obj[0] | 0;
            for(var i=obj.length - 1;i > 0;i--)hash_aux(obj[i])}
        else
         if(obj instanceof MlString)
          {count--;
           switch(obj.t & 6)
            {default:caml_convert_string_to_bytes(obj);case 0:
              for(var b=obj.c,l=obj.l,i=0;i < l;i++)
               hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0;
              break;
             case 2:
              for(var a=obj.c,l=obj.l,i=0;i < l;i++)
               hash_accu = hash_accu * 19 + a[i] | 0
             }}
         else
          if(obj === (obj | 0))
           {count--;hash_accu = hash_accu * 65599 + obj | 0}
          else
           if(obj === +obj)
            {count--;
             var p=caml_int64_to_bytes(caml_int64_bits_of_float(obj));
             for(var i=7;i >= 0;i--)hash_accu = hash_accu * 19 + p[i] | 0}}
      hash_aux(obj);
      return hash_accu & 1073741823}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 128)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 2048)
         {t += String.fromCharCode(192 | c >> 6);
          t += String.fromCharCode(128 | c & 63)}
        else
         if(c < 55296 || c >= 57343)
          t
          +=
          String.fromCharCode(224 | c >> 12,128 | c >> 6 & 63,128 | c & 63);
         else
          if
           (c
            >=
            56319
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            56320
            ||
            d
            >
            57343)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 56613888;
            t
            +=
            String.fromCharCode
             (240 | c >> 18,128 | c >> 12 & 63,128 | c >> 6 & 63,128 | c & 63)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(!caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlString(tag,s,s.length)}
    function caml_hexstring_of_float(x,prec,style)
     {if(!isFinite(x))
       {if(isNaN(x))return caml_js_to_string("nan");
        return caml_js_to_string(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == -Infinity?1:x >= 0?0:1;
      if(sign)x = -x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > -1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_js_to_string
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return (x[3] | x[2] | x[1]) == 0}
    function caml_int64_of_int32(x)
     {return [255,x & 16777215,x >> 24 & 16777215,x >> 31 & 65535]}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_int64_sub(x,y)
     {var
       z1=x[1] - y[1],
       z2=x[2] - y[2] + (z1 >> 24),
       z3=x[3] - y[3] + (z2 >> 24);
      return [255,z1 & 16777215,z2 & 16777215,z3 & 65535]}
    function caml_int64_ucompare(x,y)
     {if(x[3] > y[3])return 1;
      if(x[3] < y[3])return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int64_lsl1(x)
     {x[3] = x[3] << 1 | x[2] >> 23;
      x[2] = (x[2] << 1 | x[1] >> 23) & 16777215;
      x[1] = x[1] << 1 & 16777215}
    function caml_int64_lsr1(x)
     {x[1] = (x[1] >>> 1 | x[2] << 23) & 16777215;
      x[2] = (x[2] >>> 1 | x[3] << 23) & 16777215;
      x[3] = x[3] >>> 1}
    function caml_int64_udivmod(x,y)
     {var
       offset=0,
       modulus=caml_obj_dup(x),
       divisor=caml_obj_dup(y),
       quotient=[255,0,0,0];
      while(caml_int64_ucompare(modulus,divisor) > 0)
       {offset++;caml_int64_lsl1(divisor)}
      while(offset >= 0)
       {offset--;
        caml_int64_lsl1(quotient);
        if(caml_int64_ucompare(modulus,divisor) >= 0)
         {quotient[1]++;modulus = caml_int64_sub(modulus,divisor)}
        caml_int64_lsr1(divisor)}
      return [0,quotient,modulus]}
    function caml_int64_to_int32(x){return x[1] | x[2] << 24}
    function caml_int64_is_negative(x){return x[3] << 16 < 0}
    function caml_int64_neg(x)
     {var y1=-x[1],y2=-x[2] + (y1 >> 24),y3=-x[3] + (y2 >> 24);
      return [255,y1 & 16777215,y2 & 16777215,y3 & 65535]}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = -1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=caml_int64_udivmod(x,wbase);
        x = p[1];
        buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer}
      while
       (!caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_string_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_ml_string_length(s){return s.l}
    function caml_parse_sign_and_base(s)
     {var
       i=0,
       len=caml_ml_string_length(s),
       base=10,
       sign=len > 0 && caml_string_unsafe_get(s,0) == 45?(i++,-1):1;
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return -1}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=-1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_export_var()
     {return typeof module !== "undefined" && module && module.exports
              ?module.exports
              :joo_global_object}
    function caml_js_from_array(a){return raw_array_sub(a,1,a.length - 1)}
    function caml_js_from_string(s){return s.toString()}
    function raw_array_cons(a,x)
     {var l=a.length,b=new Array(l + 1);
      b[0] = x;
      for(var i=1;i <= l;i++)b[i] = a[i - 1];
      return b}
    function caml_js_to_array(a){return raw_array_cons(a,0)}
    function caml_js_wrap_callback(f)
     {return function()
       {return arguments.length > 0
                ?caml_call_gen(f,arguments)
                :caml_call_gen(f,[undefined])}}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {return caml_call_gen(f,raw_array_cons(arguments,this))}}
    function caml_lessequal(x,y){return +(caml_compare_val(x,y,false) <= 0)}
    function caml_lessthan(x,y){return +(caml_compare_val(x,y,false) < 0)}
    function caml_lex_array(s)
     {s = caml_bytes_of_string(s);
      var l=s.length / 2,a=new Array(l);
      for(var i=0;i < l;i++)
       a[i]
       =
       (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8)
       <<
       16
       >>
       16;
      return a}
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    function caml_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5;
      if(!tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      var c,state=start_state,buffer=caml_array_of_string(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = -1}
      else
       state = -state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)return -base - 1;
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return -state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        state
        =
        tbl.lex_check[base + c] == state
         ?tbl.lex_trans[base + c]
         :tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == -1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         if(c == 256)lexbuf[lex_eof_reached] = 0}}
    function caml_list_of_js_array(a)
     {var l=0;
      for(var i=a.length - 1;i >= 0;i--){var e=a[i];l = [0,e,l]}
      return l}
    function caml_make_vect(len,init)
     {var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_string_of_array(a){return new MlString(4,a,a.length)}
    var
     caml_md5_string=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 128 << 8 * (i & 3);
           for(i = (i & ~3) + 8;(i & 63) < 60;i += 4)buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 536870911;
           var w=[1732584193,4023233417,2562383102,271733878];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,3614090360);
             d = ff(d,a,b,c,buffer[i + 1],12,3905402710);
             c = ff(c,d,a,b,buffer[i + 2],17,606105819);
             b = ff(b,c,d,a,buffer[i + 3],22,3250441966);
             a = ff(a,b,c,d,buffer[i + 4],7,4118548399);
             d = ff(d,a,b,c,buffer[i + 5],12,1200080426);
             c = ff(c,d,a,b,buffer[i + 6],17,2821735955);
             b = ff(b,c,d,a,buffer[i + 7],22,4249261313);
             a = ff(a,b,c,d,buffer[i + 8],7,1770035416);
             d = ff(d,a,b,c,buffer[i + 9],12,2336552879);
             c = ff(c,d,a,b,buffer[i + 10],17,4294925233);
             b = ff(b,c,d,a,buffer[i + 11],22,2304563134);
             a = ff(a,b,c,d,buffer[i + 12],7,1804603682);
             d = ff(d,a,b,c,buffer[i + 13],12,4254626195);
             c = ff(c,d,a,b,buffer[i + 14],17,2792965006);
             b = ff(b,c,d,a,buffer[i + 15],22,1236535329);
             a = gg(a,b,c,d,buffer[i + 1],5,4129170786);
             d = gg(d,a,b,c,buffer[i + 6],9,3225465664);
             c = gg(c,d,a,b,buffer[i + 11],14,643717713);
             b = gg(b,c,d,a,buffer[i + 0],20,3921069994);
             a = gg(a,b,c,d,buffer[i + 5],5,3593408605);
             d = gg(d,a,b,c,buffer[i + 10],9,38016083);
             c = gg(c,d,a,b,buffer[i + 15],14,3634488961);
             b = gg(b,c,d,a,buffer[i + 4],20,3889429448);
             a = gg(a,b,c,d,buffer[i + 9],5,568446438);
             d = gg(d,a,b,c,buffer[i + 14],9,3275163606);
             c = gg(c,d,a,b,buffer[i + 3],14,4107603335);
             b = gg(b,c,d,a,buffer[i + 8],20,1163531501);
             a = gg(a,b,c,d,buffer[i + 13],5,2850285829);
             d = gg(d,a,b,c,buffer[i + 2],9,4243563512);
             c = gg(c,d,a,b,buffer[i + 7],14,1735328473);
             b = gg(b,c,d,a,buffer[i + 12],20,2368359562);
             a = hh(a,b,c,d,buffer[i + 5],4,4294588738);
             d = hh(d,a,b,c,buffer[i + 8],11,2272392833);
             c = hh(c,d,a,b,buffer[i + 11],16,1839030562);
             b = hh(b,c,d,a,buffer[i + 14],23,4259657740);
             a = hh(a,b,c,d,buffer[i + 1],4,2763975236);
             d = hh(d,a,b,c,buffer[i + 4],11,1272893353);
             c = hh(c,d,a,b,buffer[i + 7],16,4139469664);
             b = hh(b,c,d,a,buffer[i + 10],23,3200236656);
             a = hh(a,b,c,d,buffer[i + 13],4,681279174);
             d = hh(d,a,b,c,buffer[i + 0],11,3936430074);
             c = hh(c,d,a,b,buffer[i + 3],16,3572445317);
             b = hh(b,c,d,a,buffer[i + 6],23,76029189);
             a = hh(a,b,c,d,buffer[i + 9],4,3654602809);
             d = hh(d,a,b,c,buffer[i + 12],11,3873151461);
             c = hh(c,d,a,b,buffer[i + 15],16,530742520);
             b = hh(b,c,d,a,buffer[i + 2],23,3299628645);
             a = ii(a,b,c,d,buffer[i + 0],6,4096336452);
             d = ii(d,a,b,c,buffer[i + 7],10,1126891415);
             c = ii(c,d,a,b,buffer[i + 14],15,2878612391);
             b = ii(b,c,d,a,buffer[i + 5],21,4237533241);
             a = ii(a,b,c,d,buffer[i + 12],6,1700485571);
             d = ii(d,a,b,c,buffer[i + 3],10,2399980690);
             c = ii(c,d,a,b,buffer[i + 10],15,4293915773);
             b = ii(b,c,d,a,buffer[i + 1],21,2240044497);
             a = ii(a,b,c,d,buffer[i + 8],6,1873313359);
             d = ii(d,a,b,c,buffer[i + 15],10,4264355552);
             c = ii(c,d,a,b,buffer[i + 6],15,2734768916);
             b = ii(b,c,d,a,buffer[i + 13],21,1309151649);
             a = ii(a,b,c,d,buffer[i + 4],6,4149444226);
             d = ii(d,a,b,c,buffer[i + 11],10,3174756917);
             c = ii(c,d,a,b,buffer[i + 2],15,718787259);
             b = ii(b,c,d,a,buffer[i + 9],21,3951481745);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 255;
           return t}
         return function(s,ofs,len)
          {var buf=[];
           switch(s.t & 6)
            {default:caml_convert_string_to_bytes(s);case 0:
              var b=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                b.charCodeAt(j)
                |
                b.charCodeAt(j + 1)
                <<
                8
                |
                b.charCodeAt(j + 2)
                <<
                16
                |
                b.charCodeAt(j + 3)
                <<
                24}
              for(;i < len;i++)
               buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
              break;
             case 4:
              var a=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
              for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_ml_bytes_length(s){return s.l}
    function caml_sys_close(fd){delete caml_global_data.fds[fd];return 0}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(!chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(!chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_ml_close_channel(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_flush(chanid);
      chan.opened = false;
      chan.file.close();
      caml_sys_close(chan.fd);
      return 0}
    function caml_ml_refill_input(chan)
     {var str=chan.refill(),str_len=caml_ml_string_length(str);
      if(str_len == 0)chan.refill = null;
      chan.file.write(chan.file.length(),str,0,str_len);
      return str_len}
    function caml_ml_input(chanid,s,i,l)
     {var chan=caml_ml_channels[chanid],l2=chan.file.length() - chan.offset;
      if(l2 == 0 && chan.refill != null)l2 = caml_ml_refill_input(chan);
      if(l2 < l)l = l2;
      chan.file.read(chan.offset,s,i,l);
      chan.offset += l;
      return l}
    function caml_string_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_ml_may_refill_input(chanid)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill == null)return;
      if(chan.file.length() != chan.offset)return;
      caml_ml_refill_input(chan)}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlString(len?2:9,"",len)}
    function caml_raise_end_of_file()
     {caml_raise_constant(caml_global_data.End_of_file)}
    function caml_ml_input_char(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_may_refill_input(chanid);
      if(chan.offset >= chan.file.length())caml_raise_end_of_file();
      var res=chan.file.read_one(chan.offset);
      chan.offset++;
      return res}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd();
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(-1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = name instanceof MlString?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_raise_no_such_file(name)
     {name = name instanceof MlString?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_string(len | 0);
      caml_blit_string(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_string_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_string(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_string(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_string(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_string_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(!this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun(caml_new_string(this.root),caml_new_string(name));
        if(res != 0)this.content[name] = new MlFakeFile(res[1])}};
    MlFakeDevice.prototype.exists
    =
    function(name){this.lookup(name);return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);if(m && !seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_string(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(content instanceof MlString)
       this.content[name] = new MlFakeFile(content);
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_string_of_array(content));
       else
        if(content.toString)
         {var mlstring=caml_new_string(content.toString());
          this.content[name] = new MlFakeFile(mlstring)}};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_string_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_string_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_set(s,i,c)}
    var Buffer=joo_global_object.Buffer;
    function MlNodeFile(fd){this.fs = null;this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len){this.fs.ftruncateSync(this.fd,len | 0)};
    MlNodeFile.prototype.length
    =
    function(){return this.fs.fstatSync(this.fd).size};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(!a instanceof joo_global_object.Uint8Array)
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.writeSync(this.fd,buffer,buf_offset,len,offset);
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(!(a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,buf_offset,len,offset);
      for(var i=0;i < len;i++)
       caml_string_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (joo_global_object.Uint8Array)(1),buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,0,1,offset);
      return buffer[0]};
    MlNodeFile.prototype.close = function(){this.fs.closeSync(this.fd)};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = null;this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name){return this.fs.existsSync(this.nm(name))?1:0};
    MlNodeDevice.prototype.readdir
    =
    function(name){return this.fs.readdirSync(this.nm(name))};
    MlNodeDevice.prototype.is_dir
    =
    function(name){return this.fs.statSync(this.nm(name)).isDirectory()?1:0};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {var b=this.fs.existsSync(this.nm(name))?1:0;
      this.fs.unlinkSync(this.nm(name));
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      var fd=this.fs.openSync(this.nm(name),res);
      return new MlNodeFile(fd)};
    MlNodeDevice.prototype.rename
    =
    function(o,n){this.fs.renameSync(this.nm(o),this.nm(n))};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var jsoo_mount_point=[];
    if(typeof require == "undefined")
     jsoo_mount_point.push({path:"/",device:new MlFakeDevice("/")});
    else
     jsoo_mount_point.push({path:"/",device:new MlNodeDevice("/")});
    jsoo_mount_point.push
     ({path:"/static/",device:new MlFakeDevice("/static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (!res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_new_string(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(!caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_string(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c],l];
      return l}
    function caml_ml_output(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(!chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var string;
      if(offset == 0 && caml_ml_string_length(buffer) == len)
       string = buffer;
      else
       {string = caml_create_string(len);
        caml_blit_string(buffer,offset,string,0,len)}
      var jsstring=string.toString(),id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output_char(chanid,c)
     {var s=caml_new_string(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_ml_set_channel_name(){return 0}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_lex_run_mem(s,i,mem,curr_pos)
     {for(;;)
       {var dst=s.charCodeAt(i);
        i++;
        if(dst == 255)return;
        var src=s.charCodeAt(i);
        i++;
        mem[dst + 1] = src == 255?curr_pos:mem[src + 1]}}
    function caml_lex_run_tag(s,i,mem)
     {for(;;)
       {var dst=s.charCodeAt(i);
        i++;
        if(dst == 255)return;
        var src=s.charCodeAt(i);
        i++;
        mem[dst + 1] = src == 255?-1:mem[src + 1]}}
    function caml_new_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_mem=10,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5,
       lex_base_code=6,
       lex_backtrk_code=7,
       lex_default_code=8,
       lex_trans_code=9,
       lex_check_code=10,
       lex_code=11;
      if(!tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      if(!tbl.lex_default_code)
       {tbl.lex_base_code = caml_lex_array(tbl[lex_base_code]);
        tbl.lex_backtrk_code = caml_lex_array(tbl[lex_backtrk_code]);
        tbl.lex_check_code = caml_lex_array(tbl[lex_check_code]);
        tbl.lex_trans_code = caml_lex_array(tbl[lex_trans_code]);
        tbl.lex_default_code = caml_lex_array(tbl[lex_default_code])}
      if(tbl.lex_code == null)
       tbl.lex_code = caml_bytes_of_string(tbl[lex_code]);
      var c,state=start_state,buffer=caml_array_of_string(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = -1}
      else
       state = -state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)
         {var pc_off=tbl.lex_base_code[state];
          caml_lex_run_tag(tbl.lex_code,pc_off,lexbuf[lex_mem]);
          return -base - 1}
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {var pc_off=tbl.lex_backtrk_code[state];
          caml_lex_run_tag(tbl.lex_code,pc_off,lexbuf[lex_mem]);
          lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return -state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        var pstate=state;
        state
        =
        tbl.lex_check[base + c] == state
         ?tbl.lex_trans[base + c]
         :tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == -1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         {var base_code=tbl.lex_base_code[pstate],pc_off;
          pc_off
          =
          tbl.lex_check_code[base_code + c] == pstate
           ?tbl.lex_trans_code[base_code + c]
           :tbl.lex_default_code[pstate];
          if(pc_off > 0)
           caml_lex_run_mem
            (tbl.lex_code,pc_off,lexbuf[lex_mem],lexbuf[lex_curr_pos]);
          if(c == 256)lexbuf[lex_eof_reached] = 0}}}
    function caml_notequal(x,y){return +(caml_compare_val(x,y,false) != 0)}
    function caml_obj_block(tag,size)
     {var o=new Array(size + 1);
      o[0] = tag;
      for(var i=1;i <= size;i++)o[i] = 0;
      return o}
    function caml_obj_set_tag(x,tag){x[0] = tag;return 0}
    function caml_obj_tag(x)
     {return x instanceof Array?x[0]:x instanceof MlString?252:1e3}
    function caml_register_global(n,v,name_opt)
     {caml_global_data[n + 1] = v;if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_bytes_of_string(nm)] = v;return 0}
    function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
    function caml_string_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_sys_const_max_wosize(){return 2147483647 / 4 | 0}
    function caml_sys_file_exists(name)
     {var root=resolve_fs_device(name);return root.device.exists(root.rest)}
    function caml_sys_get_config(){return [0,caml_new_string("Unix"),32,0]}
    function caml_sys_getcwd(){return caml_new_string(caml_current_dir)}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=joo_global_object,n=name.toString();
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_js_to_string(g.process.env[n]);
      caml_raise_not_found()}
    function caml_sys_random_seed()
     {var x=new Date() ^ 4294967295 * Math.random();return [0,x]}
    function caml_tanh_float(x)
     {var y=Math.exp(x),z=Math.exp(-x);return (y - z) / (y + z)}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4?f(a0,a1,a2,a3):caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     mode=[0,0,[0,7,0]],
     dummy_pos=[0,caml_new_string(""),0,0,-1],
     zero_pos=[0,caml_new_string(""),1,0,0],
     param=
      [0,
       [11,caml_new_string("invalid box description "),[3,0,0]],
       caml_new_string("invalid box description %S")],
     current_dir_name=caml_new_string("."),
     dir_sep=caml_new_string("/"),
     quotequote=caml_new_string("'\\''"),
     current_dir_name$0=caml_new_string("."),
     parent_dir_name=caml_new_string(".."),
     dir_sep$0=caml_new_string("\\"),
     current_dir_name$1=caml_new_string("."),
     parent_dir_name$0=caml_new_string(".."),
     dir_sep$1=caml_new_string("/"),
     state=[0,0],
     _gY_=[0,1],
     _gZ_=[0,32],
     by=caml_new_string(" "),
     sub$0=caml_new_string("\t"),
     _iQ_=caml_new_string("default"),
     _iR_=caml_new_string("float"),
     _iS_=caml_new_string(""),
     sep=caml_new_string(", "),
     default_mapper=[0,0,0,0,0,0,0,0,0,0],
     a$1=
      [0,
       caml_new_string("(int)control"),
       [0,caml_new_string("(int)value"),[0,caml_new_string("(int)channel"),0]]],
     a=
      [0,
       caml_new_string("(int)note"),
       [0,
        caml_new_string("(int)velocity"),
        [0,caml_new_string("(int)channel"),0]]],
     a$0=
      [0,caml_new_string("(int)note"),[0,caml_new_string("(int)channel"),0]],
     a$4=
      [0,
       caml_new_string("(int)control"),
       [0,caml_new_string("(int)value"),[0,caml_new_string("(int)channel"),0]]],
     a$2=
      [0,
       caml_new_string("(int)note"),
       [0,caml_new_string("(int)vel"),[0,caml_new_string("(int)channel"),0]]],
     a$3=
      [0,caml_new_string("(int)note"),[0,caml_new_string("(int)channel"),0]],
     a$7=
      [0,
       caml_new_string("(int)control"),
       [0,caml_new_string("(int)value"),[0,caml_new_string("(int)channel"),0]]],
     a$5=
      [0,
       caml_new_string("(int)note"),
       [0,
        caml_new_string("(int)velocity"),
        [0,caml_new_string("(int)channel"),0]]],
     a$6=
      [0,caml_new_string("(int)note"),[0,caml_new_string("(int)channel"),0]],
     a$10=
      [0,
       caml_new_string("control"),
       [0,caml_new_string("value"),[0,caml_new_string("channel"),0]]],
     a$8=
      [0,
       caml_new_string("note"),
       [0,caml_new_string("velocity"),[0,caml_new_string("channel"),0]]],
     a$9=[0,caml_new_string("note"),[0,caml_new_string("channel"),0]],
     _K2_=
      [0,
       caml_new_string("x86_64"),
       caml_new_string("pc"),
       caml_new_string("linux-gnu")],
     typ$2=caml_new_string("real"),
     unit_typ=[0,caml_new_string("unit")],
     default_options=[0,1,1,1,1,1,1],
     interpreter_options=[0,1,1,0,0,0,0],
     params$1=
      [0,
       [0,caml_new_string("channels"),0],
       [0,[0,caml_new_string("file"),3],0]],
     msg$4=
      caml_new_string
       ("The attribute 'wave' requires specific parameters. e.g. 'wave(channels=1,file=\"file.wav\")'"),
     msg$5=
      caml_new_string
       ("This attribute can only be applied to functions returning 'real'"),
     msg$3=
      caml_new_string
       ('This attribute requires the function to have the following arguments:\n"external wave(channel:int, index:int) : real"'),
     params$0=
      [0,
       [0,caml_new_string("size"),0],
       [0,[0,caml_new_string("min"),1],[0,[0,caml_new_string("max"),1],0]]],
     msg$1=
      caml_new_string
       ("The attribute 'table' requires specific parameters. e.g. 'table(size=128,min=0.0,max=1.0)'"),
     msg$2=
      caml_new_string
       ("This attribute can only be applied to functions returning 'real'"),
     msg$0=
      caml_new_string
       ('This attribute requires the function to have only one argument:\n"fun foo(x:real) : real"'),
     msg=
      caml_new_string
       ("The number is NaN, this can be the result of a simplification"),
     ctx_name=[0,caml_new_string("_ctx"),0],
     msg$6=
      caml_new_string
       ("The return type of the function process should be a numeric value or a tuple with numeric elements"),
     msg$11=caml_new_string("The function 'default' must have no arguments"),
     msg$10=
      caml_new_string
       ("The function 'checkControlChange' must have three arguments (control, value, channel)"),
     msg$9=
      caml_new_string
       ("The function 'noteOff' must have two arguments (note, channel)"),
     msg$8=
      caml_new_string
       ("The function 'noteOn' must have three arguments (note, velocity, channel)"),
     msg$7=caml_new_string("The type of this argument must be numeric"),
     keywords$3=
      caml_list_of_js_array
       ([[0,caml_new_string("fun"),5],
         [0,caml_new_string("mem"),6],
         [0,caml_new_string("val"),7],
         [0,caml_new_string("if"),9],
         [0,caml_new_string("then"),10],
         [0,caml_new_string("else"),11],
         [0,caml_new_string("return"),8],
         [0,caml_new_string("while"),27],
         [0,caml_new_string("type"),28],
         [0,caml_new_string("true"),31],
         [0,caml_new_string("false"),32],
         [0,caml_new_string("and"),33],
         [0,caml_new_string("external"),35]]),
     tbl=
      [0,
       caml_new_string
        ("\0\0\xd8\xff\xdb\xffP\0\x9d\0\xdf\xff`\0\xe0\xff\x02\0N\x006\0\xe9\xff \0\xec\xff#\0\xee\xff\xef\xff\xf0\xff0\0\xf5\xff\xf6\xff\x03\0\x12\0\xf9\xff\xfa\xff\xc2\0\xfc\xff\xfd\xff\xce\0\x01\0\xff\xff\xf4\xff\xf2\xff\xea\xff\xf1\xff\xf3\xff\xe7\xff\xeb\xff\xe8\xff\xe5\xff\xe6\xff\xe4\xff\xd9\xff\xda\xff\xb3\0\r\x01\x17\x01#\x01\xa1\0\xfd\xff\xfe\xff\x04\0\xff\xff\xd2\0\xfb\xff\xfc\xffa\0\x86\0\x05\0\xff\xff\xfe\xff\xfd\xffS\x01\xfb\xff\xfc\xff\x06\0\xfd\xff\x07\0\xff\xff\xcf\0H\x01"),
       caml_new_string
        ('\xff\xff\xff\xff\xff\xff#\0!\0\xff\xff \0\xff\xff\x1c\0\x1c\0\x1e\0\xff\xff\x1f\0\xff\xff\x12\0\xff\xff\xff\xff\xff\xff\x1d\0\xff\xff\xff\xff\b\0\x07\0\xff\xff\xff\xff\x04\0\xff\xff\xff\xff\x01\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"\0"\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\x03\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\x04\0\xff\xff\x01\0\x01\0'),
       caml_new_string
        ("\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff1\0\0\0\0\0\xff\xff\0\x007\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0?\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff"),
       caml_new_string
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1c\0\x1e\0\x1e\0\x1c\0\x1d\x004\0;\0B\0F\0\0\0\0\0E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1c\0\x0b\0\x02\0\0\0\0\0\x05\0\n\0\r\0\x18\0\x17\0\x05\0\x07\0\x0f\0\f\0\x1b\0\x06\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x11\0\x10\0\t\0\x0e\0\b\0)\0\x1a\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x15\0&\0\x13\0%\0\x19\0$\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x16\0\x12\0\x14\0\x03\0 \0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0*\0'\0(\0\"\0\x1f\0+\0=\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\x004\0!\0#\x003\0\x03\0<\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0-\0\0\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x1c\0F\0F\0\x1c\0\0\0;\0\0\0/\0:\0/\0\0\0,\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0\0\0\x1c\0F\0\x03\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\x008\0\0\0\0\0\0\0\x01\x009\0,\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\0\0\0\0\0\0\0\0\x03\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0F\0,\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0B\0\0\0\0\0A\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0\0\0\0\0D\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x002\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0C\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x006\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\0"),
       caml_new_string
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x1d\0\0\0\0\x003\0:\0A\0C\0\xff\xff\xff\xffC\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\0\0\f\0\0\0\x0e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x15\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x06\0\t\0\t\0\x12\0\x16\0\x06\x008\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\x000\0\x12\0\x12\x000\0\x03\x009\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x04\0\xff\xff\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x1c\0E\0E\0\x1c\0\xff\xff5\0\xff\xff,\x005\0,\0\xff\xff\x04\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\xff\xff\x1c\0E\0\x19\0\xff\xff\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\x005\0\xff\xff\xff\xff\xff\xff\0\x005\0\x04\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\xff\xff\xff\xff\xff\xff\xff\xff\x19\0\xff\xff\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0F\0-\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0>\0\xff\xff\xff\xff>\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffF\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff-\0\xff\xff\xff\xff>\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff5\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\0"),
       caml_new_string
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0"),
       caml_new_string
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\x04\0"),
       caml_new_string
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
       caml_new_string
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\x01\0\0\0\x
       caml_new_string
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffC\0E\0\xff\xffC\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_new_string("\xff\x01\xff\xff\0\x01\xff")],
     version=caml_new_string("\nv0.3.25\n"),
     shared=
      [0,
       caml_new_string("version"),
       caml_new_string("main"),
       caml_new_string("generateLua"),
       caml_new_string("generateJs"),
       caml_new_string("generateJSCode"),
       caml_new_string("generateC"),
       caml_new_string("checkCode")];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _g_=caml_new_string("input"),
     _f_=caml_new_string("output_substring"),
     _e_=caml_new_string("%.12g"),
     _d_=caml_new_string("."),
     _b_=caml_new_string("true"),
     _c_=caml_new_string("false"),
     _m_=caml_new_string("List.map2"),
     _n_=caml_new_string("List.iter2"),
     _o_=caml_new_string("List.for_all2"),
     _p_=[0,0,0],
     _q_=caml_new_string("List.combine"),
     _r_=[0,caml_new_string("list.ml"),227,11],
     _j_=caml_new_string("nth"),
     _k_=caml_new_string("List.nth"),
     _i_=caml_new_string("tl"),
     _h_=caml_new_string("hd"),
     _s_=caml_new_string("\\\\"),
     _t_=caml_new_string("\\'"),
     _u_=caml_new_string("\\b"),
     _v_=caml_new_string("\\t"),
     _w_=caml_new_string("\\n"),
     _x_=caml_new_string("\\r"),
     _A_=caml_new_string("String.blit / Bytes.blit_string"),
     _z_=caml_new_string("Bytes.blit"),
     _y_=caml_new_string("String.sub / Bytes.sub"),
     _E_=caml_new_string("String.contains_from / Bytes.contains_from"),
     _D_=caml_new_string("String.index_from / Bytes.index_from"),
     _C_=caml_new_string(""),
     _B_=caml_new_string("String.concat"),
     _G_=caml_new_string("Array.blit"),
     _F_=caml_new_string("Array.init"),
     _H_=caml_new_string("Lexing.lex_refill: cannot grow buffer"),
     _M_=caml_new_string("Set.remove_min_elt"),
     _N_=[0,0,0,0],
     _O_=[0,0,0],
     _P_=[0,caml_new_string("set.ml"),409,18],
     _I_=caml_new_string("Set.bal"),
     _J_=caml_new_string("Set.bal"),
     _K_=caml_new_string("Set.bal"),
     _L_=caml_new_string("Set.bal"),
     _V_=caml_new_string("Map.remove_min_elt"),
     _W_=[0,0,0,0],
     _X_=[0,caml_new_string("map.ml"),274,10],
     _Y_=[0,0,0],
     _R_=caml_new_string("Map.bal"),
     _S_=caml_new_string("Map.bal"),
     _T_=caml_new_string("Map.bal"),
     _U_=caml_new_string("Map.bal"),
     ___=caml_new_string("CamlinternalLazy.Undefined"),
     _ac_=caml_new_string("Buffer.add_substring/add_subbytes"),
     _ab_=caml_new_string("Buffer.add: cannot grow buffer"),
     _aa_=caml_new_string("Buffer.nth"),
     _$_=caml_new_string("Buffer.sub"),
     _al_=caml_new_string("%c"),
     _am_=caml_new_string("%s"),
     _an_=caml_new_string("%i"),
     _ao_=caml_new_string("%li"),
     _ap_=caml_new_string("%ni"),
     _aq_=caml_new_string("%Li"),
     _ar_=caml_new_string("%f"),
     _as_=caml_new_string("%B"),
     _at_=caml_new_string("%{"),
     _au_=caml_new_string("%}"),
     _av_=caml_new_string("%("),
     _aw_=caml_new_string("%)"),
     _ax_=caml_new_string("%a"),
     _ay_=caml_new_string("%t"),
     _az_=caml_new_string("%?"),
     _aA_=caml_new_string("%r"),
     _aB_=caml_new_string("%_r"),
     _aC_=[0,caml_new_string("camlinternalFormat.ml"),845,23],
     _aN_=[0,caml_new_string("camlinternalFormat.ml"),809,21],
     _aF_=[0,caml_new_string("camlinternalFormat.ml"),810,21],
     _aO_=[0,caml_new_string("camlinternalFormat.ml"),813,21],
     _aG_=[0,caml_new_string("camlinternalFormat.ml"),814,21],
     _aP_=[0,caml_new_string("camlinternalFormat.ml"),817,19],
     _aH_=[0,caml_new_string("camlinternalFormat.ml"),818,19],
     _aQ_=[0,caml_new_string("camlinternalFormat.ml"),821,22],
     _aI_=[0,caml_new_string("camlinternalFormat.ml"),822,22],
     _aR_=[0,caml_new_string("camlinternalFormat.ml"),826,30],
     _aJ_=[0,caml_new_string("camlinternalFormat.ml"),827,30],
     _aL_=[0,caml_new_string("camlinternalFormat.ml"),831,26],
     _aD_=[0,caml_new_string("camlinternalFormat.ml"),832,26],
     _aM_=[0,caml_new_string("camlinternalFormat.ml"),841,28],
     _aE_=[0,caml_new_string("camlinternalFormat.ml"),842,28],
     _aK_=[0,caml_new_string("camlinternalFormat.ml"),846,23],
     _bO_=caml_new_string("%u"),
     _bM_=[0,caml_new_string("camlinternalFormat.ml"),1520,4],
     _bN_=caml_new_string("Printf: bad conversion %["),
     _bP_=[0,caml_new_string("camlinternalFormat.ml"),1588,39],
     _bQ_=[0,caml_new_string("camlinternalFormat.ml"),1611,31],
     _bR_=[0,caml_new_string("camlinternalFormat.ml"),1612,31],
     _bS_=caml_new_string("Printf: bad conversion %_"),
     _bT_=caml_new_string("@{"),
     _bU_=caml_new_string("@["),
     _bV_=caml_new_string("@{"),
     _bW_=caml_new_string("@["),
     _bX_=caml_new_string(""),
     _bY_=[0,0,4],
     _bZ_=caml_new_string(""),
     _b0_=caml_new_string("b"),
     _b1_=caml_new_string("h"),
     _b2_=caml_new_string("hov"),
     _b3_=caml_new_string("hv"),
     _b4_=caml_new_string("v"),
     _bK_=caml_new_string("nan"),
     _bL_=caml_new_string("."),
     _bI_=caml_new_string("neg_infinity"),
     _bJ_=caml_new_string("infinity"),
     _bH_=caml_new_string("%.12g"),
     _bu_=caml_new_string("%nd"),
     _bv_=caml_new_string("%+nd"),
     _bw_=caml_new_string("% nd"),
     _bx_=caml_new_string("%ni"),
     _by_=caml_new_string("%+ni"),
     _bz_=caml_new_string("% ni"),
     _bA_=caml_new_string("%nx"),
     _bB_=caml_new_string("%#nx"),
     _bC_=caml_new_string("%nX"),
     _bD_=caml_new_string("%#nX"),
     _bE_=caml_new_string("%no"),
     _bF_=caml_new_string("%#no"),
     _bG_=caml_new_string("%nu"),
     _bh_=caml_new_string("%ld"),
     _bi_=caml_new_string("%+ld"),
     _bj_=caml_new_string("% ld"),
     _bk_=caml_new_string("%li"),
     _bl_=caml_new_string("%+li"),
     _bm_=caml_new_string("% li"),
     _bn_=caml_new_string("%lx"),
     _bo_=caml_new_string("%#lx"),
     _bp_=caml_new_string("%lX"),
     _bq_=caml_new_string("%#lX"),
     _br_=caml_new_string("%lo"),
     _bs_=caml_new_string("%#lo"),
     _bt_=caml_new_string("%lu"),
     _a6_=caml_new_string("%Ld"),
     _a7_=caml_new_string("%+Ld"),
     _a8_=caml_new_string("% Ld"),
     _a9_=caml_new_string("%Li"),
     _a__=caml_new_string("%+Li"),
     _a$_=caml_new_string("% Li"),
     _ba_=caml_new_string("%Lx"),
     _bb_=caml_new_string("%#Lx"),
     _bc_=caml_new_string("%LX"),
     _bd_=caml_new_string("%#LX"),
     _be_=caml_new_string("%Lo"),
     _bf_=caml_new_string("%#Lo"),
     _bg_=caml_new_string("%Lu"),
     _aT_=caml_new_string("%d"),
     _aU_=caml_new_string("%+d"),
     _aV_=caml_new_string("% d"),
     _aW_=caml_new_string("%i"),
     _aX_=caml_new_string("%+i"),
     _aY_=caml_new_string("% i"),
     _aZ_=caml_new_string("%x"),
     _a0_=caml_new_string("%#x"),
     _a1_=caml_new_string("%X"),
     _a2_=caml_new_string("%#X"),
     _a3_=caml_new_string("%o"),
     _a4_=caml_new_string("%#o"),
     _a5_=caml_new_string("%u"),
     _ad_=caml_new_string("@]"),
     _ae_=caml_new_string("@}"),
     _af_=caml_new_string("@?"),
     _ag_=caml_new_string("@\n"),
     _ah_=caml_new_string("@."),
     _ai_=caml_new_string("@@"),
     _aj_=caml_new_string("@%"),
     _ak_=caml_new_string("@"),
     _aS_=caml_new_string("CamlinternalFormat.Type_mismatch"),
     _b6_=caml_new_string("Random.int"),
     _b5_=caml_new_string("x"),
     _b7_=
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
     _Uz_=caml_new_string("OCAMLRUNPARAM"),
     _Ux_=caml_new_string("CAMLRUNPARAM"),
     _b8_=caml_new_string(""),
     _cf_=[3,0,3],
     _cg_=caml_new_string("."),
     _cd_=caml_new_string(">"),
     _ce_=caml_new_string("</"),
     _cb_=caml_new_string(">"),
     _cc_=caml_new_string("<"),
     _ca_=caml_new_string("\n"),
     _b__=caml_new_string("Format.Empty_queue"),
     _b$_=[0,caml_new_string("")],
     _ch_=caml_new_string(""),
     _ct_=caml_new_string("Filename.chop_extension"),
     _cq_=caml_new_string(""),
     _co_=caml_new_string("./"),
     _cn_=caml_new_string(".\\"),
     _cm_=caml_new_string("../"),
     _cl_=caml_new_string("..\\"),
     _cj_=caml_new_string(""),
     _ci_=caml_new_string(""),
     _Uv_=caml_new_string("TMPDIR"),
     _ck_=caml_new_string("/tmp"),
     _Ut_=caml_new_string("TEMP"),
     _cp_=caml_new_string("."),
     _cr_=caml_new_string("Cygwin"),
     _cs_=caml_new_string("Win32"),
     _cu_=caml_new_string("Js.Error"),
     _cv_=caml_new_string("jsError"),
     _cw_=caml_new_string("init"),
     _cz_=caml_new_string(""),
     _cy_=caml_new_string(""),
     _cx_=caml_new_string(", "),
     _cF_=caml_new_string("\n"),
     _cD_=caml_new_string(""),
     _cE_=caml_new_string("CCString.replace"),
     _cC_=[0,caml_new_string("src/core/CCString.cppo.ml"),155,10],
     _cB_=[0,caml_new_string("src/core/CCString.cppo.ml"),126,16],
     _cK_=caml_new_string(""),
     _cJ_=caml_new_string(""),
     _cI_=caml_new_string("->"),
     _cH_=caml_new_string(", "),
     _cG_=[0,caml_new_string("src/core/CCMap.ml"),82,25],
     _cV_=caml_new_string("("),
     _cW_=caml_new_string(")"),
     _cT_=caml_new_string('"'),
     _cU_=caml_new_string('"'),
     _cS_=caml_new_string(";"),
     _cR_=caml_new_string(", "),
     _cQ_=caml_new_string(","),
     _cP_=caml_new_string("Cannot outdent more"),
     _cO_=caml_new_string("\n"),
     _cN_=caml_new_string(""),
     _cM_=caml_new_string(""),
     _gX_=
      [0,
       [11,caml_new_string("; ModuleID = '"),[2,0,[12,39,0]]],
       caml_new_string("; ModuleID = '%s'")],
     _gW_=caml_new_string("int_of_string"),
     _gR_=caml_new_string("define "),
     _gS_=
      [0,
       [15,[12,32,[15,[12,40,[15,[11,caml_new_string(") "),0]]]]]],
       caml_new_string("%a %a(%a) ")],
     _gT_=
      [0,
       [11,caml_new_string('section "'),[2,0,[11,caml_new_string('" '),0]]],
       caml_new_string('section "%s" ')],
     _gU_=
      [0,
       [11,caml_new_string("align "),[4,0,0,0,[12,32,0]]],
       caml_new_string("align %d ")],
     _gV_=
      [0,
       [11,caml_new_string('gc "'),[2,0,[11,caml_new_string('" '),0]]],
       caml_new_string('gc "%s" ')],
     _gQ_=[0,caml_new_string("ollvm_printer.ml"),505,2],
     _gO_=caml_new_string("declare "),
     _gP_=
      [0,
       [15,[12,32,[15,[12,40,[15,[12,41,0]]]]]],
       caml_new_string("%a %a(%a)")],
     _gN_=[0,caml_new_string("ollvm_printer.ml"),485,2],
     _gI_=caml_new_string("constant"),
     _gM_=caml_new_string("global"),
     _gJ_=
      [0,
       [15,[11,caml_new_string(" = "),[2,0,[12,32,[15,0]]]]],
       caml_new_string("%a = %s %a")],
     _gK_=
      [0,
       [11,caml_new_string(", section "),[2,0,0]],
       caml_new_string(", section %s")],
     _gL_=
      [0,
       [11,caml_new_string(", align "),[4,0,0,0,0]],
       caml_new_string(", align %d")],
     _gF_=[0,[12,33,[2,0,0]],caml_new_string("!%s")],
     _gC_=caml_new_string("null"),
     _gD_=[0,[12,33,[2,0,0]],caml_new_string("!%s")],
     _gE_=
      [0,
       [11,caml_new_string('metadata !"'),[2,0,[12,34,0]]],
       caml_new_string('metadata !"%s"')],
     _gG_=
      [0,[11,caml_new_string("!{"),[15,[12,125,0]]],caml_new_string("!{%a}")],
     _gH_=
      [0,
       [11,caml_new_string("metadata !{"),[15,[12,125,0]]],
       caml_new_string("metadata !{%a}")],
     _gx_=
      [0,
       [11,caml_new_string('target triple = "'),[2,0,[12,34,0]]],
       caml_new_string('target triple = "%s"')],
     _gy_=
      [0,
       [11,caml_new_string('target datalayout = "'),[2,0,[12,34,0]]],
       caml_new_string('target datalayout = "%s"')],
     _gz_=[0,[15,[12,32,[15,0]]],caml_new_string("%a %a")],
     _gA_=
      [0,
       [12,33,[2,0,[11,caml_new_string(" = "),[15,0]]]],
       caml_new_string("!%s = %a")],
     _gB_=
      [0,
       [12,
        35,
        [4,
         0,
         0,
         0,
         [11,caml_new_string(" = { "),[15,[11,caml_new_string(" }"),0]]]]],
       caml_new_string("#%d = { %a }")],
     _gw_=[0,[15,[12,32,[15,0]]],caml_new_string("%a %a")],
     _gv_=[0,[15,[12,32,[15,0]]],caml_new_string("%a %a")],
     _go_=caml_new_string("null"),
     _gp_=caml_new_string("undef"),
     _gq_=caml_new_string("zeroinitializer"),
     _gr_=[0,[12,123,[15,[12,125,0]]],caml_new_string("{%a}")],
     _gs_=
      [0,
       [11,caml_new_string("<{"),[15,[11,caml_new_string("}>"),0]]],
       caml_new_string("<{%a}>")],
     _gt_=[0,[12,91,[15,[12,93,0]]],caml_new_string("[%a]")],
     _gu_=[0,[12,60,[15,[12,62,0]]],caml_new_string("<%a>")],
     _gj_=caml_new_string(", "),
     _f9_=caml_new_string(", "),
     _fO_=[0,caml_new_string("ollvm_printer.ml"),374,19],
     _fM_=caml_new_string("vaarg"),
     _fN_=[0,caml_new_string("ollvm_printer.ml"),363,24],
     _fP_=caml_new_string("ret void"),
     _fQ_=caml_new_string("unreachable"),
     _fR_=
      [0,
       [15,[12,32,[15,[12,32,[15,[11,caml_new_string(", "),[15,0]]]]]]],
       caml_new_string("%a %a %a, %a")],
     _fS_=
      [0,
       [11,
        caml_new_string("icmp "),
        [15,[12,32,[15,[12,32,[15,[11,caml_new_string(", "),[15,0]]]]]]]],
       caml_new_string("icmp %a %a %a, %a")],
     _fT_=
      [0,
       [12,32,[15,[12,32,[15,[11,caml_new_string(", "),[15,0]]]]]],
       caml_new_string(" %a %a, %a")],
     _fU_=
      [0,
       [11,
        caml_new_string("fcmp "),
        [15,[12,32,[15,[12,32,[15,[11,caml_new_string(", "),[15,0]]]]]]]],
       caml_new_string("fcmp %a %a %a, %a")],
     _fV_=
      [0,
       [15,[12,32,[15,[12,32,[15,[11,caml_new_string(" to "),[15,0]]]]]]],
       caml_new_string("%a %a %a to %a")],
     _fW_=
      [0,
       [11,
        caml_new_string("getelementptr "),
        [15,[11,caml_new_string(", "),[15,0]]]],
       caml_new_string("getelementptr %a, %a")],
     _fX_=
      [0,
       [11,
        caml_new_string("extractelement "),
        [15,[11,caml_new_string(", "),[15,0]]]],
       caml_new_string("extractelement %a, %a")],
     _fY_=
      [0,
       [11,
        caml_new_string("insertelement "),
        [15,[11,caml_new_string(", "),[15,[11,caml_new_string(", "),[15,0]]]]]],
       caml_new_string("insertelement %a, %a, %a")],
     _fZ_=
      [0,
       [11,
        caml_new_string("shufflevector "),
        [15,[11,caml_new_string(", "),[15,[11,caml_new_string(", "),[15,0]]]]]],
       caml_new_string("shufflevector %a, %a, %a")],
     _f0_=
      [0,
       [11,
        caml_new_string("extractvalue "),
        [15,[11,caml_new_string(", "),[15,0]]]],
       caml_new_string("extractvalue %a, %a")],
     _f1_=
      [0,
       [11,
        caml_new_string("insertvalue "),
        [15,[11,caml_new_string(", "),[15,[11,caml_new_string(", "),[15,0]]]]]],
       caml_new_string("insertvalue %a, %a, %a")],
     _f2_=
      [0,
       [11,caml_new_string("call "),[15,[12,40,[15,[12,41,0]]]]],
       caml_new_string("call %a(%a)")],
     _f3_=
      [0,[11,caml_new_string("alloca "),[15,0]],caml_new_string("alloca %a")],
     _f4_=[0,[11,caml_new_string(", "),[15,0]],caml_new_string(", %a")],
     _f5_=
      [0,
       [11,caml_new_string(", align "),[4,0,0,0,0]],
       caml_new_string(", align %d")],
     _f6_=caml_new_string("load "),
     _f7_=caml_new_string("volatile "),
     _f8_=
      [0,
       [11,caml_new_string(", align "),[4,0,0,0,0]],
       caml_new_string(", align %d")],
     _f__=caml_new_string("], ["),
     _f$_=
      [0,
       [11,
        caml_new_string("phi "),
        [15,[11,caml_new_string(" ["),[15,[12,93,0]]]]],
       caml_new_string("phi %a [%a]")],
     _ga_=
      [0,
       [11,
        caml_new_string("select "),
        [15,[11,caml_new_string(", "),[15,[11,caml_new_string(", "),[15,0]]]]]],
       caml_new_string("select %a, %a, %a")],
     _gb_=caml_new_string("store "),
     _gc_=caml_new_string("volatile "),
     _gd_=[0,[15,[11,caml_new_string(", "),[15,0]]],caml_new_string("%a, %a")],
     _ge_=
      [0,
       [11,caml_new_string(", align "),[4,0,0,0,0]],
       caml_new_string(", align %d")],
     _gf_=
      [0,
       [11,
        caml_new_string("invoke "),
        [15,
         [12,
          40,
          [15,
           [11,
            caml_new_string(") to "),
            [15,[11,caml_new_string(" unwind "),[15,0]]]]]]]],
       caml_new_string("invoke %a(%a) to %a unwind %a")],
     _gg_=[0,[11,caml_new_string("ret "),[15,0]],caml_new_string("ret %a")],
     _gh_=
      [0,
       [11,
        caml_new_string("br "),
        [15,[11,caml_new_string(", "),[15,[11,caml_new_string(", "),[15,0]]]]]],
       caml_new_string("br %a, %a, %a")],
     _gi_=
      [0,
       [11,caml_new_string("br "),[15,[12,32,[15,0]]]],
       caml_new_string("br %a %a")],
     _gk_=
      [0,
       [11,
        caml_new_string("switch "),
        [15,
         [11,
          caml_new_string(", "),
          [15,[11,caml_new_string(" ["),[15,[12,93,0]]]]]]],
       caml_new_string("switch %a, %a [%a]")],
     _gl_=
      [0,
       [11,
        caml_new_string("indirectbr "),
        [15,[11,caml_new_string(", ["),[15,[12,93,0]]]]],
       caml_new_string("indirectbr %a, [%a]")],
     _gm_=
      [0,[11,caml_new_string("resume "),[15,0]],caml_new_string("resume %a")],
     _gn_=
      [0,[15,[11,caml_new_string(" = "),[15,0]]],caml_new_string("%a = %a")],
     _fA_=[0,[11,caml_new_string("trunc"),0],caml_new_string("trunc")],
     _fB_=[0,[11,caml_new_string("zext"),0],caml_new_string("zext")],
     _fC_=[0,[11,caml_new_string("sext"),0],caml_new_string("sext")],
     _fD_=[0,[11,caml_new_string("fptrunc"),0],caml_new_string("fptrunc")],
     _fE_=[0,[11,caml_new_string("fpext"),0],caml_new_string("fpext")],
     _fF_=[0,[11,caml_new_string("uitofp"),0],caml_new_string("uitofp")],
     _fG_=[0,[11,caml_new_string("sitofp"),0],caml_new_string("sitofp")],
     _fH_=[0,[11,caml_new_string("fptoui"),0],caml_new_string("fptoui")],
     _fI_=[0,[11,caml_new_string("fptosi"),0],caml_new_string("fptosi")],
     _fJ_=[0,[11,caml_new_string("inttoptr"),0],caml_new_string("inttoptr")],
     _fK_=[0,[11,caml_new_string("ptrtoint"),0],caml_new_string("ptrtoint")],
     _fL_=[0,[11,caml_new_string("bitcast"),0],caml_new_string("bitcast")],
     _fv_=caml_new_string("nnan"),
     _fw_=caml_new_string("ninf"),
     _fx_=caml_new_string("nsz"),
     _fy_=caml_new_string("arcp"),
     _fz_=caml_new_string("fast"),
     _fq_=[0,[11,caml_new_string("fadd"),0],caml_new_string("fadd")],
     _fr_=[0,[11,caml_new_string("fsub"),0],caml_new_string("fsub")],
     _fs_=[0,[11,caml_new_string("fmul"),0],caml_new_string("fmul")],
     _ft_=[0,[11,caml_new_string("fdiv"),0],caml_new_string("fdiv")],
     _fu_=[0,[11,caml_new_string("frem"),0],caml_new_string("frem")],
     _fd_=[0,[11,caml_new_string("urem"),0],caml_new_string("urem")],
     _fe_=[0,[11,caml_new_string("srem"),0],caml_new_string("srem")],
     _ff_=[0,[11,caml_new_string("and"),0],caml_new_string("and")],
     _fg_=[0,[11,caml_new_string("or"),0],caml_new_string("or")],
     _fh_=[0,[11,caml_new_string("xor"),0],caml_new_string("xor")],
     _fi_=[0,[11,caml_new_string("add"),0],caml_new_string("add")],
     _fj_=[0,[11,caml_new_string("sub"),0],caml_new_string("sub")],
     _fk_=[0,[11,caml_new_string("mul"),0],caml_new_string("mul")],
     _fl_=[0,[11,caml_new_string("shl"),0],caml_new_string("shl")],
     _fm_=[0,[11,caml_new_string("udiv"),0],caml_new_string("udiv")],
     _fn_=[0,[11,caml_new_string("sdiv"),0],caml_new_string("sdiv")],
     _fo_=[0,[11,caml_new_string("lshr"),0],caml_new_string("lshr")],
     _fp_=[0,[11,caml_new_string("ashr"),0],caml_new_string("ashr")],
     _fc_=[0,[11,caml_new_string(" exact"),0],caml_new_string(" exact")],
     _fb_=[0,[11,caml_new_string(" nsw"),0],caml_new_string(" nsw")],
     _fa_=[0,[11,caml_new_string(" nuw"),0],caml_new_string(" nuw")],
     _eW_=[0,[11,caml_new_string("false"),0],caml_new_string("false")],
     _eX_=[0,[11,caml_new_string("oeq"),0],caml_new_string("oeq")],
     _eY_=[0,[11,caml_new_string("ogt"),0],caml_new_string("ogt")],
     _eZ_=[0,[11,caml_new_string("oge"),0],caml_new_string("oge")],
     _e0_=[0,[11,caml_new_string("olt"),0],caml_new_string("olt")],
     _e1_=[0,[11,caml_new_string("ole"),0],caml_new_string("ole")],
     _e2_=[0,[11,caml_new_string("one"),0],caml_new_string("one")],
     _e3_=[0,[11,caml_new_string("ord"),0],caml_new_string("ord")],
     _e4_=[0,[11,caml_new_string("uno"),0],caml_new_string("uno")],
     _e5_=[0,[11,caml_new_string("ueq"),0],caml_new_string("ueq")],
     _e6_=[0,[11,caml_new_string("ugt"),0],caml_new_string("ugt")],
     _e7_=[0,[11,caml_new_string("uge"),0],caml_new_string("uge")],
     _e8_=[0,[11,caml_new_string("ult"),0],caml_new_string("ult")],
     _e9_=[0,[11,caml_new_string("ule"),0],caml_new_string("ule")],
     _e__=[0,[11,caml_new_string("une"),0],caml_new_string("une")],
     _e$_=[0,[11,caml_new_string("true"),0],caml_new_string("true")],
     _eM_=[0,[11,caml_new_string("eq"),0],caml_new_string("eq")],
     _eN_=[0,[11,caml_new_string("neq"),0],caml_new_string("neq")],
     _eO_=[0,[11,caml_new_string("ugt"),0],caml_new_string("ugt")],
     _eP_=[0,[11,caml_new_string("uge"),0],caml_new_string("uge")],
     _eQ_=[0,[11,caml_new_string("ult"),0],caml_new_string("ult")],
     _eR_=[0,[11,caml_new_string("ule"),0],caml_new_string("ule")],
     _eS_=[0,[11,caml_new_string("sgt"),0],caml_new_string("sgt")],
     _eT_=[0,[11,caml_new_string("sge"),0],caml_new_string("sge")],
     _eU_=[0,[11,caml_new_string("slt"),0],caml_new_string("slt")],
     _eV_=[0,[11,caml_new_string("cmp"),0],caml_new_string("cmp")],
     _eu_=[0,[11,caml_new_string("void"),0],caml_new_string("void")],
     _ev_=[0,[11,caml_new_string("half"),0],caml_new_string("half")],
     _ew_=[0,[11,caml_new_string("float"),0],caml_new_string("float")],
     _ex_=[0,[11,caml_new_string("double"),0],caml_new_string("double")],
     _ey_=[0,caml_new_string("ollvm_printer.ml"),150,29],
     _ez_=[0,caml_new_string("ollvm_printer.ml"),151,29],
     _eA_=[0,caml_new_string("ollvm_printer.ml"),152,29],
     _eB_=[0,[11,caml_new_string("label"),0],caml_new_string("label")],
     _eC_=[0,[11,caml_new_string("metadata"),0],caml_new_string("metadata")],
     _eD_=[0,caml_new_string("ollvm_printer.ml"),154,29],
     _eE_=[0,caml_new_string("ollvm_printer.ml"),161,29],
     _eF_=[0,[12,105,[4,0,0,0,0]],caml_new_string("i%d")],
     _eG_=[0,[15,[12,42,0]],caml_new_string("%a*")],
     _eH_=
      [0,
       [12,91,[4,0,0,0,[11,caml_new_string(" x "),[15,[12,93,0]]]]],
       caml_new_string("[%d x %a]")],
     _eI_=[0,caml_new_string("ollvm_printer.ml"),156,29],
     _eJ_=[0,[12,123,[15,[12,125,0]]],caml_new_string("{%a}")],
     _eK_=
      [0,
       [11,caml_new_string("<{"),[15,[11,caml_new_string("}>"),0]]],
       caml_new_string("<{%a}>")],
     _eL_=
      [0,
       [12,60,[4,0,0,0,[11,caml_new_string(" x "),[15,[12,62,0]]]]],
       caml_new_string("<%d x %a>")],
     _d0_=
      [0,
       [11,caml_new_string("alwaysinline"),0],
       caml_new_string("alwaysinline")],
     _d1_=[0,[11,caml_new_string("builtin"),0],caml_new_string("builtin")],
     _d2_=[0,[11,caml_new_string("cold"),0],caml_new_string("cold")],
     _d3_=
      [0,[11,caml_new_string("inlinehint"),0],caml_new_string("inlinehint")],
     _d4_=[0,[11,caml_new_string("jumptable"),0],caml_new_string("jumptable")],
     _d5_=[0,[11,caml_new_string("minsize"),0],caml_new_string("minsize")],
     _d6_=[0,[11,caml_new_string("naked"),0],caml_new_string("naked")],
     _d7_=[0,[11,caml_new_string("nobuiltin"),0],caml_new_string("nobuiltin")],
     _d8_=
      [0,[11,caml_new_string("noduplicate"),0],caml_new_string("noduplicate")],
     _d9_=
      [0,
       [11,caml_new_string("noimplicitfloat"),0],
       caml_new_string("noimplicitfloat")],
     _d__=[0,[11,caml_new_string("noinline"),0],caml_new_string("noinline")],
     _d$_=
      [0,[11,caml_new_string("nonlazybind"),0],caml_new_string("nonlazybind")],
     _ea_=[0,[11,caml_new_string("noredzone"),0],caml_new_string("noredzone")],
     _eb_=[0,[11,caml_new_string("noreturn"),0],caml_new_string("noreturn")],
     _ec_=[0,[11,caml_new_string("nounwind"),0],caml_new_string("nounwind")],
     _ed_=[0,[11,caml_new_string("optnone"),0],caml_new_string("optnone")],
     _ee_=[0,[11,caml_new_string("optsize"),0],caml_new_string("optsize")],
     _ef_=[0,[11,caml_new_string("readone"),0],caml_new_string("readone")],
     _eg_=[0,[11,caml_new_string("readonly"),0],caml_new_string("readonly")],
     _eh_=
      [0,
       [11,caml_new_string("returns_twice"),0],
       caml_new_string("returns_twice")],
     _ei_=
      [0,
       [11,caml_new_string("sanitize_address"),0],
       caml_new_string("sanitize_address")],
     _ej_=
      [0,
       [11,caml_new_string("sanitize_memory"),0],
       caml_new_string("sanitize_memory")],
     _ek_=
      [0,
       [11,caml_new_string("sanitize_thread"),0],
       caml_new_string("sanitize_thread")],
     _el_=[0,[11,caml_new_string("ssp"),0],caml_new_string("ssp")],
     _em_=[0,[11,caml_new_string("sspreq"),0],caml_new_string("sspreq")],
     _en_=[0,[11,caml_new_string("sspstrong"),0],caml_new_string("sspstrong")],
     _eo_=[0,[11,caml_new_string("uwtable"),0],caml_new_string("uwtable")],
     _ep_=
      [0,
       [11,caml_new_string("alignstack("),[4,0,0,0,[12,41,0]]],
       caml_new_string("alignstack(%d)")],
     _eq_=[0,[12,34,[2,0,[12,34,0]]],caml_new_string('"%s"')],
     _er_=
      [0,
       [12,34,[2,0,[11,caml_new_string('"="'),[2,0,[12,34,0]]]]],
       caml_new_string('"%s"="%s"')],
     _es_=[0,[12,35,[4,0,0,0,0]],caml_new_string("#%d")],
     _dN_=[0,[11,caml_new_string("zeroext"),0],caml_new_string("zeroext")],
     _dO_=[0,[11,caml_new_string("signext"),0],caml_new_string("signext")],
     _dP_=[0,[11,caml_new_string("inreg"),0],caml_new_string("inreg")],
     _dQ_=[0,[11,caml_new_string("byval"),0],caml_new_string("byval")],
     _dR_=[0,[11,caml_new_string("inalloca"),0],caml_new_string("inalloca")],
     _dS_=[0,[11,caml_new_string("sret"),0],caml_new_string("sret")],
     _dT_=[0,[11,caml_new_string("noalias"),0],caml_new_string("noalias")],
     _dU_=[0,[11,caml_new_string("nocapture"),0],caml_new_string("nocapture")],
     _dV_=[0,[11,caml_new_string("nest"),0],caml_new_string("nest")],
     _dW_=[0,[11,caml_new_string("returned"),0],caml_new_string("returned")],
     _dX_=[0,[11,caml_new_string("nonnull"),0],caml_new_string("nonnull")],
     _dY_=
      [0,
       [11,caml_new_string("align "),[4,0,0,0,0]],
       caml_new_string("align %d")],
     _dZ_=
      [0,
       [11,caml_new_string("dereferenceable("),[4,0,0,0,[12,41,0]]],
       caml_new_string("dereferenceable(%d)")],
     _dJ_=[0,[11,caml_new_string("ccc"),0],caml_new_string("ccc")],
     _dK_=[0,[11,caml_new_string("fastcc"),0],caml_new_string("fastcc")],
     _dL_=[0,[11,caml_new_string("coldcc"),0],caml_new_string("coldcc")],
     _dM_=[0,[11,caml_new_string("cc "),[4,0,0,0,0]],caml_new_string("cc %d")],
     _dG_=[0,[11,caml_new_string("default"),0],caml_new_string("default")],
     _dH_=[0,[11,caml_new_string("hidden"),0],caml_new_string("hidden")],
     _dI_=[0,[11,caml_new_string("protected"),0],caml_new_string("protected")],
     _dF_=[0,[11,caml_new_string("dllexport"),0],caml_new_string("dllexport")],
     _dE_=[0,[11,caml_new_string("dllimport"),0],caml_new_string("dllimport")],
     _dt_=[0,[11,caml_new_string("private"),0],caml_new_string("private")],
     _du_=[0,[11,caml_new_string("internal"),0],caml_new_string("internal")],
     _dv_=
      [0,
       [11,caml_new_string("available_externally"),0],
       caml_new_string("available_externally")],
     _dw_=[0,[11,caml_new_string("linkonce"),0],caml_new_string("linkonce")],
     _dx_=[0,[11,caml_new_string("weak"),0],caml_new_string("weak")],
     _dy_=[0,[11,caml_new_string("common"),0],caml_new_string("common")],
     _dz_=[0,[11,caml_new_string("appending"),0],caml_new_string("appending")],
     _dA_=
      [0,[11,caml_new_string("extern_weak"),0],caml_new_string("extern_weak")],
     _dB_=
      [0,
       [11,caml_new_string("linkonce_ord"),0],
       caml_new_string("linkonce_ord")],
     _dC_=[0,[11,caml_new_string("weak_odr"),0],caml_new_string("weak_odr")],
     _dD_=[0,[11,caml_new_string("external"),0],caml_new_string("external")],
     _c4_=caml_new_string(", "),
     _he_=[0,caml_new_string("ollvm_ez.ml"),314,8],
     _hb_=caml_new_string("-"),
     _hc_=caml_new_string("-"),
     _ha_=caml_new_string(""),
     _g9_=[0,caml_new_string("ollvm_ez.ml"),192,13],
     _g5_=[0,caml_new_string("ollvm_ez.ml"),45,12],
     _g__=[0,0,0],
     _hk_=caml_new_string("getMinMaxPositions: No positions passed"),
     _hj_=
      [0,
       [11,
        caml_new_string("line "),
        [4,
         3,
         0,
         0,
         [11,caml_new_string(", columns "),[4,3,0,0,[12,45,[4,3,0,0,0]]]]]],
       caml_new_string("line %i, columns %i-%i")],
     _hh_=caml_new_string("loc"),
     _hi_=[1,caml_new_string("")],
     _hq_=caml_new_string("\n"),
     _hr_=caml_new_string("-"),
     _hp_=caml_new_string("Could not open the file "),
     _ho_=caml_new_string("\n"),
     _hm_=caml_new_string("^"),
     _hn_=
      [0,[2,0,[12,10,[2,0,[2,0,[12,10,0]]]]],caml_new_string("%s\n%s%s\n")],
     _hl_=caml_new_string("Error.Errors"),
     _hs_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Args.File"),
          [17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("(@[<2>Args.File@ ")],
     _ht_=[0,[3,0,0],caml_new_string("%S")],
     _hu_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _hv_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Args.Code ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Args.Code (@,")],
     _hw_=[0,[3,0,0],caml_new_string("%S")],
     _hx_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _hy_=[0,[3,0,0],caml_new_string("%S")],
     _hz_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _iM_=[0,[15,0],caml_new_string("%a")],
     _iC_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _iD_=[0,[3,0,0],caml_new_string("%S")],
     _iB_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _iE_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _hE_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _hD_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _hF_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _hA_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [11,caml_new_string("{ "),0]],
       caml_new_string("@[<2>{ ")],
     _hB_=caml_new_string("Args.files"),
     _hC_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [2,0,[11,caml_new_string(" ="),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("@[%s =@ ")],
     _hG_=[0,[17,0,0],caml_new_string("@]")],
     _hH_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _hI_=caml_new_string("dparse"),
     _hJ_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [2,0,[11,caml_new_string(" ="),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("@[%s =@ ")],
     _hK_=[0,[9,0],caml_new_string("%B")],
     _hL_=[0,[17,0,0],caml_new_string("@]")],
     _hM_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _hN_=caml_new_string("eval"),
     _hO_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [2,0,[11,caml_new_string(" ="),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("@[%s =@ ")],
     _hP_=[0,[9,0],caml_new_string("%B")],
     _hQ_=[0,[17,0,0],caml_new_string("@]")],
     _hR_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _hS_=caml_new_string("check"),
     _hT_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [2,0,[11,caml_new_string(" ="),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("@[%s =@ ")],
     _hU_=[0,[9,0],caml_new_string("%B")],
     _hV_=[0,[17,0,0],caml_new_string("@]")],
     _hW_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _hX_=caml_new_string("ccode"),
     _hY_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [2,0,[11,caml_new_string(" ="),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("@[%s =@ ")],
     _hZ_=[0,[9,0],caml_new_string("%B")],
     _h0_=[0,[17,0,0],caml_new_string("@]")],
     _h1_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _h2_=caml_new_string("llvm"),
     _h3_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [2,0,[11,caml_new_string(" ="),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("@[%s =@ ")],
     _h4_=[0,[9,0],caml_new_string("%B")],
     _h5_=[0,[17,0,0],caml_new_string("@]")],
     _h6_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _h7_=caml_new_string("jscode"),
     _h8_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [2,0,[11,caml_new_string(" ="),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("@[%s =@ ")],
     _h9_=[0,[9,0],caml_new_string("%B")],
     _h__=[0,[17,0,0],caml_new_string("@]")],
     _h$_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _ia_=caml_new_string("luacode"),
     _ib_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [2,0,[11,caml_new_string(" ="),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("@[%s =@ ")],
     _ic_=[0,[9,0],caml_new_string("%B")],
     _id_=[0,[17,0,0],caml_new_string("@]")],
     _ie_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _if_=caml_new_string("output"),
     _ig_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [2,0,[11,caml_new_string(" ="),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("@[%s =@ ")],
     _ih_=[0,[3,0,0],caml_new_string("%S")],
     _ii_=[0,[17,0,0],caml_new_string("@]")],
     _ij_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _ik_=caml_new_string("real"),
     _il_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [2,0,[11,caml_new_string(" ="),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("@[%s =@ ")],
     _im_=[0,[3,0,0],caml_new_string("%S")],
     _in_=[0,[17,0,0],caml_new_string("@]")],
     _io_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _ip_=caml_new_string("template"),
     _iq_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [2,0,[11,caml_new_string(" ="),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("@[%s =@ ")],
     _ir_=[0,[3,0,0],caml_new_string("%S")],
     _is_=[0,[17,0,0],caml_new_string("@]")],
     _it_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _iu_=caml_new_string("show_version"),
     _iv_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [2,0,[11,caml_new_string(" ="),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("@[%s =@ ")],
     _iw_=[0,[9,0],caml_new_string("%B")],
     _ix_=[0,[17,0,0],caml_new_string("@]")],
     _iy_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _iz_=caml_new_string("includes"),
     _iA_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [2,0,[11,caml_new_string(" ="),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("@[%s =@ ")],
     _iF_=[0,[17,0,0],caml_new_string("@]")],
     _iG_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _iH_=caml_new_string("deps"),
     _iI_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [2,0,[11,caml_new_string(" ="),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("@[%s =@ ")],
     _iJ_=[0,[9,0],caml_new_string("%B")],
     _iK_=[0,[17,0,0],caml_new_string("@]")],
     _iL_=
      [0,
       [17,[0,caml_new_string("@ "),1,0],[12,125,[17,0,0]]],
       caml_new_string("@ }@]")],
     _i2_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _i3_=[0,[3,0,0],caml_new_string("%S")],
     _i1_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _i4_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _i5_=caml_new_string("invalid id"),
     _i7_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _i8_=[0,[3,0,0],caml_new_string("%S")],
     _i6_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _i9_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _j2_=caml_new_string(""),
     _j3_=caml_new_string(""),
     _j5_=caml_new_string("There should be no other types here"),
     _j6_=caml_new_string("_"),
     _j7_=[0,caml_new_string("$"),0],
     _j8_=caml_new_string("$"),
     _j9_=caml_new_string("_"),
     _j__=caml_new_string("_"),
     _j$_=caml_new_string("__"),
     _kJ_=[0,caml_new_string("'a"),0,0],
     _kK_=[0,caml_new_string("'size"),0,0],
     _kL_=[0,caml_new_string("array"),0],
     _kG_=[0,caml_new_string("'a"),0,0],
     _kH_=[0,caml_new_string("'size"),0,0],
     _kI_=[0,caml_new_string("array"),0],
     _kD_=[0,caml_new_string("'a"),0,0],
     _kE_=[0,caml_new_string("'size"),0,0],
     _kF_=[0,caml_new_string("array"),0],
     _kA_=[0,caml_new_string("'a"),0,0],
     _kB_=[0,caml_new_string("'size"),0,0],
     _kC_=[0,caml_new_string("array"),0],
     _kx_=[0,caml_new_string("'a"),0,0],
     _ky_=[0,caml_new_string("'size"),0,0],
     _kz_=[0,caml_new_string("array"),0],
     _kw_=[0,caml_new_string("'a"),0,0],
     _kv_=[0,caml_new_string("'a"),0,0],
     _ku_=[0,caml_new_string("'a"),0,0],
     _kl_=caml_new_string("real"),
     _kf_=caml_new_string("bool"),
     _kg_=caml_new_string("int"),
     _kh_=caml_new_string("real"),
     _ki_=caml_new_string("string"),
     _kj_=caml_new_string("unit"),
     _kk_=caml_new_string("void"),
     _ke_=caml_new_string("tuple"),
     _kd_=caml_new_string("array"),
     _kc_=caml_new_string("array"),
     _kb_=caml_new_string("arraySize: invalid input"),
     _ka_=caml_new_string("_"),
     _j1_=caml_new_string("Typ.base: this type does not have a base type"),
     _jZ_=caml_new_string("'"),
     _jY_=[0,[15,0],caml_new_string("%a")],
     _jW_=caml_new_string("ref ("),
     _jX_=caml_new_string(")"),
     _jV_=[0,[15,0],caml_new_string("%a")],
     _jR_=caml_new_string("(Some "),
     _jS_=caml_new_string(")"),
     _jT_=caml_new_string("None"),
     _jL_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _jK_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _jM_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _jD_=caml_new_string("(Some "),
     _jE_=caml_new_string(")"),
     _jF_=caml_new_string("None"),
     _jw_=caml_new_string("(Some "),
     _jx_=caml_new_string(")"),
     _jy_=caml_new_string("None"),
     _jt_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _js_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _ju_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _jm_=caml_new_string("(Some "),
     _jn_=caml_new_string(")"),
     _jo_=caml_new_string("None"),
     _jg_=caml_new_string("(Some "),
     _jh_=caml_new_string(")"),
     _ji_=caml_new_string("None"),
     _jb_=caml_new_string("(Some "),
     _jc_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _jd_=caml_new_string(")"),
     _je_=caml_new_string("None"),
     _i__=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Typ.TUnbound ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Typ.TUnbound (@,")],
     _i$_=[0,[3,0,0],caml_new_string("%S")],
     _ja_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _jf_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _jj_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _jk_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Typ.TId ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Typ.TId (@,")],
     _jl_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _jp_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _jq_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Typ.TComposed ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Typ.TComposed (@,")],
     _jr_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _jv_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _jz_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _jA_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Typ.TArrow ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Typ.TArrow (@,")],
     _jB_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _jC_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _jG_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _jH_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Typ.TLink"),
          [17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("(@[<2>Typ.TLink@ ")],
     _jI_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _jJ_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Typ.TExpAlt"),
          [17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("(@[<2>Typ.TExpAlt@ ")],
     _jN_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _jO_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Typ.TInt ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Typ.TInt (@,")],
     _jP_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _jQ_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _jU_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _kn_=[1,[0,caml_new_string(""),0],0],
     _ko_=[1,[0,caml_new_string("type"),0],0],
     _kp_=[1,[0,caml_new_string("unit"),0],0],
     _kq_=[1,[0,caml_new_string("bool"),0],0],
     _kr_=[1,[0,caml_new_string("int"),0],0],
     _ks_=[1,[0,caml_new_string("real"),0],0],
     _kt_=[1,[0,caml_new_string("string"),0],0],
     _kP_=[0,[15,0],caml_new_string("%a")],
     _kM_=
      [0,[12,40,[18,[1,[0,0,caml_new_string("")]],0]],caml_new_string("(@[")],
     _kN_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _kO_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _kR_=caml_new_string("Prog.InputArg"),
     _kS_=caml_new_string("Prog.OutputArg"),
     _kT_=caml_new_string("Prog.ContextArg"),
     _nY_=[0,[15,0],caml_new_string("%a")],
     _nW_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _nV_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _nX_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _nU_=[0,[15,0],caml_new_string("%a")],
     _nQ_=
      [0,[12,40,[18,[1,[0,0,caml_new_string("")]],0]],caml_new_string("(@[")],
     _nR_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _nS_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _nT_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _nP_=[0,[15,0],caml_new_string("%a")],
     _nH_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _nG_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _nI_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _nA_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _nz_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _nB_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _nv_=caml_new_string("(Some "),
     _nw_=caml_new_string(")"),
     _nx_=caml_new_string("None"),
     _nk_=caml_new_string("(Some "),
     _nl_=[0,[3,0,0],caml_new_string("%S")],
     _nm_=caml_new_string(")"),
     _nn_=caml_new_string("None"),
     _ng_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _nf_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _nh_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _m__=caml_new_string("(Some "),
     _m$_=caml_new_string(")"),
     _na_=caml_new_string("None"),
     _m6_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _m5_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _m7_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _mY_=caml_new_string("(Some "),
     _mZ_=caml_new_string(")"),
     _m0_=caml_new_string("None"),
     _mJ_=caml_new_string("(Some "),
     _mK_=caml_new_string(")"),
     _mL_=caml_new_string("None"),
     _mC_=caml_new_string("(Some "),
     _mD_=caml_new_string(")"),
     _mE_=caml_new_string("None"),
     _mz_=caml_new_string("Prog.StmtEmpty"),
     _mA_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.StmtVal ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.StmtVal (@,")],
     _mB_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mF_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mG_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _mH_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.StmtMem ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.StmtMem (@,")],
     _mI_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mM_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mN_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _mO_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.StmtWhile ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.StmtWhile (@,")],
     _mP_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mQ_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mR_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _mS_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.StmtReturn ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.StmtReturn (@,")],
     _mT_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mU_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _mV_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.StmtIf ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.StmtIf (@,")],
     _mW_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mX_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _m1_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _m2_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _m3_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.StmtFun ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.StmtFun (@,")],
     _m4_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _m8_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _m9_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _nb_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _nc_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _nd_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.StmtExternal ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.StmtExternal (@,")],
     _ne_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _ni_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _nj_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _no_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _np_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _nq_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.StmtBind ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.StmtBind (@,")],
     _nr_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _ns_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _nt_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _nu_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.StmtBlock ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.StmtBlock (@,")],
     _ny_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _nC_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _nD_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _nE_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.StmtType ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.StmtType (@,")],
     _nF_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _nJ_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _nK_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _nL_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.StmtAliasType ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.StmtAliasType (@,")],
     _nM_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _nN_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _nO_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _my_=[0,[15,0],caml_new_string("%a")],
     _ms_=caml_new_string("(Some "),
     _mt_=caml_new_string(")"),
     _mu_=caml_new_string("None"),
     _mn_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _mm_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _mo_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _l$_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _l__=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _ma_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _l5_=caml_new_string("(Some "),
     _l6_=caml_new_string(")"),
     _l7_=caml_new_string("None"),
     _l0_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _lZ_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _l1_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _lN_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _lM_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [11,caml_new_string("[|"),0]],
       caml_new_string("@[<2>[|")],
     _lO_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("|]"),[17,0,0]]],
       caml_new_string("@,|]@]")],
     _lp_=caml_new_string("Prog.PEmpty"),
     _lq_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.PUnit"),
          [17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("(@[<2>Prog.PUnit@ ")],
     _lr_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _ls_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.PBool ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.PBool (@,")],
     _lt_=[0,[9,0],caml_new_string("%B")],
     _lu_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _lv_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _lw_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.PInt ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.PInt (@,")],
     _lx_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _ly_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _lz_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _lA_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.PReal ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.PReal (@,")],
     _lB_=[0,[8,15,0,0,0],caml_new_string("%F")],
     _lC_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _lD_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _lE_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.PString ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.PString (@,")],
     _lF_=[0,[3,0,0],caml_new_string("%S")],
     _lG_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _lH_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _lI_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.PId ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.PId (@,")],
     _lJ_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _lK_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _lL_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.PArray ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.PArray (@,")],
     _lP_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _lQ_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _lR_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.PUnOp ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.PUnOp (@,")],
     _lS_=[0,[3,0,0],caml_new_string("%S")],
     _lT_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _lU_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _lV_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _lW_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.POp ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.POp (@,")],
     _lX_=[0,[3,0,0],caml_new_string("%S")],
     _lY_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _l2_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _l3_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _l4_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.PCall ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.PCall (@,")],
     _l8_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _l9_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mb_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mc_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _md_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.PIf ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.PIf (@,")],
     _me_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mf_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mg_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mh_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _mi_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.PGroup ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.PGroup (@,")],
     _mj_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mk_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _ml_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.PTuple ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.PTuple (@,")],
     _mp_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mq_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _mr_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.PSeq ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.PSeq (@,")],
     _mv_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mw_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _mx_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _lo_=[0,[15,0],caml_new_string("%a")],
     _ld_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _lc_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _le_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _k8_=caml_new_string("(Some "),
     _k9_=caml_new_string(")"),
     _k__=caml_new_string("None"),
     _k4_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.LWild"),
          [17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("(@[<2>Prog.LWild@ ")],
     _k5_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _k6_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.LId ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.LId (@,")],
     _k7_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _k$_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _la_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _lb_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.LTuple ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.LTuple (@,")],
     _lf_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _lg_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _lh_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.LTyped ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.LTyped (@,")],
     _li_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _lj_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _lk_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _ll_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.LGroup ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.LGroup (@,")],
     _lm_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _ln_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _k3_=[0,[15,0],caml_new_string("%a")],
     _kU_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.SimpleId ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.SimpleId (@,")],
     _kV_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _kW_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _kX_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _kY_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Prog.TypedId ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Prog.TypedId (@,")],
     _kZ_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _k0_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _k1_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _k2_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _kQ_=caml_new_string("attr"),
     _n1_=caml_new_string("Cannot outdent more"),
     _n0_=caml_new_string("\n"),
     _nZ_=caml_new_string(""),
     _n5_=caml_new_string("("),
     _n6_=caml_new_string(")"),
     _n7_=caml_new_string(" -> "),
     _n8_=caml_new_string("("),
     _n9_=caml_new_string(" | "),
     _n__=caml_new_string(")"),
     _n$_=caml_new_string(","),
     _oa_=caml_new_string("(_:"),
     _ob_=caml_new_string(")"),
     _oc_=caml_new_string("_"),
     _od_=caml_new_string("("),
     _oe_=caml_new_string(":"),
     _of_=caml_new_string(")"),
     _og_=caml_new_string("("),
     _oh_=caml_new_string(")"),
     _oi_=caml_new_string("("),
     _oj_=caml_new_string(":"),
     _ok_=caml_new_string(")"),
     _ol_=caml_new_string("("),
     _om_=caml_new_string(")"),
     _on_=caml_new_string(","),
     _oo_=caml_new_string("_"),
     _op_=caml_new_string(":"),
     _oE_=caml_new_string(":"),
     _oq_=caml_new_string("Empty"),
     _or_=caml_new_string("()"),
     _ot_=caml_new_string("true"),
     _os_=caml_new_string("false"),
     _ou_=caml_new_string('"'),
     _ov_=caml_new_string('"'),
     _ow_=caml_new_string("["),
     _ox_=caml_new_string("]"),
     _oy_=caml_new_string("("),
     _oz_=caml_new_string(")"),
     _oA_=caml_new_string("("),
     _oB_=caml_new_string(" "),
     _oC_=caml_new_string(" "),
     _oD_=caml_new_string(")"),
     _oF_=caml_new_string("("),
     _oG_=caml_new_string(")"),
     _oH_=caml_new_string("(if "),
     _oI_=caml_new_string(" then "),
     _oJ_=caml_new_string(" else "),
     _oK_=caml_new_string(")"),
     _oL_=caml_new_string("("),
     _oM_=caml_new_string(")"),
     _oN_=caml_new_string("("),
     _oO_=caml_new_string(")"),
     _o__=caml_new_string(": "),
     _o$_=caml_new_string(" "),
     _oV_=caml_new_string(" = "),
     _oP_=caml_new_string("val "),
     _oQ_=caml_new_string(" = "),
     _oR_=caml_new_string(";"),
     _oS_=caml_new_string("val "),
     _oT_=caml_new_string(";"),
     _oU_=caml_new_string("mem "),
     _oW_=caml_new_string(";"),
     _oX_=caml_new_string("while("),
     _oY_=caml_new_string(")"),
     _oZ_=caml_new_string("return "),
     _o0_=caml_new_string(";"),
     _o1_=caml_new_string("if("),
     _o2_=caml_new_string(")"),
     _o3_=caml_new_string("else"),
     _o4_=caml_new_string("if("),
     _o5_=caml_new_string(")"),
     _o6_=caml_new_string("and "),
     _pa_=caml_new_string("fun "),
     _o7_=caml_new_string("("),
     _o8_=caml_new_string(","),
     _o9_=caml_new_string(") "),
     _pb_=caml_new_string("external "),
     _pc_=caml_new_string("("),
     _pd_=caml_new_string(","),
     _pe_=caml_new_string(") : "),
     _pf_=caml_new_string(' "'),
     _pg_=caml_new_string('"'),
     _ph_=caml_new_string(";"),
     _pi_=caml_new_string(" = "),
     _pj_=caml_new_string(";"),
     _pk_=caml_new_string("type "),
     _pl_=caml_new_string(" {"),
     _pm_=caml_new_string("}"),
     _pn_=caml_new_string("type "),
     _po_=caml_new_string(" : "),
     _pp_=caml_new_string(";"),
     _pq_=caml_new_string(","),
     _pr_=caml_new_string("{"),
     _ps_=caml_new_string("}"),
     _pt_=caml_new_string("{|"),
     _pu_=caml_new_string("|}"),
     _pv_=caml_new_string("val "),
     _pw_=caml_new_string(" : "),
     _px_=caml_new_string(";"),
     _n3_=caml_new_string("/* "),
     _n4_=caml_new_string(" */"),
     _n2_=caml_new_string("."),
     _pJ_=caml_new_string(", "),
     _pK_=
      caml_new_string
       ("The following arguments are unknown for the current tag: "),
     _pI_=
      [0,
       [11,
        caml_new_string
         ("The tag was expected to have a parameter with name '"),
        [2,0,[11,caml_new_string("' and type '"),[2,0,[12,39,0]]]]],
       caml_new_string
        ("The tag was expected to have a parameter with name '%s' and type '%s'")],
     _pH_=
      [0,
       [11,
        caml_new_string("The parameter '"),
        [2,
         0,
         [11,
          caml_new_string("' was expected to be of type '"),
          [2,0,[11,caml_new_string("' but it is '"),[2,0,[12,39,0]]]]]]],
       caml_new_string
        ("The parameter '%s' was expected to be of type '%s' but it is '%s'")],
     _pD_=caml_new_string("integer"),
     _pE_=caml_new_string("real"),
     _pF_=caml_new_string("identifier"),
     _pG_=caml_new_string("string"),
     _py_=caml_new_string("identifier"),
     _pz_=caml_new_string("tag"),
     _pA_=caml_new_string("integer"),
     _pB_=caml_new_string("real"),
     _pC_=caml_new_string("string"),
     _p0_=caml_new_string("Scope.getContext"),
     _p1_=caml_new_string("Scope.getContext"),
     _pZ_=caml_new_string("Scope.getInitFunction"),
     _pX_=[0,caml_new_string("init"),0],
     _pY_=
      [0,
       [11,
        caml_new_string("Redefinition of function '"),
        [2,0,[11,caml_new_string("'. Previously defined at "),[2,0,0]]]],
       caml_new_string
        ("Redefinition of function '%s'. Previously defined at %s")],
     _pW_=
      [0,
       [11,
        caml_new_string("Redefinition of variable '"),
        [2,0,[11,caml_new_string("'. Previously defined at "),[2,0,0]]]],
       caml_new_string
        ("Redefinition of variable '%s'. Previously defined at %s")],
     _pV_=
      [0,
       [11,
        caml_new_string("Redefinition of variable '"),
        [2,0,[11,caml_new_string("'. Previously defined at "),[2,0,0]]]],
       caml_new_string
        ("Redefinition of variable '%s'. Previously defined at %s")],
     _pT_=
      [0,
       [11,caml_new_string("Unknown symbol '"),[2,0,[12,39,0]]],
       caml_new_string("Unknown symbol '%s'")],
     _pU_=
      [0,
       [11,caml_new_string("Unknown symbol '"),[2,0,[12,39,0]]],
       caml_new_string("Unknown symbol '%s'")],
     _pR_=
      [0,
       [11,
        caml_new_string("Unknown "),
        [2,0,[11,caml_new_string(" '"),[2,0,[12,39,0]]]]],
       caml_new_string("Unknown %s '%s'")],
     _pS_=
      [0,
       [11,
        caml_new_string("Unknown "),
        [2,0,[11,caml_new_string(" '"),[2,0,[12,39,0]]]]],
       caml_new_string("Unknown %s '%s'")],
     _pQ_=caml_new_string("Scope.exit: cannot exit the top scope"),
     _pM_=caml_new_string("function"),
     _pN_=caml_new_string("module"),
     _pO_=caml_new_string("operator"),
     _pP_=caml_new_string("type"),
     _pL_=caml_new_string("_ctx_type_"),
     _p2_=[0,caml_new_string("log"),0],
     _p3_=[0,caml_new_string("irandom"),0],
     _p4_=[0,caml_new_string("random"),0],
     _p5_=[0,caml_new_string("eps"),0],
     _p7_=[0,caml_new_string("&&"),0],
     _p9_=[0,caml_new_string("||"),0],
     _p$_=[0,caml_new_string("not"),0],
     _qb_=[0,caml_new_string("<="),0],
     _qd_=[0,caml_new_string(">="),0],
     _qf_=[0,caml_new_string("<>"),0],
     _qh_=[0,caml_new_string("=="),0],
     _qj_=[0,caml_new_string("<"),0],
     _ql_=[0,caml_new_string(">"),0],
     _qn_=[0,caml_new_string("%"),0],
     _qp_=[0,caml_new_string("/"),0],
     _qr_=[0,caml_new_string("*"),0],
     _qt_=[0,caml_new_string("-"),0],
     _qv_=[0,caml_new_string("+"),0],
     _qx_=[0,caml_new_string("|-|"),0],
     _qz_=[0,caml_new_string("real"),0],
     _qB_=[0,caml_new_string("int"),0],
     _qD_=[0,caml_new_string("clip"),0],
     _qF_=[0,caml_new_string("sqrt"),0],
     _qH_=[0,caml_new_string("tan"),0],
     _qJ_=[0,caml_new_string("tanh"),0],
     _qL_=[0,caml_new_string("floor"),0],
     _qN_=[0,caml_new_string("cos"),0],
     _qP_=[0,caml_new_string("sin"),0],
     _qR_=[0,caml_new_string("exp"),0],
     _qT_=[0,caml_new_string("abs"),0],
     _qV_=[0,caml_new_string("makeArray"),0],
     _qX_=[0,caml_new_string("size"),0],
     _qZ_=[0,caml_new_string("get"),0],
     _q1_=[0,caml_new_string("set"),0],
     _q3_=[0,caml_new_string("wrap_array"),0],
     _q4_=[0,caml_new_string("string"),0],
     _q5_=[0,caml_new_string("unit"),0],
     _q6_=[0,caml_new_string("bool"),0],
     _q7_=[0,caml_new_string("real"),0],
     _q8_=[0,caml_new_string("int"),0],
     _rb_=caml_new_string(""),
     _ra_=caml_new_string(""),
     _q$_=caml_new_string(""),
     _q__=caml_new_string(""),
     _rc_=caml_new_string("GetIdentifiers.lhs_exp"),
     _rd_=caml_new_string("GetIdentifiers.exp"),
     _re_=caml_new_string("GetLocation.attr"),
     _rf_=caml_new_string("GetIdentifiers.exp"),
     _rh_=
      [0,
       [11,
        caml_new_string("The type '"),
        [2,0,[11,caml_new_string("' of this variable is unknown"),0]]],
       caml_new_string("The type '%s' of this variable is unknown")],
     _ri_=caml_new_string("array"),
     _rj_=caml_new_string("tuple"),
     _rl_=
      [0,
       [11,
        caml_new_string("This array type is invalid '"),
        [2,
         0,
         [11,
          caml_new_string("'. Arrays are described as array(kind,size)."),
          0]]],
       caml_new_string
        ("This array type is invalid '%s'. Arrays are described as array(kind,size).")],
     _rk_=
      [0,
       [11,
        caml_new_string("Unknow composed type '"),
        [2,0,[11,caml_new_string("'."),0]]],
       caml_new_string("Unknow composed type '%s'.")],
     _rm_=caml_new_string("unifyListSameType"),
     _rn_=
      [0,
       [11,
        caml_new_string("The symbol '"),
        [2,0,[11,caml_new_string("' is not defined"),0]]],
       caml_new_string("The symbol '%s' is not defined")],
     _ro_=[0,0,0],
     _rp_=[0,caml_new_string("tuple"),0],
     _rq_=
      [0,
       [11,
        caml_new_string("This declaration has type '"),
        [2,
         0,
         [11,
          caml_new_string("' but it has been defined before as '"),
          [2,0,[12,39,0]]]]],
       caml_new_string
        ("This declaration has type '%s' but it has been defined before as '%s'")],
     _ru_=caml_new_string("Inference.inferApplyArg: invalid input"),
     _rw_=[0,caml_new_string("array"),0],
     _rx_=caml_new_string("|"),
     _ry_=caml_new_string("|"),
     _rA_=
      caml_new_string("The operator cannot be used with multiple arguments"),
     _rz_=
      caml_new_string("The operator cannot be used with multiple arguments"),
     _rB_=[0,caml_new_string("tuple"),0],
     _rC_=[0,caml_new_string("wave"),0],
     _rD_=caml_new_string("_samples"),
     _rE_=caml_new_string("scope_"),
     _rv_=caml_new_string("_inst"),
     _rt_=
      [0,
       [11,
        caml_new_string("This function takes "),
        [4,
         3,
         0,
         0,
         [11,
          caml_new_string(" arguments but "),
          [4,3,0,0,[11,caml_new_string(" are passed"),0]]]]],
       caml_new_string("This function takes %i arguments but %i are passed")],
     _rs_=
      [0,
       [11,
        caml_new_string("This function is expected to have type '"),
        [2,0,[11,caml_new_string("' but nothing was returned"),0]]],
       caml_new_string
        ("This function is expected to have type '%s' but nothing was returned")],
     _rr_=
      [0,
       [11,
        caml_new_string("This expression has type '"),
        [2,
         0,
         [11,
          caml_new_string
           ("' but the previous members of the array have type '"),
          [2,0,[12,39,0]]]]],
       caml_new_string
        ("This expression has type '%s' but the previous members of the array have type '%s'")],
     _rg_=
      [0,
       [11,
        caml_new_string("This expression has type '"),
        [2,
         0,
         [11,
          caml_new_string("' but '"),
          [2,0,[11,caml_new_string("' was expected"),0]]]]],
       caml_new_string("This expression has type '%s' but '%s' was expected")],
     _rS_=caml_new_string("bool"),
     _rT_=caml_new_string("int"),
     _rU_=caml_new_string("real"),
     _rV_=caml_new_string("unit"),
     _rW_=caml_new_string("array"),
     _rX_=caml_new_string("tuple"),
     _rR_=caml_new_string("Interpreter.getInitValue"),
     _sz_=caml_new_string("Interpreter.bind: invalid input"),
     _sA_=caml_new_string("cannot evaluate function"),
     _sB_=caml_new_string("condition cannot be evaluated"),
     _sC_=caml_new_string("could not evaluate if statement"),
     _sD_=caml_new_string("could not evaluate if statement"),
     _sj_=caml_new_string("irandom: invalid arguments"),
     _si_=caml_new_string("random: invalid arguments"),
     _sh_=caml_new_string("eps: invalid arguments"),
     _sg_=caml_new_string("real: invalid arguments"),
     _sf_=caml_new_string("real: invalid arguments"),
     _se_=caml_new_string("int: invalid arguments"),
     _sd_=caml_new_string("clip: invalid arguments"),
     _sc_=caml_new_string("invalid arguments"),
     _sk_=caml_new_string("irandom"),
     _sl_=caml_new_string("random"),
     _sm_=caml_new_string("eps"),
     _sn_=caml_new_string("not"),
     _so_=caml_new_string("real"),
     _sp_=caml_new_string("int"),
     _sq_=caml_new_string("clip"),
     _sr_=caml_new_string("sqrt"),
     _ss_=caml_new_string("tan"),
     _st_=caml_new_string("tanh"),
     _su_=caml_new_string("floor"),
     _sv_=caml_new_string("cos"),
     _sw_=caml_new_string("sin"),
     _sx_=caml_new_string("exp"),
     _sy_=caml_new_string("abs"),
     _sb_=caml_new_string(""),
     _r0_=caml_new_string("<"),
     _r7_=caml_new_string("%"),
     _r8_=caml_new_string("&&"),
     _r9_=caml_new_string("*"),
     _r__=caml_new_string("+"),
     _r$_=caml_new_string("-"),
     _sa_=caml_new_string("/"),
     _r1_=caml_new_string("<="),
     _r2_=caml_new_string("<>"),
     _r3_=caml_new_string("=="),
     _r4_=caml_new_string(">"),
     _r5_=caml_new_string(">="),
     _r6_=caml_new_string("||"),
     _rZ_=caml_new_string("-"),
     _rY_=
      caml_new_string
       ("Interpreter.getInitExp: cannot get the initial expression: "),
     _rM_=caml_new_string("_"),
     _rN_=caml_new_string("_"),
     _rO_=caml_new_string("_"),
     _rP_=caml_new_string("_"),
     _rQ_=caml_new_string("_"),
     _rL_=caml_new_string("invalid function name"),
     _rI_=caml_new_string("unknow variable: "),
     _rK_=caml_new_string("invalid env"),
     _rJ_=caml_new_string("unknown module: "),
     _rH_=caml_new_string("invalid env"),
     _rG_=caml_new_string("invalid env"),
     _rF_=caml_new_string("invalid env"),
     _va_=[0,[15,0],caml_new_string("%a")],
     _u6_=
      [0,[12,40,[18,[1,[0,0,caml_new_string("")]],0]],caml_new_string("(@[")],
     _u7_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _u8_=[0,[3,0,0],caml_new_string("%S")],
     _u9_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _u5_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _u4_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _u__=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _uQ_=
      [0,[12,40,[18,[1,[0,0,caml_new_string("")]],0]],caml_new_string("(@[")],
     _uR_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _uS_=[0,[3,0,0],caml_new_string("%S")],
     _uT_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _uP_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _uO_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _uU_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _uH_=caml_new_string("(Some "),
     _uI_=caml_new_string(")"),
     _uJ_=caml_new_string("None"),
     _uB_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _uA_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _uC_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _un_=
      [0,[12,40,[18,[1,[0,0,caml_new_string("")]],0]],caml_new_string("(@[")],
     _uo_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _up_=[0,[3,0,0],caml_new_string("%S")],
     _uq_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _um_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _ul_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _ur_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _t9_=caml_new_string("(Some "),
     _t__=caml_new_string(")"),
     _t$_=caml_new_string("None"),
     _t6_=caml_new_string("Code.CSEmpty"),
     _t7_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CSVar ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CSVar (@,")],
     _t8_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _ua_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _ub_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CSConst ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CSConst (@,")],
     _uc_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _ud_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _ue_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CSBind ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CSBind (@,")],
     _uf_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _ug_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _uh_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CSFunction ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CSFunction (@,")],
     _ui_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _uj_=[0,[3,0,0],caml_new_string("%S")],
     _uk_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _us_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _ut_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _uu_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CSReturn"),
          [17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("(@[<2>Code.CSReturn@ ")],
     _uv_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _uw_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CSWhile ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CSWhile (@,")],
     _ux_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _uy_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _uz_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CSBlock"),
          [17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("(@[<2>Code.CSBlock@ ")],
     _uD_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _uE_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CSIf ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CSIf (@,")],
     _uF_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _uG_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _uK_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _uL_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CSType ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CSType (@,")],
     _uM_=[0,[3,0,0],caml_new_string("%S")],
     _uN_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _uV_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _uW_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CSAlias ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CSAlias (@,")],
     _uX_=[0,[3,0,0],caml_new_string("%S")],
     _uY_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _uZ_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _u0_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CSExtFunc ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CSExtFunc (@,")],
     _u1_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _u2_=[0,[3,0,0],caml_new_string("%S")],
     _u3_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _u$_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _t5_=[0,[15,0],caml_new_string("%a")],
     _t2_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _t1_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _t3_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _tW_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _tX_=[0,[3,0,0],caml_new_string("%S")],
     _tV_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _tY_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _tS_=caml_new_string("Code.CLWild"),
     _tT_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CLId ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CLId (@,")],
     _tU_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _tZ_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _t0_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CLTuple"),
          [17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("(@[<2>Code.CLTuple@ ")],
     _t4_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _tR_=[0,[15,0],caml_new_string("%a")],
     _tK_=
      [0,[12,40,[18,[1,[0,0,caml_new_string("")]],0]],caml_new_string("(@[")],
     _tL_=[0,[3,0,0],caml_new_string("%S")],
     _tM_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _tN_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _tJ_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _tI_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _tO_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _tx_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _ty_=[0,[3,0,0],caml_new_string("%S")],
     _tw_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _tz_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _tr_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _tq_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _ts_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _te_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _td_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _tf_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _s8_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _s7_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [12,91,0]],
       caml_new_string("@[<2>[")],
     _s9_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[12,93,[17,0,0]]],
       caml_new_string("@,]@]")],
     _sR_=caml_new_string("Code.CEEmpty"),
     _sS_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CEInt"),
          [17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("(@[<2>Code.CEInt@ ")],
     _sT_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _sU_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _sV_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CEFloat ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CEFloat (@,")],
     _sW_=[0,[3,0,0],caml_new_string("%S")],
     _sX_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _sY_=[0,[8,15,0,0,0],caml_new_string("%F")],
     _sZ_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _s0_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CEBool"),
          [17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("(@[<2>Code.CEBool@ ")],
     _s1_=[0,[9,0],caml_new_string("%B")],
     _s2_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _s3_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CEString"),
          [17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("(@[<2>Code.CEString@ ")],
     _s4_=[0,[3,0,0],caml_new_string("%S")],
     _s5_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _s6_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CEArray ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CEArray (@,")],
     _s__=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _s$_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _ta_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CECall ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CECall (@,")],
     _tb_=[0,[3,0,0],caml_new_string("%S")],
     _tc_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _tg_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _th_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _ti_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CEUnOp ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CEUnOp (@,")],
     _tj_=[0,[3,0,0],caml_new_string("%S")],
     _tk_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _tl_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _tm_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _tn_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CEOp ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CEOp (@,")],
     _to_=[0,[3,0,0],caml_new_string("%S")],
     _tp_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _tt_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _tu_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _tv_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CEVar ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CEVar (@,")],
     _tA_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _tB_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _tC_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CEIf ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CEIf (@,")],
     _tD_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _tE_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _tF_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _tG_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _tH_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CETuple ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CETuple (@,")],
     _tP_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _tQ_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _sQ_=[0,[15,0],caml_new_string("%a")],
     _sM_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,caml_new_string("Code.Ref"),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("(@[<2>Code.Ref@ ")],
     _sN_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _sO_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,caml_new_string("Code.Var"),[17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("(@[<2>Code.Var@ ")],
     _sP_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _sL_=[0,[15,0],caml_new_string("%a")],
     _sE_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CTSimple"),
          [17,[0,caml_new_string("@ "),1,0],0]]]],
       caml_new_string("(@[<2>Code.CTSimple@ ")],
     _sF_=[0,[3,0,0],caml_new_string("%S")],
     _sG_=[0,[17,0,[12,41,0]],caml_new_string("@])")],
     _sH_=
      [0,
       [12,
        40,
        [18,
         [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
         [11,
          caml_new_string("Code.CTArray ("),
          [17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("(@[<2>Code.CTArray (@,")],
     _sI_=
      [0,[12,44,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(",@ ")],
     _sJ_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _sK_=
      [0,
       [17,[0,caml_new_string("@,"),0,0],[11,caml_new_string("))"),[17,0,0]]],
       caml_new_string("@,))@]")],
     _yb_=[0,caml_new_string("cpp")],
     _yc_=[0,caml_new_string("h")],
     _wR_=
      caml_new_string
       ("/* Code automatically generated by Vult https://github.com/modlfo/vult */"),
     _wS_=caml_new_string('#include "'),
     _wT_=caml_new_string('.h"'),
     _wU_=caml_new_string('extern "C" {'),
     _wV_=caml_new_string("static t_class *"),
     _wW_=caml_new_string("_tilde_class;"),
     _wX_=caml_new_string("typedef struct _"),
     _wY_=caml_new_string("_tilde {"),
     _wZ_=caml_new_string("   t_pxobject  x_obj;"),
     _w0_=caml_new_string("   float dummy;"),
     _w1_=caml_new_string("   "),
     _w2_=caml_new_string("   "),
     _w3_=caml_new_string(" data;"),
     _w4_=caml_new_string("} t_"),
     _w5_=caml_new_string("_tilde;"),
     _w6_=caml_new_string("void "),
     _w7_=caml_new_string("_tilde_perform(t_"),
     _w8_=
      caml_new_string
       ("_tilde *x, t_object *dsp64, double **ins, long numins, double **outs, long numouts, long sampleframes, long flags, void *userparam)"),
     _w9_=caml_new_string("{"),
     _w__=caml_new_string("   int n = sampleframes;"),
     _w$_=caml_new_string("   while (n--) {"),
     _xa_=caml_new_string("      "),
     _xb_=caml_new_string("      "),
     _xc_=caml_new_string("   }"),
     _xd_=caml_new_string("}"),
     _xe_=caml_new_string("void "),
     _xf_=caml_new_string("_tilde_dsp(t_"),
     _xg_=
      caml_new_string
       ("_tilde *x, t_object *dsp64, short *count, double samplerate, long maxvectorsize, long flags)"),
     _xh_=caml_new_string("{"),
     _xi_=caml_new_string("   "),
     _xj_=caml_new_string('   object_method(dsp64, gensym("dsp_add64"), x, '),
     _xk_=caml_new_string("_tilde_perform, 0, NULL);"),
     _xl_=caml_new_string("}"),
     _xm_=caml_new_string("void *"),
     _xn_=caml_new_string("_tilde_new(t_symbol *s, long argc, t_atom *argv)"),
     _xo_=caml_new_string("{"),
     _xp_=caml_new_string("   t_"),
     _xq_=caml_new_string("_tilde *x = (t_"),
     _xr_=caml_new_string("_tilde *)object_alloc("),
     _xs_=caml_new_string("_tilde_class);"),
     _xt_=caml_new_string("   "),
     _xu_=caml_new_string("   "),
     _xv_=caml_new_string("   return (void *)x;"),
     _xw_=caml_new_string("}"),
     _xx_=caml_new_string("void "),
     _xy_=caml_new_string("_tilde_delete(t_"),
     _xz_=caml_new_string("_tilde *x){"),
     _xA_=caml_new_string("}"),
     _xB_=caml_new_string("void "),
     _xC_=caml_new_string("_float(t_"),
     _xD_=caml_new_string("_tilde *x, double f){"),
     _xE_=caml_new_string("   int in = proxy_getinlet((t_object *)x);"),
     _xF_=caml_new_string("   "),
     _xG_=caml_new_string("}"),
     _xH_=caml_new_string("void ext_main(void *r) {"),
     _xI_=caml_new_string("   "),
     _xJ_=caml_new_string('_tilde_class = class_new("'),
     _xK_=caml_new_string('~",'),
     _xL_=caml_new_string("      (method)"),
     _xM_=caml_new_string("_tilde_new, // constructor function"),
     _xN_=caml_new_string("      (method)"),
     _xO_=caml_new_string("_tilde_delete, // destructor function"),
     _xP_=caml_new_string("      (long)sizeof(t_"),
     _xQ_=caml_new_string("_tilde), // size of the object"),
     _xR_=caml_new_string("       0L, A_GIMME, 0); // arguments passed"),
     _xS_=caml_new_string("   class_addmethod("),
     _xT_=caml_new_string("_tilde_class,(method)"),
     _xU_=caml_new_string('_tilde_dsp, "dsp64", A_CANT, 0);'),
     _xV_=caml_new_string("   class_addmethod("),
     _xW_=caml_new_string("_tilde_class, (method)"),
     _xX_=
      caml_new_string
       ('_noteOn,        "noteOn",        A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, 0);'),
     _xY_=caml_new_string("   class_addmethod("),
     _xZ_=caml_new_string("_tilde_class, (method)"),
     _x0_=
      caml_new_string
       ('_noteOff,       "noteOff",       A_DEFFLOAT, A_DEFFLOAT, 0);'),
     _x1_=caml_new_string("   class_addmethod("),
     _x2_=caml_new_string("_tilde_class, (method)"),
     _x3_=
      caml_new_string
       ('_controlChange, "controlChange", A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, 0);'),
     _x4_=caml_new_string("   class_addmethod("),
     _x5_=caml_new_string("_tilde_class, (method)"),
     _x6_=caml_new_string('_float, "float", A_FLOAT, 0);'),
     _x7_=caml_new_string("   class_dspinit("),
     _x8_=caml_new_string("_tilde_class);"),
     _x9_=caml_new_string("   class_register(CLASS_BOX, "),
     _x__=caml_new_string("_tilde_class);"),
     _x$_=caml_new_string("}"),
     _ya_=caml_new_string('} // extern "C"'),
     _wK_=caml_new_string("void "),
     _wL_=caml_new_string("_controlChange(t_"),
     _wM_=
      caml_new_string
       ("_tilde *x, double control, double value, double channel) {"),
     _wN_=caml_new_string("   "),
     _wO_=caml_new_string("_controlChange("),
     _wP_=caml_new_string(");"),
     _wQ_=caml_new_string("}"),
     _wJ_=caml_new_string("x->data"),
     _wz_=caml_new_string("void "),
     _wA_=caml_new_string("_noteOn(t_"),
     _wB_=
      caml_new_string
       ("_tilde *x, double note, double velocity, double channel){"),
     _wC_=caml_new_string("   if((int)velocity) "),
     _wD_=caml_new_string("_noteOn("),
     _wE_=caml_new_string(");"),
     _wF_=caml_new_string("   else "),
     _wG_=caml_new_string("_noteOff("),
     _wH_=caml_new_string(");"),
     _wI_=caml_new_string("}"),
     _ws_=caml_new_string("void "),
     _wt_=caml_new_string("_noteOff(t_"),
     _wu_=caml_new_string("_tilde *x, double note, double channel) {"),
     _wv_=caml_new_string("   "),
     _ww_=caml_new_string("_noteOff("),
     _wx_=caml_new_string(");"),
     _wy_=caml_new_string("}"),
     _wr_=caml_new_string("x->data"),
     _wq_=caml_new_string("x->data"),
     _wo_=caml_new_string("_process_type"),
     _wn_=caml_new_string("_process_init(x->data);"),
     _wm_=caml_new_string("_default(x->data);"),
     _wp_=caml_new_string("float"),
     _wj_=caml_new_string("double *out_"),
     _wk_=caml_new_string(" = outs["),
     _wl_=caml_new_string("];"),
     _wg_=caml_new_string("double *in_"),
     _wh_=caml_new_string(" = ins["),
     _wi_=caml_new_string("];"),
     _v$_=caml_new_string(" "),
     _wa_=caml_new_string("_process("),
     _wb_=caml_new_string(");"),
     _we_=caml_new_string("*(out_0++) = "),
     _wf_=caml_new_string(";"),
     _wc_=caml_new_string(" ret = "),
     _v8_=caml_new_string("*(out_"),
     _v9_=caml_new_string("++) = "),
     _v__=caml_new_string(";"),
     _v7_=caml_new_string("ret.field_"),
     _v3_=caml_new_string("ret"),
     _v2_=caml_new_string("x->data"),
     _v0_=caml_new_string("in_"),
     _v1_=caml_new_string("_value"),
     _v4_=caml_new_string("_"),
     _v5_=caml_new_string("_$ ret; "),
     _v6_=caml_new_string("_tuple_$_"),
     _wd_=caml_new_string("ret"),
     _vZ_=caml_new_string("float"),
     _vY_=caml_new_string("float"),
     _vT_=caml_new_string("("),
     _vU_=caml_new_string(")"),
     _vX_=caml_new_string("(bool) "),
     _vW_=caml_new_string("(float) "),
     _vV_=caml_new_string("(int) "),
     _vQ_=caml_new_string("bool"),
     _vR_=caml_new_string("float"),
     _vS_=caml_new_string("int"),
     _vP_=caml_new_string('outlet_new((t_object *)x, "signal");'),
     _vK_=caml_new_string("float in_"),
     _vL_=caml_new_string("_value = x->in"),
     _vM_=caml_new_string("_connected? *(in_"),
     _vN_=caml_new_string("++): x->in"),
     _vO_=caml_new_string("_value;"),
     _vH_=caml_new_string("if(in == "),
     _vI_=caml_new_string(") x->in"),
     _vJ_=caml_new_string("_value = f;"),
     _vF_=caml_new_string("dsp_setup((t_pxobject *)x, "),
     _vG_=caml_new_string(");"),
     _vC_=caml_new_string("x->in"),
     _vD_=caml_new_string("_connected = count["),
     _vE_=caml_new_string("];"),
     _vA_=caml_new_string("float in"),
     _vB_=caml_new_string("_value;"),
     _vy_=caml_new_string("short in"),
     _vz_=caml_new_string("_connected;"),
     _vb_=
      caml_new_string
       ("/* Code automatically generated by Vult https://github.com/modlfo/vult */"),
     _vc_=caml_new_string("#ifndef "),
     _vd_=caml_new_string("_H"),
     _ve_=caml_new_string("#define "),
     _vf_=caml_new_string("_H"),
     _vg_=caml_new_string("#include <stdint.h>"),
     _vh_=caml_new_string("#include <math.h>"),
     _vi_=caml_new_string('#include "vultin.h"'),
     _vj_=caml_new_string('#include "ext.h"'),
     _vk_=caml_new_string('#include "ext_obex.h"'),
     _vl_=caml_new_string('#include "z_dsp.h"'),
     _vm_=caml_new_string("#if defined(_MSC_VER)"),
     _vn_=caml_new_string("    //  Microsoft VC++"),
     _vo_=caml_new_string("    #define EXPORT __declspec(dllexport)"),
     _vp_=caml_new_string("#else"),
     _vq_=caml_new_string("    //  GCC"),
     _vr_=
      caml_new_string
       ('    #define EXPORT __attribute__((visibility("default")))'),
     _vs_=caml_new_string("#endif"),
     _vt_=caml_new_string('extern "C" {'),
     _vu_=caml_new_string("EXPORT void ext_main(void *r);"),
     _vv_=caml_new_string("}"),
     _vw_=caml_new_string("#endif // "),
     _vx_=caml_new_string("_H"),
     _B6_=[0,caml_new_string("cpp")],
     _B7_=[0,caml_new_string("h")],
     _A9_=caml_new_string("package "),
     _A__=caml_new_string("   model Processor"),
     _A$_=caml_new_string("      parameter Real sampleRate = 44100.0;"),
     _Ba_=
      caml_new_string
       ("      extends Modelica.Blocks.Interfaces.DiscreteMIMO(samplePeriod = 1.0/sampleRate, nin="),
     _Bb_=caml_new_string(", nout="),
     _Bc_=caml_new_string(");"),
     _Bd_=caml_new_string("      Internal."),
     _Be_=caml_new_string("Object obj = Internal."),
     _Bf_=caml_new_string("Object.constructor();"),
     _Bg_=caml_new_string("   equation"),
     _Bh_=caml_new_string("      when sampleTrigger then"),
     _Bi_=caml_new_string("        "),
     _Bj_=caml_new_string(" = Internal.process("),
     _Bk_=caml_new_string(");"),
     _Bl_=caml_new_string("      end when;"),
     _Bm_=caml_new_string("   end Processor;"),
     _Bn_=caml_new_string("   package Internal"),
     _Bo_=caml_new_string("   class "),
     _Bp_=caml_new_string("Object"),
     _Bq_=caml_new_string("      extends ExternalObject;"),
     _Br_=caml_new_string("      function constructor"),
     _Bs_=caml_new_string("         output "),
     _Bt_=caml_new_string("Object obj;"),
     _Bu_=caml_new_string('         external "C" obj = '),
     _Bv_=
      caml_new_string('__constructor() annotation(Include = "#include \\"'),
     _Bw_=caml_new_string('.h\\"", Library = "'),
     _Bx_=caml_new_string('", IncludeDirectory = "modelica://'),
     _By_=
      caml_new_string('/Resources/Include", LibraryDirectory = "modelica://'),
     _Bz_=caml_new_string('/Resources/Library");'),
     _BA_=caml_new_string("      end constructor;"),
     _BB_=caml_new_string("      function destructor"),
     _BC_=caml_new_string("         input "),
     _BD_=caml_new_string("Object obj;"),
     _BE_=caml_new_string('         external "C" '),
     _BF_=
      caml_new_string('__destructor(obj) annotation(Include = "#include \\"'),
     _BG_=caml_new_string('.h\\"", Library = "'),
     _BH_=caml_new_string('", IncludeDirectory = "modelica://'),
     _BI_=
      caml_new_string('/Resources/Include", LibraryDirectory = "modelica://'),
     _BJ_=caml_new_string('/Resources/Library");'),
     _BK_=caml_new_string("         end destructor;"),
     _BL_=caml_new_string("   end "),
     _BM_=caml_new_string("Object;"),
     _BN_=caml_new_string("   function process"),
     _BO_=caml_new_string("      input "),
     _BP_=caml_new_string("Object obj;"),
     _BQ_=caml_new_string('      external "C" '),
     _BR_=caml_new_string(' annotation(Include = "#include \\"'),
     _BS_=caml_new_string('.h\\"", Library = "'),
     _BT_=caml_new_string('", IncludeDirectory = "modelica://'),
     _BU_=
      caml_new_string('/Resources/Include", LibraryDirectory = "modelica://'),
     _BV_=caml_new_string('/Resources/Library");'),
     _BW_=caml_new_string("   end process;"),
     _BX_=caml_new_string("   end Internal;"),
     _BY_=caml_new_string("end "),
     _BZ_=caml_new_string(";"),
     _A6_=caml_new_string("__process("),
     _A7_=caml_new_string(")"),
     _B0_=caml_new_string("out0 = "),
     _B1_=caml_new_string("__process("),
     _B2_=caml_new_string(")"),
     _B4_=caml_new_string("__process("),
     _B5_=caml_new_string(")"),
     _A0_=caml_new_string("]"),
     _A1_=caml_new_string("y["),
     _AY_=caml_new_string("]"),
     _AZ_=caml_new_string("u["),
     _AX_=caml_new_string("out"),
     _AW_=caml_new_string("in"),
     _A2_=caml_new_string("obj"),
     _A3_=caml_new_string("input"),
     _A4_=caml_new_string("output"),
     _A5_=caml_new_string("obj"),
     _B3_=caml_new_string("obj"),
     _A8_=caml_new_string(".mo"),
     _AT_=caml_new_string(" "),
     _AU_=caml_new_string(" "),
     _AV_=caml_new_string(";"),
     _AK_=caml_new_string("bool"),
     _AL_=caml_new_string("float"),
     _AM_=caml_new_string("int"),
     _AN_=caml_new_string("real"),
     _AP_=caml_new_string("Real"),
     _AQ_=caml_new_string("Integer"),
     _AR_=caml_new_string("Real"),
     _AS_=caml_new_string("Boolean"),
     _AO_=caml_new_string("getModelicaType: unknown type "),
     _Ay_=caml_new_string("cmake_minimum_required(VERSION 2.8)"),
     _Az_=caml_new_string("set(CMAKE_BUILD_TYPE Release)"),
     _AA_=
      caml_new_string
       ('set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_LIST_DIR}/Resources CACHE PATH "Install" FORCE)'),
     _AB_=caml_new_string("set(SRC "),
     _AC_=caml_new_string(".cpp "),
     _AD_=caml_new_string(".h vultin.c vultin.h)"),
     _AE_=caml_new_string("add_library("),
     _AF_=caml_new_string(" SHARED ${SRC})"),
     _AG_=caml_new_string("install(TARGETS "),
     _AH_=caml_new_string(" DESTINATION Library)"),
     _AI_=caml_new_string("install(FILES vultin.h "),
     _AJ_=caml_new_string(".h DESTINATION Include)"),
     _Ax_=[1,caml_new_string("CMakeLists.txt")],
     _z1_=
      caml_new_string
       ("/* Code automatically generated by Vult https://github.com/modlfo/vult */"),
     _z2_=caml_new_string('#include "'),
     _z3_=caml_new_string('.h"'),
     _z4_=caml_new_string('extern "C" {'),
     _z5_=caml_new_string("EXPORT void *"),
     _z6_=caml_new_string("__constructor()"),
     _z7_=caml_new_string("{"),
     _z8_=caml_new_string("   "),
     _z9_=caml_new_string(" *data = ("),
     _z__=caml_new_string(" *)malloc(sizeof("),
     _z$_=caml_new_string("));"),
     _Aa_=caml_new_string("   "),
     _Ab_=caml_new_string("   "),
     _Ac_=caml_new_string("   return (void *)data;"),
     _Ad_=caml_new_string("}"),
     _Ae_=caml_new_string("EXPORT void "),
     _Af_=caml_new_string("__destructor(void *object)"),
     _Ag_=caml_new_string("{"),
     _Ah_=caml_new_string("   "),
     _Ai_=caml_new_string(" *data = ("),
     _Aj_=caml_new_string(" *)object;"),
     _Ak_=caml_new_string("   free(data);"),
     _Al_=caml_new_string("}"),
     _Am_=caml_new_string("EXPORT "),
     _An_=caml_new_string(" "),
     _Ao_=caml_new_string("__process("),
     _Ap_=caml_new_string(")"),
     _Aq_=caml_new_string("{"),
     _Ar_=caml_new_string("   "),
     _As_=caml_new_string(" *data = ("),
     _At_=caml_new_string(" *)object;"),
     _Au_=caml_new_string("   "),
     _Av_=caml_new_string("}"),
     _Aw_=caml_new_string('} // extern "C"'),
     _zS_=caml_new_string("EXPORT void "),
     _zT_=
      caml_new_string
       ("__controlChange(void *object, int control, int value, int channel) {"),
     _zU_=caml_new_string("   "),
     _zV_=caml_new_string(" *data = ("),
     _zW_=caml_new_string(" *)object;"),
     _zX_=caml_new_string("   "),
     _zY_=caml_new_string("_controlChange("),
     _zZ_=caml_new_string(");"),
     _z0_=caml_new_string("}"),
     _zR_=caml_new_string("*data"),
     _zF_=caml_new_string("EXPORT void "),
     _zG_=
      caml_new_string
       ("__noteOn(void *object, int note, int vel, int channel){"),
     _zH_=caml_new_string("   "),
     _zI_=caml_new_string(" *data = ("),
     _zJ_=caml_new_string(" *)object;"),
     _zK_=caml_new_string("   if(vel) "),
     _zL_=caml_new_string("_noteOn("),
     _zM_=caml_new_string(");"),
     _zN_=caml_new_string("   else "),
     _zO_=caml_new_string("_noteOff("),
     _zP_=caml_new_string(");"),
     _zQ_=caml_new_string("}"),
     _zw_=caml_new_string("EXPORT void "),
     _zx_=caml_new_string("__noteOff(void *object, int note, int channel) {"),
     _zy_=caml_new_string("   "),
     _zz_=caml_new_string(" *data = ("),
     _zA_=caml_new_string(" *)object;"),
     _zB_=caml_new_string("   "),
     _zC_=caml_new_string("_noteOff("),
     _zD_=caml_new_string(");"),
     _zE_=caml_new_string("}"),
     _zv_=caml_new_string("*data"),
     _zu_=caml_new_string("*data"),
     _zs_=caml_new_string("_process_type"),
     _zr_=caml_new_string("_process_init(*data);"),
     _zq_=caml_new_string("_default(*data);"),
     _zt_=caml_new_string("float"),
     _zj_=caml_new_string(" "),
     _zk_=caml_new_string("_process("),
     _zl_=caml_new_string(");"),
     _zo_=caml_new_string("return "),
     _zp_=caml_new_string(";"),
     _zm_=caml_new_string(" ret = "),
     _zg_=caml_new_string("out_"),
     _zh_=caml_new_string(" = "),
     _zi_=caml_new_string(";"),
     _zf_=caml_new_string("ret.field_"),
     _zb_=caml_new_string("ret"),
     _za_=caml_new_string("*data"),
     _y$_=caml_new_string("in_"),
     _zc_=caml_new_string("_"),
     _zd_=caml_new_string("_$ ret; "),
     _ze_=caml_new_string("_tuple_$_"),
     _zn_=caml_new_string("ret"),
     _y__=caml_new_string("float"),
     _y9_=caml_new_string("float"),
     _y4_=caml_new_string("("),
     _y5_=caml_new_string(")"),
     _y8_=caml_new_string("(bool) "),
     _y7_=caml_new_string("(float) "),
     _y6_=caml_new_string("(int) "),
     _y1_=caml_new_string("bool"),
     _y2_=caml_new_string("float"),
     _y3_=caml_new_string("int"),
     _yp_=
      caml_new_string
       ("/* Code automatically generated by Vult https://github.com/modlfo/vult */"),
     _yq_=caml_new_string("#ifndef "),
     _yr_=caml_new_string("_H"),
     _ys_=caml_new_string("#define "),
     _yt_=caml_new_string("_H"),
     _yu_=caml_new_string("#include <stdint.h>"),
     _yv_=caml_new_string("#include <math.h>"),
     _yw_=caml_new_string('#include "vultin.h"'),
     _yx_=caml_new_string("#if defined(_MSC_VER)"),
     _yy_=caml_new_string("    //  Microsoft VC++"),
     _yz_=caml_new_string("    #define EXPORT __declspec(dllexport)"),
     _yA_=caml_new_string("#else"),
     _yB_=caml_new_string("    //  GCC"),
     _yC_=
      caml_new_string
       ('    #define EXPORT __attribute__((visibility("default")))'),
     _yD_=caml_new_string("#endif"),
     _yE_=caml_new_string("#ifdef __cplusplus"),
     _yF_=caml_new_string('extern "C" {'),
     _yG_=caml_new_string("#endif"),
     _yH_=caml_new_string("#include <stdlib.h>"),
     _yI_=caml_new_string("EXPORT void *"),
     _yJ_=caml_new_string("__constructor();"),
     _yK_=caml_new_string("EXPORT void "),
     _yL_=caml_new_string("__destructor(void *object);"),
     _yM_=caml_new_string("EXPORT "),
     _yN_=caml_new_string(" "),
     _yO_=caml_new_string("__process("),
     _yP_=caml_new_string(");"),
     _yQ_=caml_new_string("EXPORT void "),
     _yR_=
      caml_new_string
       ("__noteOn(void *object, int note, int vel, int channel);"),
     _yS_=caml_new_string("EXPORT void "),
     _yT_=caml_new_string("__noteOff(void *object, int note, int channel);"),
     _yU_=caml_new_string("EXPORT void "),
     _yV_=
      caml_new_string
       ("__controlChange(void *object, int control, int value, int channel);"),
     _yW_=caml_new_string("#ifdef __cplusplus"),
     _yX_=caml_new_string("}"),
     _yY_=caml_new_string("#endif"),
     _yZ_=caml_new_string("#endif // "),
     _y0_=caml_new_string("_H"),
     _ym_=caml_new_string(" in_"),
     _yk_=caml_new_string(" &out_"),
     _yl_=caml_new_string("void"),
     _yo_=caml_new_string("void"),
     _yn_=caml_new_string("void *object"),
     _yd_=caml_new_string("bool"),
     _ye_=caml_new_string("int"),
     _yf_=caml_new_string("real"),
     _yh_=caml_new_string("double"),
     _yi_=caml_new_string("int"),
     _yj_=caml_new_string("int"),
     _yg_=caml_new_string("modelicaType: unknown type"),
     _ER_=[0,caml_new_string("cpp")],
     _ES_=[0,caml_new_string("h")],
     _DB_=
      caml_new_string
       ("/* Code automatically generated by Vult https://github.com/modlfo/vult */"),
     _DC_=caml_new_string('#include "'),
     _DD_=caml_new_string('.h"'),
     _DE_=caml_new_string('extern "C" {'),
     _DF_=caml_new_string("static t_class *"),
     _DG_=caml_new_string("_tilde_class;"),
     _DH_=caml_new_string("typedef struct _"),
     _DI_=caml_new_string("_tilde {"),
     _DJ_=caml_new_string("   t_object  x_obj;"),
     _DK_=caml_new_string("   float dummy;"),
     _DL_=caml_new_string("   "),
     _DM_=caml_new_string(" data;"),
     _DN_=caml_new_string("} t_"),
     _DO_=caml_new_string("_tilde;"),
     _DP_=caml_new_string("t_int *"),
     _DQ_=caml_new_string("_tilde_perform(t_int *w)"),
     _DR_=caml_new_string("{"),
     _DS_=caml_new_string("   t_"),
     _DT_=caml_new_string("_tilde *x = (t_"),
     _DU_=caml_new_string("_tilde *)(w[1]);"),
     _DV_=caml_new_string("   while (n--) {"),
     _DW_=caml_new_string("   }"),
     _DX_=caml_new_string("   return (w+"),
     _DY_=caml_new_string(");"),
     _DZ_=caml_new_string("}"),
     _D0_=caml_new_string("void "),
     _D1_=caml_new_string("_tilde_dsp(t_"),
     _D2_=caml_new_string("_tilde *x, t_signal **sp)"),
     _D3_=caml_new_string("{"),
     _D4_=caml_new_string("   dsp_add("),
     _D5_=caml_new_string("_tilde_perform, "),
     _D6_=caml_new_string(","),
     _D7_=caml_new_string("   x,"),
     _D8_=caml_new_string("   sp[0]->s_n);"),
     _D9_=caml_new_string("}"),
     _D__=caml_new_string("void *"),
     _D$_=caml_new_string("_tilde_new()"),
     _Ea_=caml_new_string("{"),
     _Eb_=caml_new_string("   t_"),
     _Ec_=caml_new_string("_tilde *x = (t_"),
     _Ed_=caml_new_string("_tilde *)pd_new("),
     _Ee_=caml_new_string("_tilde_class);"),
     _Ef_=caml_new_string("   "),
     _Eg_=caml_new_string("   "),
     _Eh_=caml_new_string("   return (void *)x;"),
     _Ei_=caml_new_string("}"),
     _Ej_=caml_new_string("void "),
     _Ek_=caml_new_string("_tilde_delete(t_"),
     _El_=caml_new_string("_tilde *x){"),
     _Em_=caml_new_string("}"),
     _En_=caml_new_string("void "),
     _Eo_=caml_new_string("_tilde_setup(void) {"),
     _Ep_=caml_new_string("   "),
     _Eq_=caml_new_string('_tilde_class = class_new(gensym("'),
     _Er_=caml_new_string('~"),'),
     _Es_=caml_new_string("      (t_newmethod)"),
     _Et_=caml_new_string("_tilde_new, // constructor function"),
     _Eu_=caml_new_string("      (t_method)"),
     _Ev_=caml_new_string("_tilde_delete, // destructor function"),
     _Ew_=caml_new_string("      sizeof(t_"),
     _Ex_=caml_new_string("_tilde), // size of the object"),
     _Ey_=caml_new_string("      CLASS_DEFAULT, // type of object"),
     _Ez_=caml_new_string("      A_NULL); // arguments passed"),
     _EA_=caml_new_string("   class_addmethod("),
     _EB_=caml_new_string("_tilde_class,(t_method)"),
     _EC_=caml_new_string('_tilde_dsp, gensym("dsp"), A_NULL);'),
     _ED_=caml_new_string("   CLASS_MAINSIGNALIN("),
     _EE_=caml_new_string("_tilde_class, t_"),
     _EF_=caml_new_string("_tilde, dummy);"),
     _EG_=caml_new_string("   class_addmethod("),
     _EH_=caml_new_string("_tilde_class, (t_method)"),
     _EI_=
      caml_new_string
       ('_noteOn,        gensym("noteOn"),        A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, A_NULL);'),
     _EJ_=caml_new_string("   class_addmethod("),
     _EK_=caml_new_string("_tilde_class, (t_method)"),
     _EL_=
      caml_new_string
       ('_noteOff,       gensym("noteOff"),       A_DEFFLOAT, A_DEFFLOAT, A_NULL);'),
     _EM_=caml_new_string("   class_addmethod("),
     _EN_=caml_new_string("_tilde_class, (t_method)"),
     _EO_=
      caml_new_string
       ('_controlChange, gensym("controlChange"), A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, A_NULL);'),
     _EP_=caml_new_string("}"),
     _EQ_=caml_new_string('} // extern "C"'),
     _Du_=caml_new_string("void "),
     _Dv_=caml_new_string("_controlChange(t_"),
     _Dw_=
      caml_new_string
       ("_tilde *x, t_floatarg control, t_floatarg value, t_floatarg channel) {"),
     _Dx_=caml_new_string("   "),
     _Dy_=caml_new_string("_controlChange("),
     _Dz_=caml_new_string(");"),
     _DA_=caml_new_string("}"),
     _Dt_=caml_new_string("x->data"),
     _Dj_=caml_new_string("void "),
     _Dk_=caml_new_string("_noteOn(t_"),
     _Dl_=
      caml_new_string
       ("_tilde *x, t_floatarg note, t_floatarg velocity, t_floatarg channel){"),
     _Dm_=caml_new_string("   if((int)velocity) "),
     _Dn_=caml_new_string("_noteOn("),
     _Do_=caml_new_string(");"),
     _Dp_=caml_new_string("   else "),
     _Dq_=caml_new_string("_noteOff("),
     _Dr_=caml_new_string(");"),
     _Ds_=caml_new_string("}"),
     _Dc_=caml_new_string("void "),
     _Dd_=caml_new_string("_noteOff(t_"),
     _De_=caml_new_string("_tilde *x, t_floatarg note, t_floatarg channel) {"),
     _Df_=caml_new_string("   "),
     _Dg_=caml_new_string("_noteOff("),
     _Dh_=caml_new_string(");"),
     _Di_=caml_new_string("}"),
     _Db_=caml_new_string("x->data"),
     _Da_=caml_new_string("x->data"),
     _C__=caml_new_string("_process_type"),
     _C9_=caml_new_string("_process_init(x->data);"),
     _C8_=caml_new_string("_default(x->data);"),
     _C$_=caml_new_string("float"),
     _C6_=caml_new_string("int n = (int)(w["),
     _C7_=caml_new_string("]);"),
     _C5_=caml_new_string("out"),
     _C4_=caml_new_string("in"),
     _CZ_=caml_new_string("t_sample *"),
     _C0_=caml_new_string("_"),
     _C1_=caml_new_string(" = (t_sample *)(w["),
     _C2_=caml_new_string("]);"),
     _C3_=[0,0,2,0],
     _CS_=caml_new_string(" "),
     _CT_=caml_new_string("_process("),
     _CU_=caml_new_string(");"),
     _CX_=caml_new_string("*(out_0++) = "),
     _CY_=caml_new_string(";"),
     _CV_=caml_new_string(" ret = "),
     _CP_=caml_new_string("*(out_"),
     _CQ_=caml_new_string("++) = "),
     _CR_=caml_new_string(";"),
     _CO_=caml_new_string("ret.field_"),
     _CK_=caml_new_string("ret"),
     _CJ_=caml_new_string("x->data"),
     _CH_=caml_new_string("*(in_"),
     _CI_=caml_new_string("++)"),
     _CL_=caml_new_string("_"),
     _CM_=caml_new_string("_$ ret; "),
     _CN_=caml_new_string("_tuple_$_"),
     _CW_=caml_new_string("ret"),
     _CG_=caml_new_string("float"),
     _CF_=caml_new_string("float"),
     _CA_=caml_new_string("("),
     _CB_=caml_new_string(")"),
     _CE_=caml_new_string("(bool) "),
     _CD_=caml_new_string("(float) "),
     _CC_=caml_new_string("(int) "),
     _Cx_=caml_new_string("bool"),
     _Cy_=caml_new_string("float"),
     _Cz_=caml_new_string("int"),
     _Cw_=caml_new_string(","),
     _Cu_=caml_new_string("sp["),
     _Cv_=caml_new_string("]->s_vec"),
     _Ct_=caml_new_string("outlet_new(&x->x_obj, &s_signal);"),
     _Cs_=
      caml_new_string
       ("inlet_new(&x->x_obj, &x->x_obj.ob_pd, &s_signal, &s_signal);"),
     _B8_=
      caml_new_string
       ("/* Code automatically generated by Vult https://github.com/modlfo/vult */"),
     _B9_=caml_new_string("#ifndef "),
     _B__=caml_new_string("_H"),
     _B$_=caml_new_string("#define "),
     _Ca_=caml_new_string("_H"),
     _Cb_=caml_new_string("#include <stdint.h>"),
     _Cc_=caml_new_string("#include <math.h>"),
     _Cd_=caml_new_string('#include "vultin.h"'),
     _Ce_=caml_new_string("#include <m_pd.h>"),
     _Cf_=caml_new_string("#if defined(_MSC_VER)"),
     _Cg_=caml_new_string("    //  Microsoft VC++"),
     _Ch_=caml_new_string("    #define EXPORT __declspec(dllexport)"),
     _Ci_=caml_new_string("#else"),
     _Cj_=caml_new_string("    //  GCC"),
     _Ck_=
      caml_new_string
       ('    #define EXPORT __attribute__((visibility("default")))'),
     _Cl_=caml_new_string("#endif"),
     _Cm_=caml_new_string('extern "C" {'),
     _Cn_=caml_new_string("EXPORT void "),
     _Co_=caml_new_string("_tilde_setup(void);"),
     _Cp_=caml_new_string("}"),
     _Cq_=caml_new_string("#endif // "),
     _Cr_=caml_new_string("_H"),
     _FV_=[0,caml_new_string("cpp")],
     _FW_=[0,caml_new_string("h")],
     _FC_=caml_new_string('#include "'),
     _FD_=caml_new_string('.h"'),
     _FE_=caml_new_string("void "),
     _FF_=caml_new_string("::update(void)"),
     _FG_=caml_new_string("{"),
     _FH_=caml_new_string("  audio_block_t *block;"),
     _FI_=caml_new_string("  short *bp;"),
     _FJ_=caml_new_string("  block = allocate();"),
     _FK_=caml_new_string("  if (block) {"),
     _FL_=caml_new_string("    bp = block->data;"),
     _FM_=
      caml_new_string("      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {"),
     _FN_=caml_new_string("        fix16_t v = "),
     _FO_=caml_new_string("_process(data,0);"),
     _FP_=caml_new_string("        *bp++ = (int16_t)(v / 2);"),
     _FQ_=caml_new_string("      }"),
     _FR_=caml_new_string("    transmit(block,0);"),
     _FS_=caml_new_string("    release(block);"),
     _FT_=caml_new_string("  }"),
     _FU_=caml_new_string("}"),
     _ET_=caml_new_string("#ifndef "),
     _EU_=caml_new_string("_H"),
     _EV_=caml_new_string("#define "),
     _EW_=caml_new_string("_H"),
     _EX_=caml_new_string("#include <stdint.h>"),
     _EY_=caml_new_string("#include <math.h>"),
     _EZ_=caml_new_string('#include "vultin.h"'),
     _E0_=caml_new_string('#include "AudioStream.h"'),
     _E1_=caml_new_string("class "),
     _E2_=caml_new_string(" : public AudioStream"),
     _E3_=caml_new_string("{"),
     _E4_=caml_new_string("public:"),
     _E5_=caml_new_string("  "),
     _E6_=caml_new_string("(void) : AudioStream(0,NULL)"),
     _E7_=caml_new_string("  {"),
     _E8_=caml_new_string("     "),
     _E9_=caml_new_string("_process_init(data);"),
     _E__=caml_new_string("  }"),
     _E$_=caml_new_string("  void begin() {"),
     _Fa_=caml_new_string("    "),
     _Fb_=caml_new_string("_default(data);"),
     _Fc_=caml_new_string("  }"),
     _Fd_=caml_new_string("  // Handles note on events"),
     _Fe_=
      caml_new_string("  void noteOn(int note, int velocity, int channel){"),
     _Ff_=
      caml_new_string
       ("    // If the velocity is larger than zero, means that is turning on"),
     _Fg_=caml_new_string("    if(velocity) "),
     _Fh_=caml_new_string("_noteOn(data, note, velocity, channel);"),
     _Fi_=caml_new_string("    else         "),
     _Fj_=caml_new_string("_noteOff(data, note, channel);"),
     _Fk_=caml_new_string("  }"),
     _Fl_=caml_new_string("  // Handles note off events"),
     _Fm_=
      caml_new_string("  void noteOff(int note, int velocity, int channel) {"),
     _Fn_=caml_new_string("    "),
     _Fo_=caml_new_string("_noteOff(data, note, channel);"),
     _Fp_=caml_new_string("  }"),
     _Fq_=caml_new_string("  // Handles control change events"),
     _Fr_=
      caml_new_string
       ("  void controlChange(int control, int value, int channel) {"),
     _Fs_=caml_new_string("    "),
     _Ft_=caml_new_string("_controlChange(data, control, value, channel);"),
     _Fu_=caml_new_string("  }"),
     _Fv_=caml_new_string("  virtual void update(void);"),
     _Fw_=caml_new_string("private:"),
     _Fx_=caml_new_string("  "),
     _Fy_=caml_new_string("_process_type data;"),
     _Fz_=caml_new_string("};"),
     _FA_=caml_new_string("#endif // "),
     _FB_=caml_new_string("_H"),
     _Ga_=caml_new_string("default"),
     _Gb_=caml_new_string("max"),
     _Gc_=caml_new_string("modelica"),
     _Gd_=caml_new_string("none"),
     _Ge_=caml_new_string("pd"),
     _Gf_=caml_new_string("teensy"),
     _Gg_=
      [0,
       [11,
        caml_new_string("The template '"),
        [2,0,[11,caml_new_string("' is not available for this generator"),0]]],
       caml_new_string
        ("The template '%s' is not available for this generator")],
     _F__=[0,caml_new_string("cpp")],
     _F$_=[0,caml_new_string("h")],
     _F7_=
      caml_new_string
       ("/* Code automatically generated by Vult https://github.com/modlfo/vult */"),
     _F8_=caml_new_string('#include "'),
     _F9_=caml_new_string('.h"'),
     _FX_=
      caml_new_string
       ("/* Code automatically generated by Vult https://github.com/modlfo/vult */"),
     _FY_=caml_new_string("#ifndef "),
     _FZ_=caml_new_string("_H"),
     _F0_=caml_new_string("#define "),
     _F1_=caml_new_string("_H"),
     _F2_=caml_new_string("#include <stdint.h>"),
     _F3_=caml_new_string("#include <math.h>"),
     _F4_=caml_new_string('#include "vultin.h"'),
     _F5_=caml_new_string("#endif // "),
     _F6_=caml_new_string("_H"),
     _Gy_=caml_new_string("{ "),
     _Gz_=caml_new_string(" }"),
     _Gu_=caml_new_string("("),
     _Gv_=caml_new_string("?"),
     _Gw_=caml_new_string(":"),
     _Gx_=caml_new_string(")"),
     _Gs_=caml_new_string("("),
     _Gt_=caml_new_string(")"),
     _Gq_=caml_new_string(" "),
     _Gr_=caml_new_string(" "),
     _Gn_=caml_new_string("("),
     _Go_=caml_new_string(" "),
     _Gp_=caml_new_string(")"),
     _Gl_=caml_new_string("("),
     _Gm_=caml_new_string(")"),
     _Gj_=caml_new_string("{"),
     _Gk_=caml_new_string("}"),
     _GA_=caml_new_string("."),
     _GB_=caml_new_string(" = "),
     _HI_=caml_new_string(" "),
     _HJ_=caml_new_string("("),
     _HK_=caml_new_string(");"),
     _HF_=caml_new_string("typedef "),
     _HG_=caml_new_string(" "),
     _HH_=caml_new_string(";"),
     _HB_=caml_new_string("typedef struct "),
     _HC_=caml_new_string(" {"),
     _HD_=caml_new_string("} "),
     _HE_=caml_new_string(";"),
     _HA_=caml_new_string(";"),
     _Hz_=caml_new_string("if"),
     _Hv_=caml_new_string("if"),
     _Hw_=caml_new_string("else"),
     _Hr_=caml_new_string("{"),
     _Hs_=caml_new_string("}"),
     _Hq_=caml_new_string("while"),
     _Ho_=caml_new_string("return "),
     _Hp_=caml_new_string(";"),
     _Hb_=caml_new_string(" "),
     _Hc_=caml_new_string("("),
     _Hd_=caml_new_string("){"),
     _He_=caml_new_string("}"),
     _G__=caml_new_string(" "),
     _G$_=caml_new_string("("),
     _Ha_=caml_new_string(");"),
     _Hl_=caml_new_string(" "),
     _Hm_=caml_new_string("("),
     _Hn_=caml_new_string("){};"),
     _Hi_=caml_new_string(" "),
     _Hj_=caml_new_string("("),
     _Hk_=caml_new_string(")"),
     _Hf_=caml_new_string(" "),
     _Hg_=caml_new_string("("),
     _Hh_=caml_new_string(");"),
     _G7_=caml_new_string(" = "),
     _G8_=caml_new_string(";"),
     _G6_=caml_new_string(";"),
     _G3_=caml_new_string("static const "),
     _G4_=caml_new_string(" = "),
     _G5_=caml_new_string(";"),
     _G0_=caml_new_string(";"),
     _G1_=caml_new_string("printStmt: invalid tuple assign"),
     _GZ_=
      caml_new_string
       ("printStmt: in c code generation there should not be initializations"),
     _G2_=caml_new_string("printStmt: invalid constant declaration"),
     _G9_=caml_new_string("printStmt: invalid tuple assign"),
     _Ht_=caml_new_string(")"),
     _Hu_=caml_new_string("("),
     _Hx_=caml_new_string(")"),
     _Hy_=caml_new_string("("),
     _HL_=caml_new_string(" }"),
     _HM_=caml_new_string("{ "),
     _GY_=caml_new_string(" "),
     _GV_=caml_new_string(" (&"),
     _GW_=caml_new_string(")["),
     _GX_=caml_new_string("]"),
     _GU_=caml_new_string(" &"),
     _GS_=caml_new_string(" "),
     _GT_=
      caml_new_string
       ("printLhsExp: All other cases should be already covered"),
     _GP_=caml_new_string("["),
     _GQ_=caml_new_string("] = "),
     _GR_=caml_new_string("; "),
     _GL_=caml_new_string(" = "),
     _GM_=caml_new_string(".field_"),
     _GN_=caml_new_string(";"),
     _GI_=caml_new_string(" = "),
     _GJ_=caml_new_string(".field_"),
     _GK_=caml_new_string(";"),
     _GO_=
      caml_new_string
       ("printLhsExpTuple: All other cases should be already covered\n"),
     _GH_=caml_new_string(" "),
     _GE_=caml_new_string(" "),
     _GF_=caml_new_string("["),
     _GG_=caml_new_string("]"),
     _GC_=caml_new_string("["),
     _GD_=caml_new_string("]"),
     _Gh_=caml_new_string("."),
     _It_=caml_new_string("(function(audioContext) {"),
     _Iu_=caml_new_string("   var code = function () {"),
     _Iv_=caml_new_string("      "),
     _Iw_=caml_new_string("      "),
     _Ix_=caml_new_string("      this.context = this."),
     _Iy_=caml_new_string("_process_init();"),
     _Iz_=caml_new_string("      this.default = function () { this."),
     _IA_=caml_new_string("_default(this.context); }"),
     _IB_=caml_new_string("      };"),
     _IC_=caml_new_string("   var processor = new code ();"),
     _ID_=
      caml_new_string("   var node = audioContext.createScriptProcessor(0, "),
     _IE_=caml_new_string(", "),
     _IF_=caml_new_string(");"),
     _IG_=caml_new_string("   node.inputs = "),
     _IH_=caml_new_string(";"),
     _II_=caml_new_string("   node.outputs = "),
     _IJ_=caml_new_string(";"),
     _IK_=caml_new_string("   node.onaudioprocess = function (e) {"),
     _IL_=caml_new_string("   }"),
     _IM_=caml_new_string("   return node;"),
     _IN_=caml_new_string("   })"),
     _Iq_=caml_new_string("var out_"),
     _Ir_=caml_new_string(" = e.outputBuffer.getChannelData("),
     _Is_=caml_new_string(");"),
     _In_=caml_new_string("var in_"),
     _Io_=caml_new_string(" = e.inputBuffer.getChannelData("),
     _Ip_=caml_new_string(");"),
     _Ii_=
      caml_new_string
       ("   node.controlChange = function(control,value,channel) {"),
     _Ij_=caml_new_string("      processor."),
     _Ik_=caml_new_string("_controlChange("),
     _Il_=caml_new_string(");"),
     _Im_=caml_new_string("   }"),
     _Ih_=caml_new_string("processor.context"),
     _H$_=
      caml_new_string("   node.noteOn = function(note, velocity, channel){"),
     _Ia_=caml_new_string("      if(velocity > 0) processor."),
     _Ib_=caml_new_string("_noteOn("),
     _Ic_=caml_new_string(");"),
     _Id_=caml_new_string("      else processor."),
     _Ie_=caml_new_string("_noteOff("),
     _If_=caml_new_string(");"),
     _Ig_=caml_new_string("   }"),
     _H6_=caml_new_string("   node.noteOff = function(note, channel) {"),
     _H7_=caml_new_string("      processor."),
     _H8_=caml_new_string("_noteOff("),
     _H9_=caml_new_string(");"),
     _H__=caml_new_string("   }"),
     _H5_=caml_new_string("processor.context"),
     _H4_=caml_new_string("processor.context"),
     _HV_=caml_new_string("for (var n = 0; n < e.inputBuffer.length; n++) {"),
     _HW_=caml_new_string("          var ret = processor."),
     _HX_=caml_new_string("_process("),
     _HY_=caml_new_string(");"),
     _HZ_=caml_new_string(" "),
     _H0_=caml_new_string("}"),
     _H2_=caml_new_string("out_0[n] = "),
     _H3_=caml_new_string(";"),
     _HS_=caml_new_string("out_"),
     _HT_=caml_new_string("[n] = "),
     _HU_=caml_new_string(";"),
     _HR_=caml_new_string("ret.field_"),
     _HQ_=caml_new_string("ret"),
     _HP_=caml_new_string("processor.context"),
     _HN_=caml_new_string("in_"),
     _HO_=caml_new_string("[n]"),
     _H1_=caml_new_string("ret"),
     _JT_=caml_new_string("{ "),
     _JU_=caml_new_string(" }"),
     _JP_=caml_new_string("("),
     _JQ_=caml_new_string("?"),
     _JR_=caml_new_string(":"),
     _JS_=caml_new_string(")"),
     _JN_=caml_new_string("("),
     _JO_=caml_new_string(")"),
     _JL_=caml_new_string(" "),
     _JM_=caml_new_string(" "),
     _JI_=caml_new_string("("),
     _JJ_=caml_new_string(" "),
     _JK_=caml_new_string(")"),
     _JF_=caml_new_string("this."),
     _JG_=caml_new_string("("),
     _JH_=caml_new_string(")"),
     _JD_=caml_new_string("["),
     _JE_=caml_new_string("]"),
     _Jx_=caml_new_string("("),
     _Jy_=caml_new_string(")"),
     _Jv_=caml_new_string("("),
     _Jw_=caml_new_string("|0)"),
     _Jz_=caml_new_string("true"),
     _JA_=caml_new_string("false"),
     _JB_=caml_new_string('"'),
     _JC_=caml_new_string('"'),
     _JV_=caml_new_string(" : "),
     _KO_=caml_new_string("if("),
     _KP_=caml_new_string(")"),
     _KL_=caml_new_string("if("),
     _KM_=caml_new_string(")"),
     _KN_=caml_new_string("else"),
     _KJ_=caml_new_string("{"),
     _KK_=caml_new_string("}"),
     _KH_=caml_new_string("while("),
     _KI_=caml_new_string(")"),
     _KF_=caml_new_string("return "),
     _KG_=caml_new_string(";"),
     _Ky_=caml_new_string("this."),
     _Kz_=caml_new_string(" = function("),
     _KA_=caml_new_string(") { "),
     _KB_=caml_new_string("}"),
     _KC_=caml_new_string("this."),
     _KD_=caml_new_string(" = function("),
     _KE_=caml_new_string(")"),
     _Kv_=caml_new_string(" = "),
     _Kw_=caml_new_string(";"),
     _Kq_=caml_new_string("var "),
     _Kr_=caml_new_string(" = "),
     _Ks_=caml_new_string(";"),
     _Ko_=caml_new_string(";"),
     _Kk_=caml_new_string("var "),
     _Kl_=caml_new_string(" = "),
     _Km_=caml_new_string(";"),
     _Kh_=caml_new_string("var "),
     _Ki_=caml_new_string(" = "),
     _Kj_=caml_new_string(";"),
     _Kf_=caml_new_string("printStmt: invalid variable declaration"),
     _Kg_=[0,caml_new_string("int")],
     _Kn_=caml_new_string("printStmt: invalid tuple assign"),
     _Kp_=[0,caml_new_string("int")],
     _Kt_=caml_new_string("printStmt: invalid constant assign"),
     _Ku_=[0,caml_new_string("int")],
     _Kx_=caml_new_string("printStmt: invalid tuple assign"),
     _KQ_=[0,caml_new_string("js")],
     _J6_=caml_new_string("bool"),
     _J7_=caml_new_string("float"),
     _J8_=caml_new_string("int"),
     _J9_=caml_new_string("real"),
     _J__=caml_new_string("unit"),
     _Ka_=caml_new_string("0"),
     _Kb_=caml_new_string("0.0"),
     _Kc_=caml_new_string("(0|0)"),
     _Kd_=caml_new_string("0.0"),
     _Ke_=caml_new_string("false"),
     _J$_=caml_new_string("{}"),
     _J4_=caml_new_string("("),
     _J5_=caml_new_string("|0)"),
     _J0_=caml_new_string(" = "),
     _J1_=caml_new_string(".field_"),
     _J2_=caml_new_string("; "),
     _JW_=caml_new_string("var "),
     _JX_=caml_new_string(" = "),
     _JY_=caml_new_string(".field_"),
     _JZ_=caml_new_string("; "),
     _J3_=
      caml_new_string
       ("printLhsExp: All other cases should be already covered"),
     _Js_=caml_new_string("_ctx"),
     _Jt_=[0,[0,[0,caml_new_string("any")]],caml_new_string("_ctx")],
     _Ju_=[0,[0,[0,[0,caml_new_string("any")]],caml_new_string("_ctx")],0],
     _Jn_=caml_new_string("_process"),
     _Jo_=caml_new_string("_noteOn"),
     _Jp_=caml_new_string("_noteOff"),
     _Jq_=caml_new_string("_controlChange"),
     _Jr_=caml_new_string("_default"),
     _Jk_=caml_new_string("browser"),
     _Jl_=caml_new_string("node"),
     _Jm_=caml_new_string("webaudio"),
     _Jj_=caml_new_string("exports.vultProcess = function ()"),
     _Ji_=caml_new_string("function vultProcess()"),
     _IR_=caml_new_string(" {"),
     _IS_=caml_new_string("             "),
     _IT_=caml_new_string("             this."),
     _IU_=caml_new_string("_process_init = null;"),
     _IV_=caml_new_string("             this."),
     _IW_=caml_new_string("_default = null;"),
     _IX_=caml_new_string("             "),
     _IY_=caml_new_string("             if(this."),
     _IZ_=caml_new_string("_process_init)  this.context =  this."),
     _I0_=caml_new_string("_process_init(); else this.context = {};"),
     _I1_=caml_new_string("             if(this."),
     _I2_=caml_new_string("_default)      this."),
     _I3_=caml_new_string("_default(this.context);"),
     _I4_=
      caml_new_string
       ("             this.liveNoteOn        = function(note,velocity,channel) { if(this."),
     _I5_=caml_new_string("_noteOn)        this."),
     _I6_=caml_new_string("_noteOn(this.context,note,velocity,channel); };"),
     _I7_=
      caml_new_string
       ("             this.liveNoteOff       = function(note,velocity,channel) { if(this."),
     _I8_=caml_new_string("_noteOff)       this."),
     _I9_=caml_new_string("_noteOff(this.context,note,velocity,channel); };"),
     _I__=
      caml_new_string
       ("             this.liveControlChange = function(note,velocity,channel) { if(this."),
     _I$_=caml_new_string("_controlChange) this."),
     _Ja_=
      caml_new_string
       ("_controlChange(this.context,note,velocity,channel); };"),
     _Jb_=
      caml_new_string
       ("             this.liveProcess       = function(input)         { if(this."),
     _Jc_=caml_new_string("_process)       return this."),
     _Jd_=caml_new_string("_process(this.context,input); else return 0; };"),
     _Je_=
      caml_new_string
       ("             this.liveDefault       = function() { if(this."),
     _Jf_=caml_new_string("_default)      return this."),
     _Jg_=caml_new_string("_default(this.context); };"),
     _Jh_=caml_new_string("             }"),
     _IO_=caml_new_string("."),
     _IQ_=
      caml_new_string
       (" // Vult runtime functions\n            this.random = function()         { return Math.random(); };\n            this.irandom = function()        { return Math.floor(Math.random() * 4294967296); };\n            this.eps  = function()           { return 1e-18 };\n            this.clip = function(x,low,high) { return x<low?low:(x>high?high:x); };\n            this.not  = function(x)          { return x==0?1:0; };\n            this.real = function(x)          { return x; };\n            this.int  = function(x)          { return x|0; };\n            this.sin  = function(x)          { return Math.sin(x); };\n            this.cos  = function(x)          { return Math.cos(x); };\n            this.abs  = function(x)          { return Math.abs(x); };\n            this.exp  = function(x)          { return Math.exp(x); };\n            this.floor= function(x)          { return Math.floor(x); };\n            this.tan  = function(x)          { return Math.tan(x); };\n            this.tanh = function(x)          { return Math.tanh(x); };\n            this.sqrt = function(x)          { return x; };\n            this.set  = function(a,i,v)      { a[i]=v; };\n            this.get  = function(a,i)        { return a[i]; };\n            this.int_to_float = function(i){ return i; };\n            this.float_to_int = function(i){ return Math.floor(i); };\n            this.makeArray = function(size,v){ var a = new Array(size); for(var i=0;i<size;i++) a[i]=v; return a; };\n            this.wrap_array = function(a) { return a; }\n            this.log = function(x) { console.log(x); }\n         "),
     _KR_=caml_new_string("bool"),
     _KS_=caml_new_string("float"),
     _KT_=caml_new_string("int"),
     _KU_=caml_new_string("real"),
     _KV_=caml_new_string("uint8_t"),
     _KW_=caml_new_string("void"),
     _KX_=caml_new_string("unknown type "),
     _KY_=caml_new_string(""),
     _K1_=caml_new_string("e-m:o-i64:64-f80:128-n8:16:32:64-S128"),
     _K3_=caml_new_string("name"),
     _K4_=[0,caml_new_string("ll")],
     _K0_=caml_new_string("_entry"),
     _KZ_=caml_new_string("invalid"),
     _Mt_=caml_new_string("{ "),
     _Mu_=caml_new_string(" }"),
     _Mp_=caml_new_string("(ternary("),
     _Mq_=caml_new_string(", "),
     _Mr_=caml_new_string(", "),
     _Ms_=caml_new_string(")"),
     _Mn_=caml_new_string("("),
     _Mo_=caml_new_string(")"),
     _Ml_=caml_new_string(" "),
     _Mm_=caml_new_string(" "),
     _Mi_=caml_new_string("("),
     _Mj_=caml_new_string(" "),
     _Mk_=caml_new_string(")"),
     _Md_=caml_new_string("this."),
     _Me_=caml_new_string("("),
     _Mf_=caml_new_string(")"),
     _Mg_=caml_new_string("(not "),
     _Mh_=caml_new_string(")"),
     _L$_=caml_new_string('ffi.new("double['),
     _Ma_=caml_new_string(']", {'),
     _Mb_=caml_new_string("})"),
     _L5_=caml_new_string("("),
     _L6_=caml_new_string(")"),
     _L7_=caml_new_string("true"),
     _L8_=caml_new_string("false"),
     _L9_=caml_new_string('"'),
     _L__=caml_new_string('"'),
     _Mc_=caml_new_string("not"),
     _Mv_=caml_new_string(" = "),
     _Nl_=caml_new_string("if "),
     _Nm_=caml_new_string(" then"),
     _Nn_=caml_new_string("end"),
     _Nh_=caml_new_string("if "),
     _Ni_=caml_new_string(" then"),
     _Nj_=caml_new_string("else"),
     _Nk_=caml_new_string("end"),
     _Ne_=caml_new_string("while "),
     _Nf_=caml_new_string(" do"),
     _Ng_=caml_new_string("end"),
     _Nc_=caml_new_string("return "),
     _Nd_=caml_new_string(";"),
     _M6_=caml_new_string("function this."),
     _M7_=caml_new_string("("),
     _M8_=caml_new_string(")"),
     _M9_=caml_new_string("end"),
     _M__=caml_new_string("function this."),
     _M$_=caml_new_string("("),
     _Na_=caml_new_string(")"),
     _Nb_=caml_new_string("end"),
     _M3_=caml_new_string(" = "),
     _M4_=caml_new_string(";"),
     _MZ_=caml_new_string("local "),
     _M0_=caml_new_string(" = "),
     _M1_=caml_new_string(";"),
     _MY_=caml_new_string(";"),
     _MU_=caml_new_string("local "),
     _MV_=caml_new_string(" = "),
     _MW_=caml_new_string(";"),
     _MR_=caml_new_string("local "),
     _MS_=caml_new_string(" = "),
     _MT_=caml_new_string(";"),
     _MQ_=caml_new_string("printStmt: invalid variable declaration"),
     _MX_=caml_new_string("printStmt: invalid tuple assign"),
     _M2_=caml_new_string("printStmt: invalid constant assign"),
     _M5_=caml_new_string("printStmt: invalid tuple assign"),
     _No_=[0,caml_new_string("lua")],
     _MF_=caml_new_string("bool"),
     _MG_=caml_new_string("float"),
     _MH_=caml_new_string("int"),
     _MI_=caml_new_string("real"),
     _MJ_=caml_new_string("unit"),
     _ML_=caml_new_string("0"),
     _MM_=caml_new_string("0.0"),
     _MN_=caml_new_string("0"),
     _MO_=caml_new_string("0.0"),
     _MP_=caml_new_string("false"),
     _MK_=caml_new_string("{}"),
     _MB_=caml_new_string(" = "),
     _MC_=caml_new_string("["),
     _MD_=caml_new_string("]; "),
     _Mx_=caml_new_string("local "),
     _My_=caml_new_string(" = "),
     _Mz_=caml_new_string("["),
     _MA_=caml_new_string("]; "),
     _Mw_=caml_new_string("."),
     _ME_=
      caml_new_string
       ("printLhsExp: All other cases should be already covered"),
     _L2_=caml_new_string("_ctx"),
     _L3_=[0,[0,[0,caml_new_string("any")]],caml_new_string("_ctx")],
     _L4_=[0,[0,[0,[0,caml_new_string("any")]],caml_new_string("_ctx")],0],
     _LX_=caml_new_string("_process"),
     _LY_=caml_new_string("_noteOn"),
     _LZ_=caml_new_string("_noteOff"),
     _L0_=caml_new_string("_controlChange"),
     _L1_=caml_new_string("_default"),
     _LW_=caml_new_string("default"),
     _K__=caml_new_string("local this = {}"),
     _K$_=caml_new_string('local ffi = require("ffi")'),
     _La_=
      caml_new_string
       ("function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end"),
     _Lb_=caml_new_string("function this.eps()             return 1e-18; end"),
     _Lc_=
      caml_new_string
       ("function this.random()          return math.random(); end"),
     _Ld_=
      caml_new_string
       ("function this.irandom()         return math.floor(math.random() * 4294967296); end"),
     _Le_=
      caml_new_string
       ("function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end"),
     _Lf_=caml_new_string("function this.real(x)           return x; end"),
     _Lg_=
      caml_new_string
       ("function this.int(x)            local int_part,_ = math.modf(x) return int_part; end"),
     _Lh_=
      caml_new_string
       ("function this.sin(x)            return math.sin(x); end"),
     _Li_=
      caml_new_string
       ("function this.cos(x)            return math.cos(x); end"),
     _Lj_=
      caml_new_string
       ("function this.abs(x)            return math.abs(x); end"),
     _Lk_=
      caml_new_string
       ("function this.exp(x)            return math.exp(x); end"),
     _Ll_=
      caml_new_string
       ("function this.floor(x)          return math.floor(x); end"),
     _Lm_=
      caml_new_string
       ("function this.tan(x)            return math.tan(x); end"),
     _Ln_=
      caml_new_string
       ("function this.tanh(x)           return math.tanh(x); end"),
     _Lo_=caml_new_string("function this.sqrt(x)           return x; end"),
     _Lp_=caml_new_string("function this.set(a,i,v)        a[i]=v; end"),
     _Lq_=caml_new_string("function this.get(a,i)          return a[i]; end"),
     _Lr_=
      caml_new_string
       ('function this.makeArray(size,v) local a = ffi.new("double[?]",size); for i=0,size-1 do a[i]=v end return a; end'),
     _Ls_=caml_new_string("function this.wrap_array(a)     return a; end"),
     _Lt_=caml_new_string("function this.process("),
     _Lu_=caml_new_string(") return this."),
     _Lv_=caml_new_string("_process("),
     _Lw_=caml_new_string(") end"),
     _Lx_=caml_new_string("function this.noteOn("),
     _Ly_=caml_new_string(") return this."),
     _Lz_=caml_new_string("_noteOn("),
     _LA_=caml_new_string(") end"),
     _LB_=caml_new_string("function this.noteOff("),
     _LC_=caml_new_string(") return this."),
     _LD_=caml_new_string("_noteOff("),
     _LE_=caml_new_string(") end"),
     _LF_=caml_new_string("function this.controlChange("),
     _LG_=caml_new_string(") return this."),
     _LH_=caml_new_string("_controlChange("),
     _LI_=caml_new_string(") end"),
     _LJ_=caml_new_string("function this.init() return this."),
     _LK_=caml_new_string("_process_init() end"),
     _LL_=caml_new_string("function this.default(ctx) return this."),
     _LM_=caml_new_string("_default(ctx) end"),
     _LN_=caml_new_string("this.config = { inputs = "),
     _LO_=caml_new_string(", outputs = "),
     _LP_=caml_new_string(", noteon_inputs = "),
     _LQ_=caml_new_string(", noteoff_inputs = "),
     _LR_=caml_new_string(", controlchange_inputs = "),
     _LS_=caml_new_string(", is_active = "),
     _LT_=caml_new_string(" }"),
     _LU_=caml_new_string("return this"),
     _K8_=caml_new_string("in"),
     _K7_=caml_new_string("ctx"),
     _K9_=caml_new_string("true"),
     _LV_=caml_new_string("false"),
     _K5_=caml_new_string("."),
     _NQ_=caml_new_string("float"),
     _NR_=caml_new_string("fixed"),
     _NS_=caml_new_string("js"),
     _NT_=caml_new_string("lua"),
     _NH_=
      [0,
       [11,
        caml_new_string("-0x"),
        [5,
         6,
         0,
         0,
         [11,caml_new_string(" /* "),[8,0,0,0,[11,caml_new_string(" */"),0]]]]],
       caml_new_string("-0x%lx /* %f */")],
     _NI_=
      [0,
       [11,
        caml_new_string("0x"),
        [5,
         6,
         0,
         0,
         [11,caml_new_string(" /* "),[8,0,0,0,[11,caml_new_string(" */"),0]]]]],
       caml_new_string("0x%lx /* %f */")],
     _Ny_=caml_new_string("f"),
     _Np_=
      [0,
       [0,caml_new_string("default"),caml_new_string("default_")],
       [0,[0,caml_new_string("switch"),caml_new_string("switch_")],0]],
     _Nq_=
      [0,
       [0,caml_new_string("real"),caml_new_string("float")],
       [0,
        [0,caml_new_string("unit"),caml_new_string("void")],
        [0,
         [0,caml_new_string("bool"),caml_new_string("uint8_t")],
         [0,[0,caml_new_string("int"),caml_new_string("int")],0]]]],
     _Nr_=
      [0,
       [0,
        [0,caml_new_string("float"),caml_new_string("int")],
        caml_new_string("float_to_int")],
       [0,
        [0,
         [0,caml_new_string("int"),caml_new_string("float")],
         caml_new_string("int_to_float")],
        0]],
     _Ns_=
      [0,
       [0,
        [0,caml_new_string("%"),caml_new_string("float")],
        caml_new_string("fmodf")],
       0],
     _Nt_=
      [0,
       [0,
        [0,caml_new_string("<>"),caml_new_string("float")],
        caml_new_string("!=")],
       [0,
        [0,
         [0,caml_new_string("<>"),caml_new_string("int")],
         caml_new_string("!=")],
        [0,
         [0,
          [0,caml_new_string("<>"),caml_new_string("uint8_t")],
          caml_new_string("!=")],
         0]]],
     _Nu_=
      caml_list_of_js_array
       ([[0,
          [0,caml_new_string("abs"),caml_new_string("float")],
          caml_new_string("fabsf")],
         [0,
          [0,caml_new_string("exp"),caml_new_string("float")],
          caml_new_string("expf")],
         [0,
          [0,caml_new_string("floor"),caml_new_string("float")],
          caml_new_string("floorf")],
         [0,
          [0,caml_new_string("max"),caml_new_string("float")],
          caml_new_string("fmax")],
         [0,
          [0,caml_new_string("min"),caml_new_string("float")],
          caml_new_string("fmin")],
         [0,
          [0,caml_new_string("sin"),caml_new_string("float")],
          caml_new_string("sinf")],
         [0,
          [0,caml_new_string("cos"),caml_new_string("float")],
          caml_new_string("cosf")],
         [0,
          [0,caml_new_string("tan"),caml_new_string("float")],
          caml_new_string("tanf")],
         [0,
          [0,caml_new_string("tanh"),caml_new_string("float")],
          caml_new_string("tanhf")],
         [0,
          [0,caml_new_string("sqrt"),caml_new_string("float")],
          caml_new_string("sqrtf")],
         [0,
          [0,caml_new_string("clip"),caml_new_string("float")],
          caml_new_string("float_clip")],
         [0,
          [0,caml_new_string("clip"),caml_new_string("int")],
          caml_new_string("int_clip")],
         [0,
          [0,caml_new_string("set"),caml_new_string("float")],
          caml_new_string("float_set")],
         [0,
          [0,caml_new_string("set"),caml_new_string("int")],
          caml_new_string("int_set")],
         [0,
          [0,caml_new_string("set"),caml_new_string("uint8_t")],
          caml_new_string("bool_set")],
         [0,
          [0,caml_new_string("get"),caml_new_string("float")],
          caml_new_string("float_get")],
         [0,
          [0,caml_new_string("get"),caml_new_string("int")],
          caml_new_string("int_get")],
         [0,
          [0,caml_new_string("get"),caml_new_string("uint8_t")],
          caml_new_string("bool_get")],
         [0,
          [0,caml_new_string("not"),caml_new_string("uint8_t")],
          caml_new_string("bool_not")],
         [0,
          [0,caml_new_string("eps"),caml_new_string("float")],
          caml_new_string("float_eps")],
         [0,
          [0,caml_new_string("random"),caml_new_string("float")],
          caml_new_string("float_random")],
         [0,
          [0,caml_new_string("wrap_array"),caml_new_string("float")],
          caml_new_string("float_wrap_array")],
         [0,
          [0,caml_new_string("log"),caml_new_string("float")],
          caml_new_string("float_print")],
         [0,
          [0,caml_new_string("log"),caml_new_string("int")],
          caml_new_string("int_print")],
         [0,
          [0,caml_new_string("log"),caml_new_string("uint8_t")],
          caml_new_string("bool_print")],
         [0,
          [0,caml_new_string("log"),caml_new_string("string")],
          caml_new_string("string_print")]]),
     _Nv_=
      [0,
       [0,caml_new_string("float"),caml_new_string("float_init_array")],
       [0,
        [0,caml_new_string("int"),caml_new_string("int_init_array")],
        [0,
         [0,caml_new_string("uint8_t"),caml_new_string("bool_init_array")],
         0]]],
     _Nw_=
      [0,
       [0,caml_new_string("float"),caml_new_string("float_copy_array")],
       [0,
        [0,caml_new_string("int"),caml_new_string("int_copy_array")],
        [0,
         [0,caml_new_string("uint8_t"),caml_new_string("bool_copy_array")],
         0]]],
     _Nz_=caml_new_string("float"),
     _NA_=[0,[0,caml_new_string("real"),caml_new_string("fix16_t")],0],
     _NB_=
      [0,
       [0,
        [0,caml_new_string("fix16_t"),caml_new_string("int")],
        caml_new_string("fix_to_int")],
       [0,
        [0,
         [0,caml_new_string("fix16_t"),caml_new_string("float")],
         caml_new_string("fix_to_float")],
        [0,
         [0,
          [0,caml_new_string("int"),caml_new_string("fix16_t")],
          caml_new_string("int_to_fix")],
         [0,
          [0,
           [0,caml_new_string("float"),caml_new_string("fix16_t")],
           caml_new_string("float_to_fix")],
          0]]]],
     _NC_=
      [0,
       [0,
        [0,caml_new_string("+"),caml_new_string("fix16_t")],
        caml_new_string("fix_add")],
       [0,
        [0,
         [0,caml_new_string("-"),caml_new_string("fix16_t")],
         caml_new_string("fix_sub")],
        [0,
         [0,
          [0,caml_new_string("*"),caml_new_string("fix16_t")],
          caml_new_string("fix_mul")],
         [0,
          [0,
           [0,caml_new_string("/"),caml_new_string("fix16_t")],
           caml_new_string("fix_div")],
          0]]]],
     _ND_=
      [0,
       [0,
        [0,caml_new_string("<>"),caml_new_string("fix16_t")],
        caml_new_string("!=")],
       0],
     _NE_=
      caml_list_of_js_array
       ([[0,
          [0,caml_new_string("abs"),caml_new_string("fix16_t")],
          caml_new_string("fix_abs")],
         [0,
          [0,caml_new_string("exp"),caml_new_string("fix16_t")],
          caml_new_string("fix_exp")],
         [0,
          [0,caml_new_string("floor"),caml_new_string("fix16_t")],
          caml_new_string("fix_floor")],
         [0,
          [0,caml_new_string("max"),caml_new_string("fix16_t")],
          caml_new_string("fix_max")],
         [0,
          [0,caml_new_string("min"),caml_new_string("fix16_t")],
          caml_new_string("fix_min")],
         [0,
          [0,caml_new_string("sin"),caml_new_string("fix16_t")],
          caml_new_string("fix_sin")],
         [0,
          [0,caml_new_string("cos"),caml_new_string("fix16_t")],
          caml_new_string("fix_cos")],
         [0,
          [0,caml_new_string("tan"),caml_new_string("fix16_t")],
          caml_new_string("fix_tan")],
         [0,
          [0,caml_new_string("tanh"),caml_new_string("fix16_t")],
          caml_new_string("fix_tanh")],
         [0,
          [0,caml_new_string("sqrt"),caml_new_string("fix16_t")],
          caml_new_string("fix_sqrt")],
         [0,
          [0,caml_new_string("clip"),caml_new_string("fix16_t")],
          caml_new_string("fix_clip")],
         [0,
          [0,caml_new_string("set"),caml_new_string("fix16_t")],
          caml_new_string("fix_set")],
         [0,
          [0,caml_new_string("get"),caml_new_string("fix16_t")],
          caml_new_string("fix_get")],
         [0,
          [0,caml_new_string("eps"),caml_new_string("fix16_t")],
          caml_new_string("fix_eps")],
         [0,
          [0,caml_new_string("random"),caml_new_string("fix16_t")],
          caml_new_string("fix_random")],
         [0,
          [0,caml_new_string("wrap_array"),caml_new_string("fix16_t")],
          caml_new_string("fix_wrap_array")],
         [0,
          [0,caml_new_string("log"),caml_new_string("fix16_t")],
          caml_new_string("fix_print")]]),
     _NF_=
      [0,[0,caml_new_string("fix16_t"),caml_new_string("fix_init_array")],0],
     _NG_=
      [0,[0,caml_new_string("fix16_t"),caml_new_string("fix_copy_array")],0],
     _NJ_=caml_new_string("fix16_t"),
     _NK_=
      caml_list_of_js_array
       ([[0,caml_new_string("default"),caml_new_string("default_")],
         [0,caml_new_string("switch"),caml_new_string("switch_")],
         [0,caml_new_string("break"),caml_new_string("break_")],
         [0,caml_new_string("case"),caml_new_string("case_")],
         [0,caml_new_string("catch"),caml_new_string("catch_")],
         [0,caml_new_string("class"),caml_new_string("class_")],
         [0,caml_new_string("const"),caml_new_string("const_")],
         [0,caml_new_string("continue"),caml_new_string("continue_")],
         [0,caml_new_string("debugger"),caml_new_string("debugger_")],
         [0,caml_new_string("default"),caml_new_string("default_")],
         [0,caml_new_string("delete"),caml_new_string("delete_")],
         [0,caml_new_string("do"),caml_new_string("do_")],
         [0,caml_new_string("else"),caml_new_string("else_")],
         [0,caml_new_string("export"),caml_new_string("export_")],
         [0,caml_new_string("extends"),caml_new_string("extends_")],
         [0,caml_new_string("finally"),caml_new_string("finally_")],
         [0,caml_new_string("for"),caml_new_string("for_")],
         [0,caml_new_string("function"),caml_new_string("function_")],
         [0,caml_new_string("if"),caml_new_string("if_")],
         [0,caml_new_string("import"),caml_new_string("import_")],
         [0,caml_new_string("in"),caml_new_string("in_")],
         [0,caml_new_string("instanceof"),caml_new_string("instanceof_")],
         [0,caml_new_string("new"),caml_new_string("new_")],
         [0,caml_new_string("return"),caml_new_string("return_")],
         [0,caml_new_string("super"),caml_new_string("super_")],
         [0,caml_new_string("switch"),caml_new_string("switch_")],
         [0,caml_new_string("this"),caml_new_string("this_")],
         [0,caml_new_string("throw"),caml_new_string("throw_")],
         [0,caml_new_string("try"),caml_new_string("try_")],
         [0,caml_new_string("typeof"),caml_new_string("typeof_")],
         [0,caml_new_string("var"),caml_new_string("var_")],
         [0,caml_new_string("void"),caml_new_string("void_")],
         [0,caml_new_string("while"),caml_new_string("while_")],
         [0,caml_new_string("with"),caml_new_string("with_")],
         [0,caml_new_string("yield"),caml_new_string("yield_")],
         [0,caml_new_string("enum"),caml_new_string("enum_")],
         [0,caml_new_string("implements"),caml_new_string("implements_")],
         [0,caml_new_string("interface"),caml_new_string("interface_")],
         [0,caml_new_string("let"),caml_new_string("let_")],
         [0,caml_new_string("package"),caml_new_string("package_")],
         [0,caml_new_string("private"),caml_new_string("private_")],
         [0,caml_new_string("protected"),caml_new_string("protected_")],
         [0,caml_new_string("public"),caml_new_string("public_")],
         [0,caml_new_string("static"),caml_new_string("static_")],
         [0,caml_new_string("await"),caml_new_string("await_")],
         [0,caml_new_string("abstract"),caml_new_string("abstract_")],
         [0,caml_new_string("boolean"),caml_new_string("boolean_")],
         [0,caml_new_string("byte"),caml_new_string("byte_")],
         [0,caml_new_string("char"),caml_new_string("char_")],
         [0,caml_new_string("double"),caml_new_string("double_")],
         [0,caml_new_string("final"),caml_new_string("final_")],
         [0,caml_new_string("float"),caml_new_string("float_")],
         [0,caml_new_string("goto"),caml_new_string("goto_")],
         [0,caml_new_string("int"),caml_new_string("int_")],
         [0,caml_new_string("long"),caml_new_string("long_")],
         [0,caml_new_string("native"),caml_new_string("native_")],
         [0,caml_new_string("short"),caml_new_string("short_")],
         [0,caml_new_string("synchronized"),caml_new_string("synchronized_")],
         [0,caml_new_string("throws"),caml_new_string("throws_")],
         [0,caml_new_string("transient"),caml_new_string("transient_")],
         [0,caml_new_string("volatile"),caml_new_string("volatile_")],
         [0,caml_new_string("undefined"),caml_new_string("undefined_")],
         [0,caml_new_string("null"),caml_new_string("null_")],
         [0,caml_new_string("NaN"),caml_new_string("NaN_")],
         [0,caml_new_string("true"),caml_new_string("true_")],
         [0,caml_new_string("false"),caml_new_string("false_")]]),
     _NL_=
      [0,
       [0,
        [0,caml_new_string("<>"),caml_new_string("real")],
        caml_new_string("!=")],
       [0,
        [0,
         [0,caml_new_string("<>"),caml_new_string("int")],
         caml_new_string("!=")],
        [0,
         [0,
          [0,caml_new_string("<>"),caml_new_string("bool")],
          caml_new_string("!=")],
         0]]],
     _NM_=
      [0,
       [0,caml_new_string("int"),caml_new_string("makeArray")],
       [0,
        [0,caml_new_string("real"),caml_new_string("makeArray")],
        [0,[0,caml_new_string("bool"),caml_new_string("makeArray")],0]]],
     _NN_=
      caml_list_of_js_array
       ([[0,caml_new_string("and"),caml_new_string("and_")],
         [0,caml_new_string("break"),caml_new_string("break_")],
         [0,caml_new_string("do"),caml_new_string("do_")],
         [0,caml_new_string("elseif"),caml_new_string("elseif_")],
         [0,caml_new_string("end"),caml_new_string("end_")],
         [0,caml_new_string("for"),caml_new_string("for_")],
         [0,caml_new_string("function"),caml_new_string("function_")],
         [0,caml_new_string("in"),caml_new_string("in_")],
         [0,caml_new_string("local"),caml_new_string("local_")],
         [0,caml_new_string("nil"),caml_new_string("nil_")],
         [0,caml_new_string("or"),caml_new_string("or_")],
         [0,caml_new_string("repeat"),caml_new_string("repeat_")],
         [0,caml_new_string("return"),caml_new_string("return_")],
         [0,caml_new_string("until"),caml_new_string("until_")]]),
     _NO_=
      [0,
       [0,
        [0,caml_new_string("<>"),caml_new_string("real")],
        caml_new_string("~=")],
       [0,
        [0,
         [0,caml_new_string("<>"),caml_new_string("int")],
         caml_new_string("~=")],
        [0,
         [0,
          [0,caml_new_string("<>"),caml_new_string("bool")],
          caml_new_string("~=")],
         [0,
          [0,
           [0,caml_new_string("&&"),caml_new_string("bool")],
           caml_new_string("and")],
          [0,
           [0,
            [0,caml_new_string("||"),caml_new_string("bool")],
            caml_new_string("or")],
           0]]]]],
     _NP_=
      [0,
       [0,caml_new_string("int"),caml_new_string("makeArray")],
       [0,
        [0,caml_new_string("real"),caml_new_string("makeArray")],
        [0,[0,caml_new_string("bool"),caml_new_string("makeArray")],0]]],
     _N5_=caml_new_string("array"),
     _N6_=caml_new_string("tuple"),
     _N4_=
      caml_new_string
       ("ProgToCode.convertType: unsupported type in c code generation: "),
     _On_=caml_new_string("field_"),
     _Oj_=
      caml_new_string
       ("ProgToCode.convertExp: Empty expressions are not allowed"),
     _Ok_=caml_new_string("real"),
     _Ol_=caml_new_string("int"),
     _Om_=caml_new_string("bool"),
     _Oo_=
      caml_new_string
       ("ProgToCode.convertExp: Sequences are not yet supported for js"),
     _Op_=
      caml_new_string
       ("ProgToCode.convertLhsExp: everything should have types"),
     _Os_=
      caml_new_string
       ("ProgToCode.convertStmt: val should not have initializations"),
     _Ot_=caml_new_string("CodeC.convertStmt: everything should have types"),
     _Ou_=caml_new_string("makeArray"),
     _Ov_=caml_new_string("set"),
     _Ow_=caml_new_string(""),
     _Ox_=caml_new_string("CodeC.convertStmt: invalid alias type"),
     _Oy_=caml_new_string("CodeC.convertStmt: invalid alias type"),
     _Oz_=[0,0],
     _Oq_=caml_new_string("ProgToCode.getRecordFiled: Invalid input"),
     _Or_=caml_new_string("field_"),
     _Oi_=caml_new_string("ProgToCode.attrType: everything should have types"),
     _Of_=caml_new_string("set"),
     _Og_=caml_new_string("set"),
     _Oh_=caml_new_string("Invalid array type "),
     _Od_=caml_new_string("Invalid array type "),
     _Oe_=caml_new_string("Invalid array type "),
     _Ob_=caml_new_string("Invalid array type "),
     _Oc_=caml_new_string("Invalid array type "),
     _Oa_=
      caml_new_string
       ("ProgToCode.getFunctionSetType: this is not a call to 'set'"),
     _N$_=
      caml_new_string
       ("ProgToCode.makeNestedCall: invalid number of arguments"),
     _N9_=caml_new_string(" -> "),
     _N__=caml_new_string("ProgToCode.getCast: invalid casting of types "),
     _N7_=
      caml_new_string
       ("ProgToCode.convertTypedId: everything should have types"),
     _N8_=caml_new_string("."),
     _N3_=
      caml_new_string
       ("ProgToCode.convertSingleVarId: this should be a single identifier"),
     _N2_=caml_new_string("_"),
     _N1_=caml_new_string("makeOpAtomic: invalid input"),
     _N0_=caml_new_string("$r"),
     _NW_=[0,caml_new_string("int")],
     _NX_=[0,caml_new_string("real")],
     _NY_=[0,caml_new_string("bool")],
     _NZ_=[0,caml_new_string("string")],
     _NU_=caml_new_string("unit"),
     _NV_=caml_new_string("void"),
     _Ps_=caml_new_string("size"),
     _Pq_=caml_new_string("array"),
     _Pp_=
      caml_new_string
       ("ProcessArrays.getArraySize: the argument is not an array"),
     _Pr_=
      caml_new_string
       ("ProcessArrays.getArraySize: type inference should have put a type here"),
     _Pk_=caml_new_string("_array_"),
     _Pl_=caml_new_string("_call_"),
     _Pm_=caml_new_string("_tuple_"),
     _Pi_=caml_new_string("_"),
     _Pj_=caml_new_string("_tmp_"),
     _Pg_=caml_new_string("_cond_"),
     _Pe_=caml_new_string("_if_"),
     _OH_=[0,0,0],
     _OQ_=caml_new_string("*"),
     _OR_=caml_new_string("*"),
     _OS_=caml_new_string("+"),
     _OT_=caml_new_string("||"),
     _OU_=caml_new_string("||"),
     _OV_=caml_new_string("&&"),
     _OW_=caml_new_string("&&"),
     _OY_=caml_new_string("-"),
     _OZ_=caml_new_string("*"),
     _O0_=caml_new_string("*"),
     _O1_=caml_new_string("-"),
     _O2_=caml_new_string("/"),
     _O8_=caml_new_string("*"),
     _O9_=caml_new_string("+"),
     _Pa_=caml_new_string("-"),
     _Pb_=caml_new_string("+"),
     _O__=caml_new_string("-"),
     _O$_=caml_new_string("+"),
     _O3_=caml_new_string("+"),
     _O5_=caml_new_string("*"),
     _O6_=caml_new_string("||"),
     _O7_=caml_new_string("&&"),
     _O4_=caml_new_string("Passes.Simplify.exp"),
     _OX_=caml_new_string("Simplify.negNum: not a number"),
     _OL_=caml_new_string("&&"),
     _OM_=caml_new_string("*"),
     _ON_=caml_new_string("+"),
     _OO_=caml_new_string("||"),
     _OP_=caml_new_string("Simplify.applyOp: invalid operation on"),
     _OJ_=caml_new_string("int"),
     _OK_=caml_new_string("real"),
     _OI_=caml_new_string("Simplify.minusOne: invalid numeric value"),
     _OD_=
      [0,
       [11,
        caml_new_string
         ("The type of this expression could not be infered. Add a type annotation."),
        0],
       caml_new_string
        ("The type of this expression could not be infered. Add a type annotation.")],
     _OB_=
      [0,
       [11,
        caml_new_string("The type of variable '"),
        [2,
         0,
         [11,caml_new_string("' cannot be infered. Add a type annotation."),0]]],
       caml_new_string
        ("The type of variable '%s' cannot be infered. Add a type annotation.")],
     _OA_=caml_new_string("UnlinkTypes.vtype_c"),
     _OC_=caml_new_string("ReportUnboundTypes.lhs_exp"),
     _OE_=caml_new_string("ReportUnboundTypes.exp"),
     _OF_=caml_new_string("ReportUnboundTypes.typed_id"),
     _OG_=caml_new_string("SplitMem.stmt_x"),
     _Pc_=caml_new_string("Simplify.exp"),
     _Pd_=caml_new_string("Simplify.stmt_x"),
     _Pf_=caml_new_string("BindIfExp.exp"),
     _Ph_=caml_new_string("SimplifyIfExp.stmt_x"),
     _Pn_=caml_new_string("BindComplexHelper.exp"),
     _Po_=caml_new_string("BindComplexExpressions.stmt_x"),
     _Pt_=caml_new_string("ProcessArrays.exp"),
     _P4_=caml_new_string("Fitting is only implemented for second order"),
     _PM_=[0,1,1],
     _PN_=[0,1,2],
     _PO_=[0,1,3],
     _PP_=[0,2,1],
     _PQ_=[0,2,2],
     _PR_=[0,2,3],
     _PS_=[0,3,1],
     _PT_=[0,3,2],
     _PU_=[0,3,3],
     _PV_=[0,1,1],
     _PW_=[0,1,2],
     _PX_=[0,1,3],
     _PY_=[0,2,1],
     _PZ_=[0,2,2],
     _P0_=[0,2,3],
     _P1_=[0,3,1],
     _P2_=[0,3,2],
     _P3_=[0,3,3],
     _Pu_=[0,1,1],
     _Pv_=[0,1,2],
     _Pw_=[0,1,3],
     _Px_=[0,2,1],
     _Py_=[0,2,2],
     _Pz_=[0,2,3],
     _PA_=[0,3,1],
     _PB_=[0,3,2],
     _PC_=[0,3,3],
     _PD_=[0,1,1],
     _PE_=[0,1,2],
     _PF_=[0,1,3],
     _PG_=[0,2,1],
     _PH_=[0,2,2],
     _PI_=[0,2,3],
     _PJ_=[0,3,1],
     _PK_=[0,3,2],
     _PL_=[0,3,3],
     _Qe_=[1,caml_new_string("the file does not contain data")],
     _Qf_=[1,caml_new_string("failed to open the file")],
     _P7_=caml_new_string("RIFF"),
     _Qd_=[1,caml_new_string("Not a valid file")],
     _P8_=[1,caml_new_string("Invalid chunk size")],
     _P9_=caml_new_string("WAVE"),
     _Qc_=[1,caml_new_string("Not a supported wav file")],
     _P__=caml_new_string("fmt "),
     _Qb_=[1,caml_new_string("Not a supported wav file")],
     _P$_=[1,caml_new_string("Input file is not in PCM format")],
     _Qa_=[0,0],
     _P6_=
      caml_new_string("Wave file encoded in an unsupported bits per sample: "),
     _P5_=caml_new_string("data"),
     _QZ_=caml_new_string("wave"),
     _Q0_=caml_new_string("wave"),
     _QY_=caml_new_string("_samples"),
     _QS_=caml_new_string("chan_"),
     _QT_=caml_new_string("_"),
     _QU_=[0,caml_new_string("wrap_array"),0],
     _QV_=caml_new_string("%"),
     _QW_=[0,caml_new_string("get"),0],
     _QX_=caml_new_string("=="),
     _QR_=caml_new_string("chan_"),
     _QO_=caml_new_string(")"),
     _QP_=
      caml_new_string
       (") does not match the actual number of the channels in the file ("),
     _QQ_=caml_new_string("The given number of channels ("),
     _QK_=caml_new_string("': "),
     _QL_=caml_new_string("Failed to read the wav file '"),
     _QM_=caml_new_string("' was not found in any of the include locations"),
     _QN_=caml_new_string("The file '"),
     _QH_=caml_new_string("table"),
     _QI_=caml_new_string("table"),
     _QE_=[0,caml_new_string("c2"),0],
     _QF_=[0,caml_new_string("c1"),0],
     _QG_=[0,caml_new_string("c0"),0],
     _QD_=
      caml_new_string("evaluateFunction: the function should be a full path"),
     _Qp_=caml_new_string("_"),
     _Qq_=[0,caml_new_string("wrap_array"),0],
     _Qr_=[0,caml_new_string("get"),0],
     _Qn_=[0,caml_new_string("index"),0],
     _Qo_=[0,caml_new_string("index"),0],
     _Qs_=caml_new_string("c2"),
     _Qt_=caml_new_string("*"),
     _Qu_=caml_new_string("c1"),
     _Qv_=caml_new_string("+"),
     _Qw_=caml_new_string("*"),
     _Qx_=caml_new_string("c0"),
     _Qy_=caml_new_string("+"),
     _Qz_=caml_new_string("-"),
     _QA_=caml_new_string("*"),
     _QB_=[0,caml_new_string("int"),0],
     _QC_=[0,caml_new_string("clip"),0],
     _Qm_=caml_new_string("the type is not defined"),
     _Ql_=caml_new_string("the curve fitting returned more than three points"),
     _Qk_=caml_new_string("The result of the evaluation is not a float"),
     _Qj_=caml_new_string("_"),
     _Qi_=[0,caml_new_string("array"),0],
     _Qg_=
      [0,
       [0,caml_new_string("random"),0],
       [0,[0,caml_new_string("irandom"),0],0]],
     _Qh_=caml_new_string("Simplify.exp"),
     _QJ_=caml_new_string("MakeTables.stmt_x"),
     _Q1_=caml_new_string("MakeTables.stmt_x"),
     _Rk_=caml_new_string("fixed"),
     _Rl_=
      [0,
       [11,
        caml_new_string("This value '"),
        [8,
         0,
         0,
         0,
         [11,
          caml_new_string("' cannot be represented with fixed-point numbers"),
          0]]],
       caml_new_string
        ("This value '%f' cannot be represented with fixed-point numbers")],
     _Q__=caml_new_string("_init"),
     _Q$_=caml_new_string("getInitFunctioName: empty id"),
     _Ra_=caml_new_string("_type"),
     _Rb_=caml_new_string("getFunctioTypeName: empty id"),
     _Rd_=caml_new_string("bool"),
     _Re_=caml_new_string("int"),
     _Rf_=caml_new_string("real"),
     _Rg_=caml_new_string("array"),
     _Rh_=caml_new_string("tuple"),
     _Ri_=[0,caml_new_string("makeArray"),0],
     _Rc_=caml_new_string("getInitValue"),
     _Q7_=caml_new_string("_ctx"),
     _Q4_=caml_new_string("_ctx"),
     _Q5_=caml_new_string("_ctx"),
     _Q2_=[0,caml_new_string("_ctx"),0],
     _Q3_=caml_new_string("InsertContext.stmt"),
     _Q6_=caml_new_string("InsertContext.exp"),
     _Q8_=caml_new_string("InsertContext.lhs_exp"),
     _Q9_=caml_new_string("InsertContext.stmt_x"),
     _Rj_=caml_new_string("CreateInitFunction.stmt_x"),
     _Rm_=caml_new_string("OtherErrors.exp"),
     _Rw_=[0,caml_new_string("not"),0],
     _Rs_=[0,caml_new_string("_output_"),0],
     _Ru_=caml_new_string("_unused_"),
     _Rt_=caml_new_string("_unused_"),
     _Rq_=[0,caml_new_string("_output_"),0],
     _Rn_=caml_new_string("ReplaceFunctionNames.exp"),
     _Ro_=caml_new_string("ReplaceFunctionNames.stmt"),
     _Rp_=caml_new_string("ReplaceFunctionNames.vtype_c"),
     _Rr_=caml_new_string("ReturnReferences.stmt"),
     _Rv_=caml_new_string("ReturnReferences.stmt_x"),
     _Rx_=caml_new_string("DummySimplifications.stmt"),
     _Ry_=caml_new_string("DummySimplifications.stmt_x"),
     _RD_=
      [0,
       [11,
        caml_new_string
         ("The type of this expression could not be infered. Add a type annotation."),
        0],
       caml_new_string
        ("The type of this expression could not be infered. Add a type annotation.")],
     _RE_=
      [0,
       [11,
        caml_new_string("The type '"),
        [2,
         0,
         [11,
          caml_new_string
           ("' of this expression is not supported. Arrays can only contain basic types."),
          0]]],
       caml_new_string
        ("The type '%s' of this expression is not supported. Arrays can only contain basic types.")],
     _RB_=
      [0,
       [11,
        caml_new_string("The type '"),
        [2,
         0,
         [11,
          caml_new_string("' of variable '"),
          [2,
           0,
           [11,
            caml_new_string
             ("' is not supported. Arrays can only contain basic types."),
            0]]]]],
       caml_new_string
        ("The type '%s' of variable '%s' is not supported. Arrays can only contain basic types.")],
     _Rz_=caml_new_string("tuple"),
     _RA_=caml_new_string("CollectTuples.vtype_c"),
     _RC_=caml_new_string("ReportUnsupportedTypes.lhs_exp"),
     _RF_=caml_new_string("ReportUnsupportedTypes.exp"),
     _RG_=caml_new_string("ReportUnsupportedTypes.typed_id"),
     _RH_=caml_new_string("Stack is empty"),
     _RQ_=caml_new_string(""),
     _RL_=caml_new_string("pass 1"),
     _RM_=caml_new_string("pass 2"),
     _RN_=caml_new_string("pass 3"),
     _RO_=caml_new_string("pass 4"),
     _RP_=caml_new_string("pass 5"),
     _RK_=caml_new_string("field_"),
     _RJ_=caml_new_string("tuple"),
     _RI_=
      caml_new_string
       ("CreateTupleTypes.makeTypeDeclaration: there should be only tuples here"),
     _Sd_=caml_new_string(""),
     _Se_=caml_new_string("Vult"),
     _Sf_=caml_new_string("No files given"),
     _Sp_=caml_new_string("js"),
     _Sq_=caml_new_string("lua"),
     _Sn_=caml_new_string(""),
     _So_=caml_new_string("Vult"),
     _Sh_=
      caml_new_string
       ("Required functions are not defined or have incorrect inputs or outputs. Here's a template you can use:"),
     _Si_=caml_new_string("fun process(input:real){ return input; }"),
     _Sj_=caml_new_string("and noteOn(note:int,velocity:int,channel:int){ }"),
     _Sk_=caml_new_string("and noteOff(note:int,channel:int){ }"),
     _Sl_=
      caml_new_string
       ("and controlChange(control:int,value:int,channel:int){ }"),
     _Sm_=caml_new_string("and default(){ }"),
     _Sg_=caml_new_string("default"),
     _RW_=[0,0,0,0],
     _R1_=caml_new_string("int"),
     _R2_=caml_new_string("real"),
     _R3_=[0,caml_new_string("real"),0],
     _R4_=[0,caml_new_string("int"),0],
     _R5_=caml_new_string("tuple"),
     _R9_=caml_new_string("controlChange"),
     _R__=caml_new_string("default"),
     _R$_=caml_new_string("noteOff"),
     _Sa_=caml_new_string("noteOn"),
     _Sb_=caml_new_string("process"),
     _R8_=caml_new_string("Configuration.getType: Undefined type"),
     _R7_=caml_new_string("unit"),
     _R6_=caml_new_string("Generate.getOutputsOrDefault: strage error"),
     _RX_=caml_new_string("int"),
     _RY_=caml_new_string("real"),
     _RZ_=[0,caml_new_string("real")],
     _R0_=[0,caml_new_string("int")],
     _RR_=caml_new_string("fixed"),
     _RS_=caml_new_string("float"),
     _RT_=caml_new_string("js"),
     _RU_=
      caml_new_string
       ("'\nThe only valid values for -real are: fixed or float"),
     _RV_=caml_new_string("Unknown type '"),
     _Sc_=caml_new_string("Configuration.stmt"),
     _Ta_=caml_new_string("Unterminated string"),
     _S6_=caml_new_string("'"),
     _S7_=caml_new_string("'"),
     _S8_=caml_new_string("'"),
     _S9_=caml_new_string("'"),
     _S__=caml_new_string("'"),
     _S$_=caml_new_string("'"),
     _S4_=caml_new_string("'"),
     _S5_=caml_new_string("'"),
     _Sr_=caml_new_string("'eof'"),
     _Ss_=caml_new_string("'int'"),
     _St_=caml_new_string("'real'"),
     _Su_=caml_new_string("'id'"),
     _Sv_=caml_new_string("'string'"),
     _Sw_=caml_new_string("'fun'"),
     _Sx_=caml_new_string("'mem'"),
     _Sy_=caml_new_string("'val'"),
     _Sz_=caml_new_string("'return'"),
     _SA_=caml_new_string("'if'"),
     _SB_=caml_new_string("'then'"),
     _SC_=caml_new_string("'else'"),
     _SD_=caml_new_string("'{'"),
     _SE_=caml_new_string("'}'"),
     _SF_=caml_new_string("'['"),
     _SG_=caml_new_string("']'"),
     _SH_=caml_new_string("'('"),
     _SI_=caml_new_string("')'"),
     _SJ_=caml_new_string("'{|'"),
     _SK_=caml_new_string("'|}'"),
     _SL_=caml_new_string("':'"),
     _SM_=caml_new_string("';'"),
     _SN_=caml_new_string("','"),
     _SO_=caml_new_string("'='"),
     _SP_=caml_new_string("'operator'"),
     _SQ_=caml_new_string("'@'"),
     _SR_=caml_new_string("'.'"),
     _SS_=caml_new_string("'while'"),
     _ST_=caml_new_string("'type'"),
     _SU_=caml_new_string("'[|'"),
     _SV_=caml_new_string("'|]'"),
     _SW_=caml_new_string("'true'"),
     _SX_=caml_new_string("'false'"),
     _SY_=caml_new_string("'and'"),
     _SZ_=caml_new_string("'_'"),
     _S0_=caml_new_string("'external'"),
     _S1_=caml_new_string("'''"),
     _S2_=caml_new_string("'->'"),
     _S3_=caml_new_string("'!'"),
     _Tf_=
      [0,
       [11,
        caml_new_string("Expecting a "),
        [2,0,[11,caml_new_string(" but the file ended"),0]]],
       caml_new_string("Expecting a %s but the file ended")],
     _Tg_=
      [0,
       [11,
        caml_new_string("Expecting a "),
        [2,0,[11,caml_new_string(" but got "),[2,0,0]]]],
       caml_new_string("Expecting a %s but got %s")],
     _Td_=
      [0,
       [11,
        caml_new_string("Expecting a "),
        [2,0,[11,caml_new_string(" but the file ended"),0]]],
       caml_new_string("Expecting a %s but the file ended")],
     _Te_=
      [0,
       [11,
        caml_new_string("Expecting a "),
        [2,0,[11,caml_new_string(" but got "),[2,0,0]]]],
       caml_new_string("Expecting a %s but got %s")],
     _Tc_=
      [0,
       [11,caml_new_string("Not expecting to find "),[2,0,0]],
       caml_new_string("Not expecting to find %s")],
     _Tb_=caml_new_string("TokenStream.ParserError"),
     _Tv_=caml_new_string("-"),
     _Tw_=caml_new_string("invalid value"),
     _Tx_=caml_new_string("-"),
     _Ty_=caml_new_string("-"),
     _Tz_=caml_new_string(""),
     _TB_=caml_new_string("'"),
     _TA_=caml_new_string("invalid name for generic type"),
     _TD_=[0,caml_new_string("tuple"),0],
     _TE_=[0,caml_new_string("unit"),0],
     _TC_=[0,caml_new_string("unit"),0],
     _TF_=caml_new_string("lhs_led"),
     _TG_=caml_new_string("After ':' you can only have a function call"),
     _TH_=caml_new_string("-"),
     _TI_=caml_new_string("exp_led"),
     _TJ_=
      [0,
       [11,
        caml_new_string
         ('Invalid statement. All statements should be in the forms: "a = b;" or "_ = b();" '),
        0],
       caml_new_string
        ('Invalid statement. All statements should be in the forms: "a = b;" or "_ = b();" ')],
     _TK_=
      [0,
       [11,caml_new_string("Expecting a string with a link name or a tag"),0],
       caml_new_string("Expecting a string with a link name or a tag")],
     _TL_=
      [0,
       [11,
        caml_new_string
         ("Expecting a list of value declarations '{ val x:... }' or a type alias ': type' but got "),
        [2,0,0]],
       caml_new_string
        ("Expecting a list of value declarations '{ val x:... }' or a type alias ': type' but got %s")],
     _TN_=caml_new_string("live.vult"),
     _TM_=caml_new_string("Could not open the file "),
     _Ti_=caml_new_string("<"),
     _Tp_=caml_new_string("%"),
     _Tq_=caml_new_string("&&"),
     _Tr_=caml_new_string("*"),
     _Ts_=caml_new_string("+"),
     _Tt_=caml_new_string("-"),
     _Tu_=caml_new_string("/"),
     _Tj_=caml_new_string("<="),
     _Tk_=caml_new_string("<>"),
     _Tl_=caml_new_string("=="),
     _Tm_=caml_new_string(">"),
     _Tn_=caml_new_string(">="),
     _To_=caml_new_string("||"),
     _Th_=caml_new_string("."),
     _TO_=caml_new_string(".vult"),
     _TP_=caml_new_string(".vult"),
     _TQ_=caml_new_string(", "),
     _TR_=
      caml_new_string("The following modules have circular dependencies: "),
     _TV_=caml_new_string(" - https://github.com/modlfo/vult\nno input files"),
     _TW_=caml_new_string("vult "),
     _TU_=[0,0,0],
     _TT_=caml_new_string("\n"),
     _TS_=caml_new_string("\n"),
     _T6_=caml_new_string(""),
     _T3_=caml_new_string("unknown error"),
     _T0_=caml_new_string("."),
     _TZ_=caml_new_string("live.vult"),
     _TX_=
      [0,
       caml_new_string("version"),
       caml_new_string("main"),
       caml_new_string("generateLua"),
       caml_new_string("generateJs"),
       caml_new_string("generateC")],
     _TY_=
      [0,
       caml_new_string("generateLua"),
       caml_new_string("main"),
       caml_new_string("generateJs"),
       caml_new_string("version"),
       caml_new_string("generateC")],
     _T2_=caml_new_string("unknown error"),
     _Uj_=caml_new_string(""),
     _Ug_=caml_new_string("live.vult"),
     _Ub_=caml_new_string("browser"),
     _Uc_=caml_new_string("js"),
     _Ud_=caml_new_string("live.vult"),
     _Ue_=caml_new_string("\n"),
     _Uf_=caml_new_string("Errors in the program:\n"),
     _Ua_=
      [0,
       caml_new_string("generateLua"),
       caml_new_string("main"),
       caml_new_string("generateJs"),
       caml_new_string("generateJSCode"),
       caml_new_string("version"),
       caml_new_string("generateC"),
       caml_new_string("checkCode")],
     _Ur_=caml_new_string("vult");
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:var rest$8=fmt1[1];return [9,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$6=fmt1[1];
          return [13,pad$6,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$7=fmt1[1];
          return [14,pad$7,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:-x | 0}
    var bound=2147483647;
    function _a_(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return s}
    function string_of_bool(b){return b?_b_:_c_}
    function string_of_float(f)
     {var s=caml_format_float(_e_,f),l=caml_ml_string_length(s),i=0;
      for(;;)
       {if(l <= i)return _a_(s,_d_);
        var
         match=caml_string_get(s,i),
         switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    function joinErrors(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,joinErrors(tl,l2)]}return l2}
    caml_ml_open_descriptor_in(0);
    var
     oc=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try {caml_ml_flush(a)}catch(_aJS_){}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function open_in(name)
     {var c=caml_ml_open_descriptor_in(caml_sys_open(name,mode,0));
      caml_ml_set_channel_name(c,name);
      return c}
    var exit_function=[0,flush_all];
    function at_exit(f)
     {var g=exit_function[1];
      exit_function[1]
      =
      function(param){caml_call1(f,0);return caml_call1(g,0)};
      return 0}
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function hd(param){if(param){var a=param[1];return a}return failwith(_h_)}
    function nth(l,n)
     {if(0 <= n)
       {var l$0=l,n$0=n;
        for(;;)
         {if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0)return a;
            var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
            continue}
          return failwith(_j_)}}
      return invalid_arg(_k_)}
    function rev_append(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1;
          continue}
        return l2$0}}
    function rev(l){return rev_append(l,0)}
    function concat(param)
     {if(param){var r=param[2],l=param[1];return joinErrors(l,concat(r))}
      return 0}
    function map(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map(f,l)]}
      return 0}
    function _l_(i,f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call2(f,i,a);
        return [0,r,_l_(i + 1 | 0,f,l)]}
      return 0}
    function mapi(f,l){return _l_(0,f,l)}
    function iter(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var param$1=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=param$1;
          continue}
        return 0}}
    function fold_left(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function map2(f,l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1],r=caml_call2(f,a1,a2);
          return [0,r,map2(f,l1$0,l2$0)]}}
      else
       if(!l2)return 0;
      return invalid_arg(_m_)}
    function iter2(f,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var l2$1=l2$0[2],a2=l2$0[1],l1$1=l1$0[2],a1=l1$0[1];
            caml_call2(f,a1,a2);
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(!l2$0)return 0;
        return invalid_arg(_n_)}}
    function exists(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_aJR_=caml_call1(p,a);
          if(_aJR_)return _aJR_;
          var param$0=l;
          continue}
        return 0}}
    function assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function find(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return x;
          var param$0=l;
          continue}
        throw Not_found}}
    function find_all(p)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1];
            if(caml_call1(p,x))
             {var accu$1=[0,x,accu$0],accu$0=accu$1,param=l;continue}
            var param=l;
            continue}
          return rev(accu$0)}}}
    function split(param)
     {if(param)
       {var
         l=param[2],
         match=param[1],
         y=match[2],
         x=match[1],
         match$0=split(l),
         ry=match$0[2],
         rx=match$0[1];
        return [0,[0,x,rx],[0,y,ry]]}
      return _p_}
    function combine(l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1];
          return [0,[0,a1,a2],combine(l1$0,l2$0)]}}
      else
       if(!l2)return 0;
      return invalid_arg(_q_)}
    function chop(k,l)
     {var k$0=k,l$0=l;
      for(;;)
       {if(0 === k$0)return l$0;
        if(l$0){var l$1=l$0[2],k$1=k$0 - 1 | 0,k$0=k$1,l$0=l$1;continue}
        throw [0,Assert_failure,_r_]}}
    function sort_uniq(cmp,l)
     {function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _aJO_=l[2];
            if(_aJO_)
             {var x2=_aJO_[1],x1=l[1],c$0=caml_call2(cmp,x1,x2);
              return 0 === c$0
                      ?[0,x1,0]
                      :0 <= c$0?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]]}}}
        else
         if(3 === n)
          if(l)
           {var _aJP_=l[2];
            if(_aJP_)
             {var _aJQ_=_aJP_[2];
              if(_aJQ_)
               {var
                 x3=_aJQ_[1],
                 x2$0=_aJP_[1],
                 x1$0=l[1],
                 c$1=caml_call2(cmp,x1$0,x2$0);
                if(0 === c$1)
                 {var c$2=caml_call2(cmp,x2$0,x3);
                  return 0 === c$2
                          ?[0,x2$0,0]
                          :0 <= c$2?[0,x3,[0,x2$0,0]]:[0,x2$0,[0,x3,0]]}
                if(0 <= c$1)
                 {var c$3=caml_call2(cmp,x1$0,x3);
                  if(0 === c$3)return [0,x2$0,[0,x1$0,0]];
                  if(0 <= c$3)
                   {var c$4=caml_call2(cmp,x2$0,x3);
                    return 0 === c$4
                            ?[0,x2$0,[0,x1$0,0]]
                            :0 <= c$4
                              ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                              :[0,x2$0,[0,x3,[0,x1$0,0]]]}
                  return [0,x2$0,[0,x1$0,[0,x3,0]]]}
                var c$5=caml_call2(cmp,x2$0,x3);
                if(0 === c$5)return [0,x1$0,[0,x2$0,0]];
                if(0 <= c$5)
                 {var c$6=caml_call2(cmp,x1$0,x3);
                  return 0 === c$6
                          ?[0,x1$0,[0,x2$0,0]]
                          :0 <= c$6
                            ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                            :[0,x1$0,[0,x3,[0,x2$0,0]]]}
                return [0,x1$0,[0,x2$0,[0,x3,0]]]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         l2$0=chop(n1,l),
         l1$0=rev_sort(n1,l),
         l2$1=rev_sort(n2,l2$0),
         l1=l1$0,
         l2=l2$1,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 < c){var accu$1=[0,h1,accu],l1=t1,accu=accu$1;continue}
              var accu$2=[0,h2,accu],l2=t2,accu=accu$2;
              continue}
            return rev_append(l1,accu)}
          return rev_append(l2,accu)}}
      function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _aJL_=l[2];
            if(_aJL_)
             {var x2=_aJL_[1],x1=l[1],c$0=caml_call2(cmp,x1,x2);
              return 0 === c$0
                      ?[0,x1,0]
                      :0 < c$0?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]]}}}
        else
         if(3 === n)
          if(l)
           {var _aJM_=l[2];
            if(_aJM_)
             {var _aJN_=_aJM_[2];
              if(_aJN_)
               {var
                 x3=_aJN_[1],
                 x2$0=_aJM_[1],
                 x1$0=l[1],
                 c$1=caml_call2(cmp,x1$0,x2$0);
                if(0 === c$1)
                 {var c$2=caml_call2(cmp,x2$0,x3);
                  return 0 === c$2
                          ?[0,x2$0,0]
                          :0 < c$2?[0,x2$0,[0,x3,0]]:[0,x3,[0,x2$0,0]]}
                if(0 < c$1)
                 {var c$3=caml_call2(cmp,x2$0,x3);
                  if(0 === c$3)return [0,x1$0,[0,x2$0,0]];
                  if(0 < c$3)return [0,x1$0,[0,x2$0,[0,x3,0]]];
                  var c$4=caml_call2(cmp,x1$0,x3);
                  return 0 === c$4
                          ?[0,x1$0,[0,x2$0,0]]
                          :0 < c$4
                            ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                            :[0,x3,[0,x1$0,[0,x2$0,0]]]}
                var c$5=caml_call2(cmp,x1$0,x3);
                if(0 === c$5)return [0,x2$0,[0,x1$0,0]];
                if(0 < c$5)return [0,x2$0,[0,x1$0,[0,x3,0]]];
                var c$6=caml_call2(cmp,x2$0,x3);
                return 0 === c$6
                        ?[0,x2$0,[0,x1$0,0]]
                        :0 < c$6
                          ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                          :[0,x3,[0,x2$0,[0,x1$0,0]]]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         l2$0=chop(n1,l),
         l1$0=sort(n1,l),
         l2$1=sort(n2,l2$0),
         l1=l1$0,
         l2=l2$1,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 <= c){var accu$1=[0,h2,accu],l2=t2,accu=accu$1;continue}
              var accu$2=[0,h1,accu],l1=t1,accu=accu$2;
              continue}
            return rev_append(l1,accu)}
          return rev_append(l2,accu)}}
      var len=length(l);
      return 2 <= len?sort(len,l):l}
    function lowercase_ascii(c)
     {if(65 <= c)if(!(90 < c))return c + 32 | 0;return c}
    function uppercase_ascii(c)
     {if(97 <= c)if(!(122 < c))return c - 32 | 0;return c}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function sub(s,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(!((caml_ml_bytes_length(s) - len | 0) < ofs))
         {var r=caml_create_bytes(len);
          caml_blit_bytes(s,ofs,r,0,len);
          return r}
      return invalid_arg(_y_)}
    function sub_string(b,ofs,len){return sub(b,ofs,len)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_bytes_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_z_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_A_)}
    function map$0(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_aJJ_=l - 1 | 0,_aJI_=0;
      if(!(_aJJ_ < 0))
       {var i=_aJI_;
        for(;;)
         {caml_string_unsafe_set
           (r,i,caml_call1(f,caml_string_unsafe_get(s,i)));
          var _aJK_=i + 1 | 0;
          if(_aJJ_ !== i){var i=_aJK_;continue}
          break}}
      return r}
    function apply1(f,s)
     {if(0 === caml_ml_bytes_length(s))return s;
      var r=copy(s);
      caml_string_unsafe_set(r,0,caml_call1(f,caml_string_unsafe_get(s,0)));
      return r}
    function make$0(n,c){return make(n,c)}
    function k(s,ofs,len){return sub(s,ofs,len)}
    function concat$0(sep,l)
     {if(l)
       {var seplen=caml_ml_string_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _aJD_=param[2],_aJE_=param[1];
            if(_aJD_)
             {var
               x=(caml_ml_string_length(_aJE_) + seplen | 0) + acc | 0,
               acc$0=caml_greaterequal(x,acc)?x:invalid_arg(_B_),
               acc=acc$0,
               param=_aJD_;
              continue}
            var _aJH_=caml_ml_string_length(_aJE_) + acc | 0}
          else
           var _aJH_=acc;
          var dst=caml_create_bytes(_aJH_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _aJF_=param$0[2],_aJG_=param$0[1];
              if(_aJF_)
               {caml_blit_string(_aJG_,0,dst,pos,caml_ml_string_length(_aJG_));
                caml_blit_string
                 (sep,0,dst,pos + caml_ml_string_length(_aJG_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_string_length(_aJG_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=_aJF_;
                continue}
              caml_blit_string(_aJG_,0,dst,pos,caml_ml_string_length(_aJG_));
              return dst}
            return dst}}}
      return _C_}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)if(!(l < i))return index_rec(s,l,i,c);
      return invalid_arg(_D_)}
    function contains_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)
       if(!(l < i))
        try
         {index_rec(s,l,i,c);var _aJB_=1;return _aJB_}
        catch(_aJC_)
         {_aJC_ = caml_wrap_exception(_aJC_);
          if(_aJC_ === Not_found)return 0;
          throw _aJC_}
      return invalid_arg(_E_)}
    function contains(s,c){return contains_from(s,0,c)}
    function uppercase_ascii$0(s){return map$0(uppercase_ascii,s)}
    function lowercase_ascii$0(s){return map$0(lowercase_ascii,s)}
    var
     compare=caml_string_compare,
     match=caml_sys_get_config(0),
     os_type=match[1],
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    function init(l,f)
     {if(0 === l)return [0];
      if(0 <= l)
       {var res=caml_make_vect(l,caml_call1(f,0)),_aJz_=l - 1 | 0,_aJy_=1;
        if(!(_aJz_ < 1))
         {var i=_aJy_;
          for(;;)
           {res[i + 1] = caml_call1(f,i);
            var _aJA_=i + 1 | 0;
            if(_aJz_ !== i){var i=_aJA_;continue}
            break}}
        return res}
      return invalid_arg(_F_)}
    function copy$0(a)
     {var l=a.length - 1;return 0 === l?[0]:caml_array_sub(a,0,l)}
    function map$1(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_aJw_=l - 1 | 0,_aJv_=1;
      if(!(_aJw_ < 1))
       {var i=_aJv_;
        for(;;)
         {r[i + 1] = caml_call1(f,a[i + 1]);
          var _aJx_=i + 1 | 0;
          if(_aJw_ !== i){var i=_aJx_;continue}
          break}}
      return r}
    function to_list(a)
     {var i$1=a.length - 1 - 1 | 0,i=i$1,res=0;
      for(;;)
       {if(0 <= i)
         {var res$0=[0,a[i + 1],res],i$0=i - 1 | 0,i=i$0,res=res$0;continue}
        return res}}
    function of_list(l)
     {if(l)
       {var tl=l[2],hd=l[1],accu=0,param=l;
        for(;;)
         {if(param)
           {var
             param$0=param[2],
             accu$0=accu + 1 | 0,
             accu=accu$0,
             param=param$0;
            continue}
          var a=caml_make_vect(accu,hd),i=1,param$1=tl;
          for(;;)
           {if(param$1)
             {var param$2=param$1[2],hd$0=param$1[1];
              a[i + 1] = hd$0;
              var i$0=i + 1 | 0,i=i$0,param$1=param$2;
              continue}
            return a}}}
      return [0]}
    function fold_left$0(f,x,a)
     {var r=[0,x],_aJt_=a.length - 1 - 1 | 0,_aJs_=0;
      if(!(_aJt_ < 0))
       {var i=_aJs_;
        for(;;)
         {r[1] = caml_call2(f,r[1],a[i + 1]);
          var _aJu_=i + 1 | 0;
          if(_aJt_ !== i){var i=_aJu_;continue}
          break}}
      return r[1]}
    caml_fresh_oo_id(0);
    function engine(tbl,state,buf)
     {var result=caml_lex_engine(tbl,state,buf);
      if(0 <= result)
       {buf[11] = buf[12];
        var _aJr_=buf[12];
        buf[12] = [0,_aJr_[1],_aJr_[2],_aJr_[3],buf[4] + buf[6] | 0]}
      return result}
    function lexeme(lexbuf)
     {var len=lexbuf[6] - lexbuf[5] | 0;
      return sub_string(lexbuf[2],lexbuf[5],len)}
    function _Q_(Ord)
     {function height(param){if(param){var h=param[4];return h}return 0}
      function create(l,v,r)
       {if(l)var h=l[4],hl=h;else var hl=0;
        if(r)var h$0=r[4],hr=h$0;else var hr=0;
        var _aJq_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,v,r,_aJq_]}
      function bal(l,v,r)
       {if(l)var h=l[4],hl=h;else var hl=0;
        if(r)var h$0=r[4],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[3],lv=l[2],ll=l[1],_aJl_=height(lr);
            if(_aJl_ <= height(ll))return create(ll,lv,create(lr,v,r));
            if(lr)
             {var lrr=lr[3],lrv=lr[2],lrl=lr[1],_aJm_=create(lrr,v,r);
              return create(create(ll,lv,lrl),lrv,_aJm_)}
            return invalid_arg(_I_)}
          return invalid_arg(_J_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[3],rv=r[2],rl=r[1],_aJn_=height(rl);
            if(_aJn_ <= height(rr))return create(create(l,v,rl),rv,rr);
            if(rl)
             {var rlr=rl[3],rlv=rl[2],rll=rl[1],_aJo_=create(rlr,rv,rr);
              return create(create(l,v,rll),rlv,_aJo_)}
            return invalid_arg(_K_)}
          return invalid_arg(_L_)}
        var _aJp_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,v,r,_aJp_]}
      function add(x,t)
       {if(t)
         {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return t;
          if(0 <= c){var rr=add(x,r);return r === rr?t:bal(l,v,rr)}
          var ll=add(x,l);
          return l === ll?t:bal(ll,v,r)}
        return [0,0,x,0,1]}
      function singleton(x){return [0,0,x,0,1]}
      function add_min_element(v,param)
       {if(param)
         {var r=param[3],x=param[2],l=param[1];
          return bal(add_min_element(v,l),x,r)}
        return singleton(v)}
      function add_max_element(v,param)
       {if(param)
         {var r=param[3],x=param[2],l=param[1];
          return bal(l,x,add_max_element(v,r))}
        return singleton(v)}
      function join(l,v,r)
       {if(l)
         {if(r)
           {var
             rh=r[4],
             rr=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[4],
             lr=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,join(lr,v,r))
                    :(lh + 2 | 0) < rh?bal(join(l,v,rl),rv,rr):create(l,v,r)}
          return add_max_element(v,l)}
        return add_min_element(v,r)}
      function min_elt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _aJk_=param$0[1];
            if(_aJk_){var param$0=_aJk_;continue}
            var v=param$0[2];
            return v}
          throw Not_found}}
      function max_elt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _aJi_=param$0[3],_aJj_=param$0[2];
            if(_aJi_){var param$0=_aJi_;continue}
            return _aJj_}
          throw Not_found}}
      function remove_min_elt(param)
       {if(param)
         {var _aJh_=param[1];
          if(_aJh_)
           {var r=param[3],v=param[2];return bal(remove_min_elt(_aJh_),v,r)}
          var r$0=param[3];
          return r$0}
        return invalid_arg(_M_)}
      function concat(t,match)
       {if(t)
         {if(match)
           {var _aJg_=remove_min_elt(match);
            return join(t,min_elt(match),_aJg_)}
          return t}
        return match}
      function split(x,param)
       {if(param)
         {var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,l,1,r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,r)]}
        return _N_}
      var empty=0;
      function is_empty(param){return param?0:1}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v),
             _aJf_=0 === c?1:0;
            if(_aJf_)return _aJf_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function remove(x,t)
       {if(t)
         {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)
           {if(l)
             {if(r)
               {var _aJe_=remove_min_elt(r);return bal(l,min_elt(r),_aJe_)}
              return l}
            return r}
          if(0 <= c){var rr=remove(x,r);return r === rr?t:bal(l,v,rr)}
          var ll=remove(x,l);
          return l === ll?t:bal(ll,v,r)}
        return 0}
      function union(t1,match)
       {if(t1)
         {if(match)
           {var
             h2=match[4],
             r2=match[3],
             v2=match[2],
             l2=match[1],
             h1=t1[4],
             r1=t1[3],
             v1=t1[2],
             l1=t1[1];
            if(h2 <= h1)
             {if(1 === h2)return add(v2,t1);
              var
               match$0=split(v1,match),
               r2$0=match$0[3],
               l2$0=match$0[1],
               _aJc_=union(r1,r2$0);
              return join(union(l1,l2$0),v1,_aJc_)}
            if(1 === h1)return add(v1,match);
            var
             match$1=split(v2,t1),
             r1$0=match$1[3],
             l1$0=match$1[1],
             _aJd_=union(r1$0,r2);
            return join(union(l1$0,l2),v2,_aJd_)}
          return t1}
        return match}
      function inter(s1,match)
       {if(s1)
         {if(match)
           {var
             r1=s1[3],
             v1=s1[2],
             l1=s1[1],
             _aI__=split(v1,match),
             _aI$_=_aI__[1];
            if(0 === _aI__[2])
             {var r2=_aI__[3],_aJa_=inter(r1,r2);
              return concat(inter(l1,_aI$_),_aJa_)}
            var r2$0=_aI__[3],_aJb_=inter(r1,r2$0);
            return join(inter(l1,_aI$_),v1,_aJb_)}
          return 0}
        return 0}
      function diff(t1,match)
       {if(t1)
         {if(match)
           {var
             r1=t1[3],
             v1=t1[2],
             l1=t1[1],
             _aI6_=split(v1,match),
             _aI7_=_aI6_[1];
            if(0 === _aI6_[2])
             {var r2=_aI6_[3],_aI8_=diff(r1,r2);
              return join(diff(l1,_aI7_),v1,_aI8_)}
            var r2$0=_aI6_[3],_aI9_=diff(r1,r2$0);
            return concat(diff(l1,_aI7_),_aI9_)}
          return t1}
        return 0}
      function cons_enum(s,e)
       {var s$0=s,e$0=e;
        for(;;)
         {if(s$0)
           {var r=s$0[3],v=s$0[2],s$1=s$0[1],e$1=[0,v,r,e$0],s$0=s$1,e$0=e$1;
            continue}
          return e$0}}
      function compare(s1,s2)
       {var e2$2=cons_enum(s2,0),e1$2=cons_enum(s1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[3],
               r2=e2[2],
               v2=e2[1],
               e1$0=e1[3],
               r1=e1[2],
               v1=e1[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var
                 e2$1=cons_enum(r2,e2$0),
                 e1$1=cons_enum(r1,e1$0),
                 e1=e1$1,
                 e2=e2$1;
                continue}
              return c}
            return 1}
          return e2?-1:0}}
      function equal(s1,s2){return 0 === compare(s1,s2)?1:0}
      function subset(s1,s2)
       {var s1$0=s1,s2$0=s2;
        for(;;)
         {if(s1$0)
           {if(s2$0)
             {var
               r2=s2$0[3],
               v2=s2$0[2],
               l2=s2$0[1],
               r1=s1$0[3],
               v1=s1$0[2],
               l1=s1$0[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var _aI3_=subset(l1,l2);
                if(_aI3_){var s1$0=r1,s2$0=r2;continue}
                return _aI3_}
              if(0 <= c)
               {var _aI4_=subset([0,0,v1,r1,0],r2);
                if(_aI4_){var s1$0=l1;continue}
                return _aI4_}
              var _aI5_=subset([0,l1,v1,0,0],l2);
              if(_aI5_){var s1$0=r1;continue}
              return _aI5_}
            return 0}
          return 1}}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var param$1=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call1(f,v);
            var param$0=param$1;
            continue}
          return 0}}
      function fold(f,s,accu)
       {var s$0=s,accu$0=accu;
        for(;;)
         {if(s$0)
           {var
             s$1=s$0[3],
             v=s$0[2],
             l=s$0[1],
             accu$1=caml_call2(f,v,fold(f,l,accu$0)),
             s$0=s$1,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1],_aI0_=caml_call1(p,v);
            if(_aI0_)
             {var _aI1_=for_all(p,l);
              if(_aI1_){var param$0=r;continue}
              var _aI2_=_aI1_}
            else
             var _aI2_=_aI0_;
            return _aI2_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1],_aIX_=caml_call1(p,v);
            if(_aIX_)
             var _aIY_=_aIX_;
            else
             {var _aIZ_=exists(p,l);
              if(!_aIZ_){var param$0=r;continue}
              var _aIY_=_aIZ_}
            return _aIY_}
          return 0}}
      function filter(p,t)
       {if(t)
         {var
           r=t[3],
           v=t[2],
           l=t[1],
           l$0=filter(p,l),
           pv=caml_call1(p,v),
           r$0=filter(p,r);
          if(pv){if(l === l$0)if(r === r$0)return t;return join(l$0,v,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pv=caml_call1(p,v),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pv){var _aIV_=concat(lf,rf);return [0,join(lt,v,rt),_aIV_]}
          var _aIW_=join(lf,v,rf);
          return [0,concat(lt,rt),_aIW_]}
        return _O_}
      function cardinal(param)
       {if(param)
         {var r=param[3],l=param[1],_aIU_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _aIU_ | 0}
        return 0}
      function elements_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             param$1=param$0[1],
             accu$1=[0,v,elements_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=param$1;
            continue}
          return accu$0}}
      function elements(s){return elements_aux(0,s)}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return v;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function map(f,t)
       {if(t)
         {var
           r=t[3],
           v=t[2],
           l=t[1],
           l$0=map(f,l),
           v$0=caml_call1(f,v),
           r$0=map(f,r);
          if(l === l$0)if(v === v$0)if(r === r$0)return t;
          if(0 === l$0)
           var switch$0=0;
          else
           var
            _aIT_=max_elt(l$0),
            switch$0=0 <= caml_call2(Ord[1],_aIT_,v$0)?1:0;
          if(!switch$0)
           {if(0 === r$0)
             var switch$1=0;
            else
             var
              _aIS_=min_elt(r$0),
              switch$1=0 <= caml_call2(Ord[1],v$0,_aIS_)?1:0;
            if(!switch$1)return join(l$0,v$0,r$0)}
          return union(l$0,add(v$0,r$0))}
        return 0}
      function of_list(l)
       {if(l)
         {var _aIH_=l[2],_aII_=l[1];
          if(_aIH_)
           {var _aIJ_=_aIH_[2],_aIK_=_aIH_[1];
            if(_aIJ_)
             {var _aIL_=_aIJ_[2],_aIM_=_aIJ_[1];
              if(_aIL_)
               {var _aIN_=_aIL_[2],_aIO_=_aIL_[1];
                if(_aIN_)
                 {if(_aIN_[2])
                   {var
                     l$0=sort_uniq(Ord[1],l),
                     sub=
                      function(n,l)
                       {if(!(3 < n >>> 0))
                         switch(n)
                          {case 0:return [0,0,l];
                           case 1:
                            if(l){var l$3=l[2],x0=l[1];return [0,[0,0,x0,0,1],l$3]}
                            break;
                           case 2:
                            if(l)
                             {var _aIP_=l[2];
                              if(_aIP_)
                               {var l$4=_aIP_[2],x1=_aIP_[1],x0$0=l[1];
                                return [0,[0,[0,0,x0$0,0,1],x1,0,2],l$4]}}
                            break;
                           default:
                            if(l)
                             {var _aIQ_=l[2];
                              if(_aIQ_)
                               {var _aIR_=_aIQ_[2];
                                if(_aIR_)
                                 {var l$5=_aIR_[2],x2=_aIR_[1],x1$0=_aIQ_[1],x0$1=l[1];
                                  return [0,[0,[0,0,x0$1,0,1],x1$0,[0,0,x2,0,1],2],l$5]}}}}
                        var nl=n / 2 | 0,match=sub(nl,l),l$0=match[2],left=match[1];
                        if(l$0)
                         {var
                           l$1=l$0[2],
                           mid=l$0[1],
                           match$0=sub((n - nl | 0) - 1 | 0,l$1),
                           l$2=match$0[2],
                           right=match$0[1];
                          return [0,create(left,mid,right),l$2]}
                        throw [0,Assert_failure,_P_]};
                    return sub(length(l$0),l$0)[1]}
                  var x4=_aIN_[1];
                  return add
                          (x4,add(_aIO_,add(_aIM_,add(_aIK_,singleton(_aII_)))))}
                return add(_aIO_,add(_aIM_,add(_aIK_,singleton(_aII_))))}
              return add(_aIM_,add(_aIK_,singleton(_aII_)))}
            return add(_aIK_,singleton(_aII_))}
          return singleton(_aII_)}
        return empty}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              singleton,
              remove,
              union,
              inter,
              diff,
              compare,
              equal,
              subset,
              iter,
              map,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              elements,
              min_elt,
              max_elt,
              min_elt,
              split,
              find,
              of_list]}
    function _Z_(Ord)
     {function height(param){if(param){var h=param[5];return h}return 0}
      function create(l,x,d,r)
       {var hl=height(l),hr=height(r),_aIG_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_aIG_]}
      function singleton(x,d){return [0,0,x,d,0,1]}
      function bal(l,x,d,r)
       {if(l)var h=l[5],hl=h;else var hl=0;
        if(r)var h$0=r[5],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_aIB_=height(lr);
            if(_aIB_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
            if(lr)
             {var
               lrr=lr[4],
               lrd=lr[3],
               lrv=lr[2],
               lrl=lr[1],
               _aIC_=create(lrr,x,d,r);
              return create(create(ll,lv,ld,lrl),lrv,lrd,_aIC_)}
            return invalid_arg(_R_)}
          return invalid_arg(_S_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_aID_=height(rl);
            if(_aID_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
            if(rl)
             {var
               rlr=rl[4],
               rld=rl[3],
               rlv=rl[2],
               rll=rl[1],
               _aIE_=create(rlr,rv,rd,rr);
              return create(create(l,x,d,rll),rlv,rld,_aIE_)}
            return invalid_arg(_T_)}
          return invalid_arg(_U_)}
        var _aIF_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_aIF_]}
      var empty=0;
      function is_empty(param){return param?0:1}
      function add(x,data,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return d === data?m:[0,l,x,data,r,h];
          if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=add(x,data,l);
          return l === ll?m:bal(ll,v,d,r)}
        return [0,0,x,data,0,1]}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return d;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v),
             _aIA_=0 === c?1:0;
            if(_aIA_)return _aIA_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function min_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _aIz_=param$0[1];
            if(_aIz_){var param$0=_aIz_;continue}
            var d=param$0[3],x=param$0[2];
            return [0,x,d]}
          throw Not_found}}
      function max_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _aIw_=param$0[4],_aIx_=param$0[3],_aIy_=param$0[2];
            if(_aIw_){var param$0=_aIw_;continue}
            return [0,_aIy_,_aIx_]}
          throw Not_found}}
      function remove_min_binding(param)
       {if(param)
         {var _aIv_=param[1];
          if(_aIv_)
           {var r=param[4],d=param[3],x=param[2];
            return bal(remove_min_binding(_aIv_),x,d,r)}
          var r$0=param[4];
          return r$0}
        return invalid_arg(_V_)}
      function remove(x$0,t)
       {if(t)
         {var r=t[4],d$0=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x$0,v);
          if(0 === c)
           {if(l)
             {if(r)
               {var match=min_binding(r),d=match[2],x=match[1];
                return bal(l,x,d,remove_min_binding(r))}
              return l}
            return r}
          if(0 <= c){var rr=remove(x$0,r);return r === rr?t:bal(l,v,d$0,rr)}
          var ll=remove(x$0,l);
          return l === ll?t:bal(ll,v,d$0,r)}
        return 0}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var param$1=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call2(f,v,d);
            var param$0=param$1;
            continue}
          return 0}}
      function map(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=map(f,l),
           d$0=caml_call1(f,d),
           r$0=map(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function mapi(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=mapi(f,l),
           d$0=caml_call2(f,v,d),
           r$0=mapi(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function fold(f,m,accu)
       {var m$0=m,accu$0=accu;
        for(;;)
         {if(m$0)
           {var
             m$1=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
             m$0=m$1,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _aIs_=caml_call2(p,v,d);
            if(_aIs_)
             {var _aIt_=for_all(p,l);
              if(_aIt_){var param$0=r;continue}
              var _aIu_=_aIt_}
            else
             var _aIu_=_aIs_;
            return _aIu_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _aIp_=caml_call2(p,v,d);
            if(_aIp_)
             var _aIq_=_aIp_;
            else
             {var _aIr_=exists(p,l);
              if(!_aIr_){var param$0=r;continue}
              var _aIq_=_aIr_}
            return _aIq_}
          return 0}}
      function add_min_binding(k,v,param)
       {if(param)
         {var r=param[4],d=param[3],x=param[2],l=param[1];
          return bal(add_min_binding(k,v,l),x,d,r)}
        return singleton(k,v)}
      function add_max_binding(k,v,param)
       {if(param)
         {var r=param[4],d=param[3],x=param[2],l=param[1];
          return bal(l,x,d,add_max_binding(k,v,r))}
        return singleton(k,v)}
      function join(l,v,d,r)
       {if(l)
         {if(r)
           {var
             rh=r[5],
             rr=r[4],
             rd=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[5],
             lr=l[4],
             ld=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,ld,join(lr,v,d,r))
                    :(lh + 2 | 0) < rh
                      ?bal(join(l,v,d,rl),rv,rd,rr)
                      :create(l,v,d,r)}
          return add_max_binding(v,d,l)}
        return add_min_binding(v,d,r)}
      function concat(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return join(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function concat_or_join(t1,v,d,t2)
       {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
      function split(x,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,l,[0,d],r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,d,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,d,r)]}
        return _W_}
      function merge(f,s1,s2)
       {if(s1)
         {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
          if(height(s2) <= h1)
           {var
             match=split(v1,s2),
             r2=match[3],
             d2=match[2],
             l2=match[1],
             _aIl_=merge(f,r1,r2),
             _aIm_=caml_call3(f,v1,[0,d1],d2);
            return concat_or_join(merge(f,l1,l2),v1,_aIm_,_aIl_)}}
        else
         if(!s2)return 0;
        if(s2)
         {var
           r2$0=s2[4],
           d2$0=s2[3],
           v2=s2[2],
           l2$0=s2[1],
           match$0=split(v2,s1),
           r1$0=match$0[3],
           d1$0=match$0[2],
           l1$0=match$0[1],
           _aIn_=merge(f,r1$0,r2$0),
           _aIo_=caml_call3(f,v2,d1$0,[0,d2$0]);
          return concat_or_join(merge(f,l1$0,l2$0),v2,_aIo_,_aIn_)}
        throw [0,Assert_failure,_X_]}
      function union(f,s1,s2)
       {if(s1)
         {if(s2)
           {var
             h2=s2[5],
             r2=s2[4],
             d2=s2[3],
             v2=s2[2],
             l2=s2[1],
             h1=s1[5],
             r1=s1[4],
             d1=s1[3],
             v1=s1[2],
             l1=s1[1];
            if(h2 <= h1)
             {var
               match=split(v1,s2),
               r2$0=match[3],
               d2$0=match[2],
               l2$0=match[1],
               l=union(f,l1,l2$0),
               r=union(f,r1,r2$0);
              if(d2$0)
               {var d2$1=d2$0[1];
                return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
              return join(l,v1,d1,r)}
            var
             match$0=split(v2,s1),
             r1$0=match$0[3],
             d1$0=match$0[2],
             l1$0=match$0[1],
             l$0=union(f,l1$0,l2),
             r$0=union(f,r1$0,r2);
            if(d1$0)
             {var d1$1=d1$0[1];
              return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
            return join(l$0,v2,d2,r$0)}
          var s=s1}
        else
         var s=s2;
        return s}
      function filter(p,t)
       {if(t)
         {var
           r=t[4],
           d=t[3],
           v=t[2],
           l=t[1],
           l$0=filter(p,l),
           pvd=caml_call2(p,v,d),
           r$0=filter(p,r);
          if(pvd){if(l === l$0)if(r === r$0)return t;return join(l$0,v,d,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pvd=caml_call2(p,v,d),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pvd){var _aIj_=concat(lf,rf);return [0,join(lt,v,d,rt),_aIj_]}
          var _aIk_=join(lf,v,d,rf);
          return [0,concat(lt,rt),_aIk_]}
        return _Y_}
      function cons_enum(m,e)
       {var m$0=m,e$0=e;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             m$1=m$0[1],
             e$1=[0,v,d,r,e$0],
             m$0=m$1,
             e$0=e$1;
            continue}
          return e$0}}
      function compare(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var c$0=caml_call2(cmp,d1,d2);
                if(0 === c$0)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                return c$0}
              return c}
            return 1}
          return e2?-1:0}}
      function equal(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               _aIg_=0 === caml_call2(Ord[1],v1,v2)?1:0;
              if(_aIg_)
               {var _aIh_=caml_call2(cmp,d1,d2);
                if(_aIh_)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                var _aIi_=_aIh_}
              else
               var _aIi_=_aIg_;
              return _aIi_}
            return 0}
          return e2?0:1}}
      function cardinal(param)
       {if(param)
         {var r=param[4],l=param[1],_aIf_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _aIf_ | 0}
        return 0}
      function bindings_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             param$1=param$0[1],
             accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=param$1;
            continue}
          return accu$0}}
      function bindings(s){return bindings_aux(0,s)}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              singleton,
              remove,
              merge,
              union,
              compare,
              equal,
              iter,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              bindings,
              min_binding,
              max_binding,
              min_binding,
              split,
              find,
              map,
              mapi]}
    caml_fresh_oo_id(0);
    caml_fresh_oo_id(0);
    var Undefined=[248,___,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        blk[1] = result;
        caml_obj_set_tag(blk,250);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    function create(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_string_length < n$0?max_string_length:n$0,
       s=caml_create_bytes(n$1);
      return [0,s,0,n$1,s]}
    function contents(b){return sub_string(b[1],0,b[2])}
    function resize(b,more)
     {var len=b[3],new_len=[0,len];
      for(;;)
       {if(new_len[1] < (b[2] + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((b[2] + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_ab_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        return 0}}
    function add_char(b,c)
     {var pos=b[2];
      if(b[3] <= pos)resize(b,1);
      caml_string_unsafe_set(b[1],pos,c);
      b[2] = pos + 1 | 0;
      return 0}
    function add_substring(b,s,offset,len)
     {var _aIc_=offset < 0?1:0;
      if(_aIc_)
       var _aId_=_aIc_;
      else
       var
        _aIe_=len < 0?1:0,
        _aId_=_aIe_ || ((caml_ml_string_length(s) - len | 0) < offset?1:0);
      if(_aId_)invalid_arg(_ac_);
      var new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      blit$0(s,offset,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      blit$0(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    var default_float_precision=-6;
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _aIa_=len < min_len?1:0;
      if(_aIa_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _aIb_=0}
      else
       var _aIb_=_aIa_;
      return _aIb_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _ad_;
         case 1:return _ae_;
         case 2:return _af_;
         case 3:return _ag_;
         case 4:return _ah_;
         case 5:return _ai_;
         default:return _aj_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return _a_(_ak_,make$0(1,c))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var fmtty$1=fmtty$0[1];
           buffer_add_string(buf,_al_);
           var fmtty$0=fmtty$1;
           continue;
          case 1:
           var fmtty$2=fmtty$0[1];
           buffer_add_string(buf,_am_);
           var fmtty$0=fmtty$2;
           continue;
          case 2:
           var fmtty$3=fmtty$0[1];
           buffer_add_string(buf,_an_);
           var fmtty$0=fmtty$3;
           continue;
          case 3:
           var fmtty$4=fmtty$0[1];
           buffer_add_string(buf,_ao_);
           var fmtty$0=fmtty$4;
           continue;
          case 4:
           var fmtty$5=fmtty$0[1];
           buffer_add_string(buf,_ap_);
           var fmtty$0=fmtty$5;
           continue;
          case 5:
           var fmtty$6=fmtty$0[1];
           buffer_add_string(buf,_aq_);
           var fmtty$0=fmtty$6;
           continue;
          case 6:
           var fmtty$7=fmtty$0[1];
           buffer_add_string(buf,_ar_);
           var fmtty$0=fmtty$7;
           continue;
          case 7:
           var fmtty$8=fmtty$0[1];
           buffer_add_string(buf,_as_);
           var fmtty$0=fmtty$8;
           continue;
          case 8:
           var fmtty$9=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_at_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_au_);
           var fmtty$0=fmtty$9;
           continue;
          case 9:
           var fmtty$10=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_av_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_aw_);
           var fmtty$0=fmtty$10;
           continue;
          case 10:
           var fmtty$11=fmtty$0[1];
           buffer_add_string(buf,_ax_);
           var fmtty$0=fmtty$11;
           continue;
          case 11:
           var fmtty$12=fmtty$0[1];
           buffer_add_string(buf,_ay_);
           var fmtty$0=fmtty$12;
           continue;
          case 12:
           var fmtty$13=fmtty$0[1];
           buffer_add_string(buf,_az_);
           var fmtty$0=fmtty$13;
           continue;
          case 13:
           var fmtty$14=fmtty$0[1];
           buffer_add_string(buf,_aA_);
           var fmtty$0=fmtty$14;
           continue;
          default:
           var fmtty$15=fmtty$0[1];
           buffer_add_string(buf,_aB_);
           var fmtty$0=fmtty$15;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _aHO_=function(param){return 0},
         _aHP_=function(param){return 0},
         _aHQ_=function(param){return 0};
        return [0,function(param){return 0},_aHQ_,_aHP_,_aHO_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _aHR_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_aHR_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _aHS_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _aHS_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _aHT_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _aHT_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _aHU_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _aHU_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _aHV_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _aHV_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _aHW_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _aHW_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _aHX_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _aHX_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _aHY_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _aHY_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _aHZ_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _aHZ_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _aH0_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _aH1_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _aH2_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _aH2_,
                  _aH1_,
                  _aH0_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _aH3_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _aH3_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _aH4_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _aH4_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _aH5_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _aH5_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _aH6_=function(param){caml_call1(de$12,0);return 0},
           _aH7_=function(param){caml_call1(ed$12,0);return 0},
           _aH8_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _aH8_,
                  _aH7_,
                  _aH6_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _aH9_=function(param){caml_call1(de$13,0);return 0},
           _aH__=function(param){caml_call1(ed$13,0);return 0},
           _aH$_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _aH$_,
                  _aH__,
                  _aH9_]}}
    function trans(ty1,match)
     {if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:throw [0,Assert_failure,_aC_]}
      else
       switch(ty1[0])
        {case 0:
          var _aHv_=ty1[1];
          if(typeof match === "number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_aHv_,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _aHw_=ty1[1];
          if(typeof match === "number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_aHw_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _aHx_=ty1[1];
          if(typeof match === "number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_aHx_,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _aHy_=ty1[1];
          if(typeof match === "number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_aHy_,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _aHz_=ty1[1];
          if(typeof match === "number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_aHz_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _aHA_=ty1[1];
          if(typeof match === "number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_aHA_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _aHB_=ty1[1];
          if(typeof match === "number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_aHB_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _aHC_=ty1[1];
          if(typeof match === "number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_aHC_,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _aHD_=ty1[2],_aHE_=ty1[1];
          if(typeof match === "number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_aHF_=trans(_aHD_,rest2$7);
              return [8,trans(_aHE_,ty2),_aHF_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,_aL_];
          break;
         case 9:
          var _aHG_=ty1[3],_aHH_=ty1[2],_aHI_=ty1[1];
          if(typeof match === "number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_aHH_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_aHI_,ty22,trans(_aHG_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_aM_];
          break;
         case 10:
          var _aHJ_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_aHJ_,rest2$9)]}
          throw [0,Assert_failure,_aN_];
         case 11:
          var _aHK_=ty1[1];
          if(typeof match === "number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:var rest2$10=match[1];return [11,trans(_aHK_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_aO_];
          break;
         case 12:
          var _aHL_=ty1[1];
          if(typeof match === "number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:var rest2$11=match[1];return [12,trans(_aHL_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_aP_];
          break;
         case 13:
          var _aHM_=ty1[1];
          if(typeof match === "number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:var rest2$12=match[1];return [13,trans(_aHM_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_aQ_];
          break;
         default:
          var _aHN_=ty1[1];
          if(typeof match === "number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:var rest2$13=match[1];return [14,trans(_aHN_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_aR_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_aF_];
        case 1:throw [0,Assert_failure,_aG_];
        case 2:throw [0,Assert_failure,_aH_];
        case 3:throw [0,Assert_failure,_aI_];
        case 4:throw [0,Assert_failure,_aJ_];
        case 5:throw [0,Assert_failure,_aD_];
        case 6:throw [0,Assert_failure,_aE_];
        default:throw [0,Assert_failure,_aK_]}}
    var Type_mismatch=[248,_aS_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _aHu_=match[2];
        if(typeof _aHu_ !== "number" && 2 === _aHu_[0])
         {var rest$0=_aHu_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw Type_mismatch}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _aG4_=type_padding(pad,fmtty),
           _aG5_=_aG4_[2],
           _aG6_=_aG4_[1];
          if(typeof _aG5_ !== "number" && 1 === _aG5_[0])
           {var
             fmtty_rest$1=_aG5_[1],
             match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_aG6_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _aG7_=type_padding(pad$0,fmtty),
           _aG8_=_aG7_[2],
           _aG9_=_aG7_[1];
          if(typeof _aG8_ !== "number" && 1 === _aG8_[0])
           {var
             fmtty_rest$2=_aG8_[1],
             match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_aG9_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _aG__=type_padprec(pad$1,prec,fmtty),
           _aG$_=_aG__[3],
           _aHa_=_aG__[2],
           _aHb_=_aG__[1];
          if(typeof _aG$_ !== "number" && 2 === _aG$_[0])
           {var
             fmtty_rest$3=_aG$_[1],
             match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_aHb_,_aHa_,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _aHc_=type_padprec(pad$2,prec$0,fmtty),
           _aHd_=_aHc_[3],
           _aHe_=_aHc_[2],
           _aHf_=_aHc_[1];
          if(typeof _aHd_ !== "number" && 3 === _aHd_[0])
           {var
             fmtty_rest$4=_aHd_[1],
             match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_aHf_,_aHe_,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _aHg_=type_padprec(pad$3,prec$1,fmtty),
           _aHh_=_aHg_[3],
           _aHi_=_aHg_[2],
           _aHj_=_aHg_[1];
          if(typeof _aHh_ !== "number" && 4 === _aHh_[0])
           {var
             fmtty_rest$5=_aHh_[1],
             match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_aHj_,_aHi_,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _aHk_=type_padprec(pad$4,prec$2,fmtty),
           _aHl_=_aHk_[3],
           _aHm_=_aHk_[2],
           _aHn_=_aHk_[1];
          if(typeof _aHl_ !== "number" && 5 === _aHl_[0])
           {var
             fmtty_rest$6=_aHl_[1],
             match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_aHn_,_aHm_,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _aHo_=type_padprec(pad$5,prec$3,fmtty),
           _aHp_=_aHo_[3],
           _aHq_=_aHo_[2],
           _aHr_=_aHo_[1];
          if(typeof _aHp_ !== "number" && 6 === _aHp_[0])
           {var
             fmtty_rest$7=_aHp_[1],
             match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_aHr_,_aHq_,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          if(typeof fmtty !== "number" && 7 === fmtty[0])
           {var
             fmtty_rest$8=fmtty[1],
             fmt_rest$8=fmt[1],
             match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,fmt$9],fmtty$9]}
          break;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _aHs_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_aHs_))
             throw Type_mismatch;
            var
             match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=type_format_gen(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,3,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([7,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 8:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _aHt_=type_ignored_format_substitution(sub_fmtty$3,rest,fmtty),
               match$27=_aHt_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_aHt_[1];
              return [0,[23,[8,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 9:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substitution(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substitution(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substitution
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substitution
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substitution
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substitution
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substitution
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substitution
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substitution
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substitution
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _aG2_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_aG2_))
             throw Type_mismatch;
            var _aG3_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_aG3_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substitution
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substitution
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substitution
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substitution
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substitution
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _aG1_=2 === padty$0?48:32,res=make(width$0,_aG1_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         if(0 < len)
          {if(43 === caml_string_get(str,0))
            var switch$1=1;
           else
            if(45 === caml_string_get(str,0))
             var switch$1=1;
            else
             if(32 === caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0);
             var switch$0=1}}
         else
          var switch$0=0;
         if(!switch$0)
          {if(1 < len)
            if(48 === caml_string_get(str,0))
             {if(120 === caml_string_get(str,1))
               var switch$3=1;
              else
               if(88 === caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               {caml_bytes_set(res,1,caml_string_get(str,1));
                blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(!switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return res}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0);
      if(58 <= c)
       var switch$0=71 <= c?5 < (c - 97 | 0) >>> 0?1:0:65 <= c?0:1;
      else
       {if(32 === c)
         var switch$1=1;
        else
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0))
               if(1 < len)
                {var
                  switch$2=
                   120 === caml_string_get(str,1)
                    ?0
                    :88 === caml_string_get(str,1)?0:1;
                 if(!switch$2)
                  {var res$1=make(prec$0 + 2 | 0,48);
                   caml_bytes_set(res$1,1,caml_string_get(str,1));
                   blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   return res$1}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         {if(len < (prec$0 + 1 | 0))
           {var res$0=make(prec$0 + 1 | 0,48);
            caml_bytes_set(res$0,0,c);
            blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
            return res$0}
          var switch$0=1}}
      if(!switch$0)
       if(len < prec$0)
        {var res=make(prec$0,48);
         blit$0(str,0,res,prec$0 - len | 0,len);
         return res}
      return str}
    function string_to_caml_string(str)
     {var i$1=0;
      for(;;)
       {if(caml_ml_string_length(str) <= i$1)
         var _aG0_=0;
        else
         {var match$0=caml_string_unsafe_get(str,i$1);
          if(32 <= match$0)
           {var _aGZ_=match$0 - 34 | 0;
            if(58 < _aGZ_ >>> 0)
             if(93 <= _aGZ_)var switch$0=0,switch$1=0;else var switch$1=1;
            else
             if(56 < (_aGZ_ - 1 | 0) >>> 0)
              var switch$0=1,switch$1=0;
             else
              var switch$1=1;
            if(switch$1){var i$2=i$1 + 1 | 0,i$1=i$2;continue}}
          else
           var switch$0=11 <= match$0?13 === match$0?1:0:8 <= match$0?1:0;
          var _aG0_=switch$0?1:1}
        if(_aG0_)
         {var n=[0,0],_aGS_=caml_ml_bytes_length(str) - 1 | 0,_aGR_=0;
          if(!(_aGS_ < 0))
           {var i$0=_aGR_;
            for(;;)
             {var match=caml_string_unsafe_get(str,i$0);
              if(32 <= match)
               {var _aGW_=match - 34 | 0;
                if(58 < _aGW_ >>> 0)
                 if(93 <= _aGW_)var switch$2=0,switch$3=0;else var switch$3=1;
                else
                 if(56 < (_aGW_ - 1 | 0) >>> 0)
                  var switch$2=1,switch$3=0;
                 else
                  var switch$3=1;
                if(switch$3)var _aGX_=1,switch$2=2}
              else
               var switch$2=11 <= match?13 === match?1:0:8 <= match?1:0;
              switch(switch$2)
               {case 0:var _aGX_=4;break;case 1:var _aGX_=2;break}
              n[1] = n[1] + _aGX_ | 0;
              var _aGY_=i$0 + 1 | 0;
              if(_aGS_ !== i$0){var i$0=_aGY_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(str))
           var str$0=copy(str);
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _aGU_=caml_ml_bytes_length(str) - 1 | 0,_aGT_=0;
            if(!(_aGU_ < 0))
             {var i=_aGT_;
              for(;;)
               {var c=caml_string_unsafe_get(str,i);
                if(35 <= c)
                 var switch$4=92 === c?1:127 <= c?0:2;
                else
                 if(32 <= c)
                  var switch$4=34 <= c?1:2;
                 else
                  if(14 <= c)
                   var switch$4=0;
                  else
                   switch(c)
                    {case 8:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],98);
                      var switch$4=3;
                      break;
                     case 9:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],116);
                      var switch$4=3;
                      break;
                     case 10:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],110);
                      var switch$4=3;
                      break;
                     case 13:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],114);
                      var switch$4=3;
                      break;
                     default:var switch$4=0}
                switch(switch$4)
                 {case 0:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 1:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],c);
                   break;
                  case 2:caml_string_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _aGV_=i + 1 | 0;
                if(_aGU_ !== i){var i=_aGV_;continue}
                break}}
            var str$0=s}}
        else
         var str$0=str;
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return res}}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 0:var _aGQ_=_aT_;break;
        case 1:var _aGQ_=_aU_;break;
        case 2:var _aGQ_=_aV_;break;
        case 3:var _aGQ_=_aW_;break;
        case 4:var _aGQ_=_aX_;break;
        case 5:var _aGQ_=_aY_;break;
        case 6:var _aGQ_=_aZ_;break;
        case 7:var _aGQ_=_a0_;break;
        case 8:var _aGQ_=_a1_;break;
        case 9:var _aGQ_=_a2_;break;
        case 10:var _aGQ_=_a3_;break;
        case 11:var _aGQ_=_a4_;break;
        default:var _aGQ_=_a5_}
      return caml_format_int(_aGQ_,n)}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 0:var _aGP_=_bh_;break;
        case 1:var _aGP_=_bi_;break;
        case 2:var _aGP_=_bj_;break;
        case 3:var _aGP_=_bk_;break;
        case 4:var _aGP_=_bl_;break;
        case 5:var _aGP_=_bm_;break;
        case 6:var _aGP_=_bn_;break;
        case 7:var _aGP_=_bo_;break;
        case 8:var _aGP_=_bp_;break;
        case 9:var _aGP_=_bq_;break;
        case 10:var _aGP_=_br_;break;
        case 11:var _aGP_=_bs_;break;
        default:var _aGP_=_bt_}
      return caml_format_int(_aGP_,n)}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 0:var _aGO_=_bu_;break;
        case 1:var _aGO_=_bv_;break;
        case 2:var _aGO_=_bw_;break;
        case 3:var _aGO_=_bx_;break;
        case 4:var _aGO_=_by_;break;
        case 5:var _aGO_=_bz_;break;
        case 6:var _aGO_=_bA_;break;
        case 7:var _aGO_=_bB_;break;
        case 8:var _aGO_=_bC_;break;
        case 9:var _aGO_=_bD_;break;
        case 10:var _aGO_=_bE_;break;
        case 11:var _aGO_=_bF_;break;
        default:var _aGO_=_bG_}
      return caml_format_int(_aGO_,n)}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 0:var _aGN_=_a6_;break;
        case 1:var _aGN_=_a7_;break;
        case 2:var _aGN_=_a8_;break;
        case 3:var _aGN_=_a9_;break;
        case 4:var _aGN_=_a__;break;
        case 5:var _aGN_=_a$_;break;
        case 6:var _aGN_=_ba_;break;
        case 7:var _aGN_=_bb_;break;
        case 8:var _aGN_=_bc_;break;
        case 9:var _aGN_=_bd_;break;
        case 10:var _aGN_=_be_;break;
        case 11:var _aGN_=_bf_;break;
        default:var _aGN_=_bg_}
      return caml_int64_format(_aGN_,n)}
    function convert_float(fconv,prec$0,x)
     {if(16 <= fconv)
       {if(17 <= fconv)
         switch(fconv - 17 | 0)
          {case 2:var switch$0=0;break;
           case 0:
           case 3:var sign=43,switch$0=1;break;
           default:var sign=32,switch$0=1}
        else
         var switch$0=0;
        if(!switch$0)var sign=45;
        var str=caml_hexstring_of_float(x,prec$0,sign);
        return 19 <= fconv?uppercase_ascii$0(str):str}
      if(15 === fconv)
       var _aGK_=_bH_;
      else
       {var prec=abs(prec$0);
        switch(fconv)
         {case 15:var symb=70;break;
          case 0:
          case 1:
          case 2:var symb=102;break;
          case 3:
          case 4:
          case 5:var symb=101;break;
          case 6:
          case 7:
          case 8:var symb=69;break;
          case 9:
          case 10:
          case 11:var symb=103;break;
          case 12:
          case 13:
          case 14:var symb=71;break;
          case 16:
          case 17:
          case 18:var symb=104;break;
          default:var symb=72}
        var buf=buffer_create(16);
        buffer_add_char(buf,37);
        switch(fconv)
         {case 1:
          case 4:
          case 7:
          case 10:
          case 13:
          case 17:
          case 20:buffer_add_char(buf,43);break;
          case 2:
          case 5:
          case 8:
          case 11:
          case 14:
          case 18:
          case 21:buffer_add_char(buf,32);break
          }
        buffer_add_char(buf,46);
        buffer_add_string(buf,caml_new_string("" + prec));
        buffer_add_char(buf,symb);
        var _aGK_=buffer_contents(buf)}
      var str$0=caml_format_float(_aGK_,x);
      if(15 === fconv)
       {var len=caml_ml_string_length(str$0),match$0=caml_classify_float(x);
        if(3 === match$0)return x < 0?_bI_:_bJ_;
        if(4 <= match$0)return _bK_;
        var i=0;
        for(;;)
         {if(i === len)
           var _aGM_=0;
          else
           {var
             match=caml_string_get(str$0,i),
             _aGL_=match - 46 | 0,
             switch$1=
              23 < _aGL_ >>> 0?55 === _aGL_?1:0:21 < (_aGL_ - 1 | 0) >>> 0?1:0;
            if(!switch$1){var i$0=i + 1 | 0,i=i$0;continue}
            var _aGM_=1}
          return _aGM_?str$0:_a_(str$0,_bL_)}}
      return str$0}
    function make_int_padding_precision(k,o,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,o,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _aGH_=pad[2],_aGI_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=fix_padding(_aGI_,_aGH_,caml_call2(trans,iconv,x));
                      return make_printf(k,o,[4,acc,str],fmt)}
                   :function(p,x)
                     {var
                       str=
                        fix_padding
                         (_aGI_,_aGH_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,o,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_aGI_,_aGH_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,o,[4,acc,str],fmt)}}
        var _aGJ_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=fix_padding(_aGJ_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_aGJ_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_aGJ_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,o,[4,acc,str],fmt)}}}
    function make_string_padding(k,o,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,o,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,o,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,o,new_acc,fmt)}}}
    function make_printf$0(counter,k,o,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call2(k$0,o,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,o,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {if(40 <= c)
              if(92 === c)
               var str=_s_,switch$0=2;
              else
               var switch$0=127 <= c?0:1;
             else
              if(32 <= c)
               if(39 <= c)var str=_t_,switch$0=2;else var switch$0=1;
              else
               if(14 <= c)
                var switch$0=0;
               else
                switch(c)
                 {case 8:var str=_u_,switch$0=2;break;
                  case 9:var str=_v_,switch$0=2;break;
                  case 10:var str=_w_,switch$0=2;break;
                  case 13:var str=_x_,switch$0=2;break;
                  default:var switch$0=0}
             switch(switch$0)
              {case 0:
                var s=caml_create_bytes(4);
                caml_string_unsafe_set(s,0,92);
                caml_string_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_string_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_string_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=s;
                break;
               case 1:
                var s$0=caml_create_bytes(1);
                caml_string_unsafe_set(s$0,0,c);
                var str=s$0;
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,res];
             return make_printf(k$0,o,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_string_padding
                   (k$0,o,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_string_padding
                   (k$0,o,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var str=convert_float(fconv,default_float_precision,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _aGD_=pad$5[2],_aGE_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var
                            str=convert_float(fconv,default_float_precision,x),
                            str$0=fix_padding(_aGE_,_aGD_,str);
                           return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=fix_padding(_aGE_,_aGD_,convert_float(fconv,p,x));
                           return make_printf(k$0,o,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_aGE_,_aGD_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
             var _aGF_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision,x),
                          str$0=fix_padding(_aGF_,w,str);
                         return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=fix_padding(_aGF_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_aGF_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[1];
           return function(b)
            {return make_printf(k$0,o,[4,acc$0,string_of_bool(b)],rest$8)};
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str)
            {return make_printf(k$0,o,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _aGG_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _aGG_[2] === "number")
              {var fmt=_aGG_[1];
               return make_printf(k$0,o,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      o,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,o,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _aGB_=fmt$0[1];
           if(0 === _aGB_[0])
            {var
              rest$13=fmt$0[2],
              match=_aGB_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(koc,kacc)
                  {return make_printf(k,koc,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_aGB_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(koc,kacc)
                {return make_printf(k,koc,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bM_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bN_];
           return function(param){return make_printf(k$0,o,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bO_,n)];
             return make_printf(k$0,o,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];
             return make_printf(k$0,o,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 3:throw [0,Assert_failure,_bP_];
              default:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 8:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,o,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,o,acc$0,fmtty$0,rest$18]);
              case 9:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _aGC_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,o,acc$0,rest$19,arity,_aGC_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,o,acc$0,rest$19,arity,_aGC_])}}
    function make_from_fmtty$0(counter,k,o,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,o,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,o,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,o,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_aGA_)
           {return make_from_fmtty(k,o,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bQ_];
         default:throw [0,Assert_failure,_bR_]}}
    function make_invalid_arg(counter,k,o,acc,fmt)
     {var _aGz_=[8,acc,_bS_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_aGz_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_aGz_,fmt])}
    function make_custom$0(counter,k,o,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,o,acc,rest,arity$0,caml_call1(f,x))}}
      var _aGy_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_aGy_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_aGy_,rest])}
    function make_printf(k,o,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,o,acc,fmt))}
    function make_from_fmtty(k,o,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,o,acc,fmtty,fmt))}
    function make_custom(k,o,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,o,acc,rest,arity,f))}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _aGw_=acc$0[2],_aGx_=acc$0[1];
           if(0 === _aGw_[0])
            {var acc$1=_aGw_[1];
             output_acc(o,_aGx_);
             output_string(o,_bT_);
             var acc$0=acc$1;
             continue}
           var acc$2=_aGw_[1];
           output_acc(o,_aGx_);
           output_string(o,_bU_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _aGu_=acc$0[2],_aGv_=acc$0[1];
           if(0 === _aGu_[0])
            {var acc$1=_aGu_[1];
             strput_acc(b,_aGv_);
             add_string(b,_bV_);
             var acc$0=acc$1;
             continue}
           var acc$2=_aGu_[1];
           strput_acc(b,_aGv_);
           add_string(b,_bW_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];strput_acc(b,p$1);return add_char(b,c)}}
    function open_box_of_string(str)
     {if(caml_string_equal(str,_bX_))return _bY_;
      var len=caml_ml_string_length(str);
      function invalid_box(param$0)
       {var fmt=param[1],buf=create(256);
        function k(param,acc)
         {strput_acc(buf,acc);return failwith(contents(buf))}
        return caml_call1(make_printf(k,0,0,fmt),str)}
      function parse_spaces(i)
       {var i$0=i;
        for(;;)
         {if(i$0 === len)return i$0;
          var match=caml_string_get(str,i$0);
          if(9 !== match)if(32 !== match)return i$0;
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function parse_lword(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switcher=match - 97 | 0;
          if(25 < switcher >>> 0)return j$0;
          var j$1=j$0 + 1 | 0,j$0=j$1;
          continue}}
      function parse_int(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var
           match=caml_string_get(str,j$0),
           switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
          if(switch$0){var j$1=j$0 + 1 | 0,j$0=j$1;continue}
          return j$0}}
      var
       wstart=parse_spaces(0),
       wend=parse_lword(wstart,wstart),
       box_name=k(str,wstart,wend - wstart | 0),
       nstart=parse_spaces(wend),
       nend=parse_int(nstart,nstart);
      if(nstart === nend)
       var indent=0;
      else
       try
        {var
          _aGs_=caml_int_of_string(k(str,nstart,nend - nstart | 0)),
          indent=_aGs_}
       catch(_aGt_)
        {_aGt_ = caml_wrap_exception(_aGt_);
         if(_aGt_[1] !== Failure)throw _aGt_;
         var indent=invalid_box(0)}
      var exp_end=parse_spaces(nend);
      if(exp_end !== len)invalid_box(0);
      if(caml_string_notequal(box_name,_bZ_))
       if(caml_string_notequal(box_name,_b0_))
        if(caml_string_notequal(box_name,_b1_))
         if(caml_string_notequal(box_name,_b2_))
          if(caml_string_notequal(box_name,_b3_))
           if(caml_string_notequal(box_name,_b4_))
            var box_type=invalid_box(0),switch$0=1;
           else
            var box_type=1,switch$0=1;
          else
           var box_type=2,switch$0=1;
         else
          var box_type=3,switch$0=1;
        else
         var box_type=0,switch$0=1;
       else
        var switch$0=0;
      else
       var switch$0=0;
      if(!switch$0)var box_type=4;
      return [0,indent,box_type]}
    function printf(fmt$0)
     {var fmt=fmt$0[1],_aGr_=0;
      return make_printf
              (function(o,acc){output_acc(o,acc);return 0},oc,_aGr_,fmt)}
    function sprintf(fmt$0)
     {var fmt=fmt$0[1];
      function k(param,acc)
       {var buf=create(64);strput_acc(buf,acc);return contents(buf)}
      return make_printf(k,0,0,fmt)}
    var printers=[0,0];
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    function bits(s)
     {s[2] = (s[2] + 1 | 0) % 55 | 0;
      var
       _aGo_=s[2],
       curval=caml_check_bound(s[1],_aGo_)[_aGo_ + 1],
       _aGp_=(s[2] + 24 | 0) % 55 | 0,
       newval=
        caml_check_bound(s[1],_aGp_)[_aGp_ + 1]
        +
        (curval ^ (curval >>> 25 | 0) & 31)
        |
        0,
       newval30=newval & 1073741823,
       _aGq_=s[2];
      caml_check_bound(s[1],_aGq_)[_aGq_ + 1] = newval30;
      return newval30}
    var s=[0,_b7_.slice(),0];
    function ongoing_traversal(h)
     {var _aGm_=h.length - 1 < 4?1:0,_aGn_=_aGm_ || (h[4] < 0?1:0);
      return _aGn_}
    function flip_ongoing_traversal(h){h[4] = -h[4] | 0;return 0}
    try
     {var _UA_=caml_sys_getenv(_Uz_),params=_UA_}
    catch(_aGk_)
     {_aGk_ = caml_wrap_exception(_aGk_);
      if(_aGk_ !== Not_found)throw _aGk_;
      try
       {var _Uy_=caml_sys_getenv(_Ux_),_b9_=_Uy_}
      catch(_aGl_)
       {_aGl_ = caml_wrap_exception(_aGl_);
        if(_aGl_ !== Not_found)throw _aGl_;
        var _b9_=_b8_}
      var params=_b9_}
    var
     randomized_default=contains(params,82),
     prng=
      [246,
       function(_aGj_)
        {var
          seed$0=caml_sys_random_seed(0),
          result=[0,caml_make_vect(55,0),0],
          seed=0 === seed$0.length - 1?[0,0]:seed$0,
          l=seed.length - 1,
          i$0=0;
         for(;;)
          {caml_check_bound(result[1],i$0)[i$0 + 1] = i$0;
           var _aGi_=i$0 + 1 | 0;
           if(54 !== i$0){var i$0=_aGi_;continue}
           var accu=[0,_b5_],_aGe_=54 + max(55,l) | 0,_aGd_=0;
           if(!(_aGe_ < 0))
            {var i=_aGd_;
             for(;;)
              {var
                j=i % 55 | 0,
                k=caml_mod(i,l),
                x=caml_check_bound(seed,k)[k + 1],
                str=_a_(accu[1],caml_new_string("" + x));
               accu[1] = caml_md5_string(str,0,caml_ml_string_length(str));
               var
                _aGf_=accu[1],
                _aF$_=caml_string_get(_aGf_,3) << 24,
                _aGa_=caml_string_get(_aGf_,2) << 16,
                _aGb_=caml_string_get(_aGf_,1) << 8,
                _aGc_=
                 ((caml_string_get(_aGf_,0) + _aGb_ | 0) + _aGa_ | 0)
                 +
                 _aF$_
                 |
                 0,
                _aGg_=
                 (caml_check_bound(result[1],j)[j + 1] ^ _aGc_)
                 &
                 1073741823;
               caml_check_bound(result[1],j)[j + 1] = _aGg_;
               var _aGh_=i + 1 | 0;
               if(_aGe_ !== i){var i=_aGh_;continue}
               break}}
           result[2] = 0;
           return result}}];
    function create$0(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized_default;
      var x=16;
      for(;;)
       {if(!(initial_size <= x))
         if(!(max_array_length < (x * 2 | 0)))
          {var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         var
          _aF9_=caml_obj_tag(prng),
          _aF__=
           250 === _aF9_?prng[1]:246 === _aF9_?force_lazy_block(prng):prng,
          seed=bits(_aF__);
        else
         var seed=0;
        return [0,0,caml_make_vect(x,0),seed,x]}}
    function resize$0(indexfun,h)
     {var
       odata=h[2],
       osize=odata.length - 1,
       nsize=osize * 2 | 0,
       _aF0_=nsize < max_array_length?1:0;
      if(_aF0_)
       {var
         ndata=caml_make_vect(nsize,0),
         ndata_tail=caml_make_vect(nsize,0),
         inplace=1 - ongoing_traversal(h);
        h[2] = ndata;
        var _aF2_=osize - 1 | 0,_aF1_=0;
        if(!(_aF2_ < 0))
         {var i$0=_aF1_;
          a:
          for(;;)
           {var cell$1=caml_check_bound(odata,i$0)[i$0 + 1],cell=cell$1;
            for(;;)
             {if(cell)
               {var
                 key=cell[1],
                 data=cell[2],
                 next=cell[3],
                 cell$0=inplace?cell:[0,key,data,0],
                 nidx=caml_call2(indexfun,h,key),
                 match=caml_check_bound(ndata_tail,nidx)[nidx + 1];
                if(match)
                 match[3] = cell$0;
                else
                 caml_check_bound(ndata,nidx)[nidx + 1] = cell$0;
                caml_check_bound(ndata_tail,nidx)[nidx + 1] = cell$0;
                var cell=next;
                continue}
              var _aF8_=i$0 + 1 | 0;
              if(_aF2_ !== i$0){var i$0=_aF8_;continue a}
              break}
            break}}
        if(inplace)
         {var _aF4_=nsize - 1 | 0,_aF3_=0;
          if(!(_aF4_ < 0))
           {var i=_aF3_;
            for(;;)
             {var match$0=caml_check_bound(ndata_tail,i)[i + 1];
              if(match$0)match$0[3] = 0;
              var _aF7_=i + 1 | 0;
              if(_aF4_ !== i){var i=_aF7_;continue}
              break}}
          var _aF5_=0}
        else
         var _aF5_=inplace;
        var _aF6_=_aF5_}
      else
       var _aF6_=_aF0_;
      return _aF6_}
    function key_index(h,key)
     {return 3 <= h.length - 1
              ?caml_hash(10,100,h[3],key) & (h[2].length - 1 - 1 | 0)
              :caml_mod(caml_hash_univ_param(10,100,key),h[2].length - 1)}
    function add(h,key,data)
     {var
       i=key_index(h,key),
       bucket=[0,key,data,caml_check_bound(h[2],i)[i + 1]];
      caml_check_bound(h[2],i)[i + 1] = bucket;
      h[1] = h[1] + 1 | 0;
      var _aFZ_=h[2].length - 1 << 1 < h[1]?1:0;
      return _aFZ_?resize$0(key_index,h):_aFZ_}
    function find$0(h,key)
     {var
       _aFY_=key_index(h,key),
       match=caml_check_bound(h[2],_aFY_)[_aFY_ + 1];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return d1;
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return d2;
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(0 === caml_compare(key,k3))return d3;
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(0 === caml_compare(key,k))return data;
                var param=next;
                continue}
              throw Not_found}}
          throw Not_found}
        throw Not_found}
      throw Not_found}
    function replace(h,key,data)
     {var
       i=key_index(h,key),
       param$0=caml_check_bound(h[2],i)[i + 1],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3];
          if(0 !== caml_compare(k,key)){var param=next;continue}
          param[1] = key;
          param[2] = data;
          var _aFV_=0}
        else
         var _aFV_=1;
        if(_aFV_)
         {caml_check_bound(h[2],i)[i + 1] = [0,key,data,param$0];
          h[1] = h[1] + 1 | 0;
          var _aFW_=h[2].length - 1 << 1 < h[1]?1:0;
          if(_aFW_)return resize$0(key_index,h);
          var _aFX_=_aFW_}
        else
         var _aFX_=_aFV_;
        return _aFX_}}
    function mem(h,key)
     {var
       _aFU_=key_index(h,key),
       param$0=caml_check_bound(h[2],_aFU_)[_aFU_ + 1],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3],_aFT_=0 === caml_compare(k,key)?1:0;
          if(_aFT_)return _aFT_;
          var param=next;
          continue}
        return 0}}
    function fold(f,h,init)
     {function do_bucket(b,accu)
       {var b$0=b,accu$0=accu;
        for(;;)
         {if(b$0)
           {var
             key=b$0[1],
             data=b$0[2],
             b$1=b$0[3],
             accu$1=caml_call3(f,key,data,accu$0),
             b$0=b$1,
             accu$0=accu$1;
            continue}
          return accu$0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],accu=[0,init],_aFP_=d.length - 1 - 1 | 0,_aFO_=0;
        if(!(_aFP_ < 0))
         {var i=_aFO_;
          for(;;)
           {var _aFR_=accu[1];
            accu[1] = do_bucket(caml_check_bound(d,i)[i + 1],_aFR_);
            var _aFS_=i + 1 | 0;
            if(_aFP_ !== i){var i=_aFS_;continue}
            break}}
        if(1 - old_trav)flip_ongoing_traversal(h);
        var _aFQ_=accu[1];
        return _aFQ_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function add_queue(x,q)
     {var c=[0,x,0],_aFN_=q[1];
      return _aFN_?(q[1] = c,_aFN_[2] = c,0):(q[1] = c,q[2] = c,0)}
    var Empty_queue=[248,_b__,caml_fresh_oo_id(0)];
    function take_queue(q)
     {var _aFM_=q[2];
      if(_aFM_)
       {var x=_aFM_[1],tl=_aFM_[2];q[2] = tl;if(0 === tl)q[1] = 0;return x}
      throw Empty_queue}
    function pp_enqueue(state,token)
     {var len=token[3];
      state[13] = state[13] + len | 0;
      return add_queue(token,state[27])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function pp_output_spaces(state,n){return caml_call1(state[20],n)}
    function break_new_line(state,offset,width)
     {pp_output_newline(state);
      state[11] = 1;
      var
       indent=(state[6] - width | 0) + offset | 0,
       real_indent=min(state[8],indent);
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      return pp_output_spaces(state,state[10])}
    function break_line(state,width){return break_new_line(state,0,width)}
    function break_same_line(state,width)
     {state[9] = state[9] - width | 0;return pp_output_spaces(state,width)}
    function pp_force_break_line(state)
     {var _aFJ_=state[2];
      if(_aFJ_)
       {var
         match=_aFJ_[1],
         width=match[2],
         bl_ty=match[1],
         _aFK_=state[9] < width?1:0;
        if(_aFK_)
         {if(0 !== bl_ty)return 5 <= bl_ty?0:break_line(state,width);
          var _aFL_=0}
        else
         var _aFL_=_aFK_;
        return _aFL_}
      return pp_output_newline(state)}
    function pp_skip_token(state)
     {var match=take_queue(state[27]),size=match[1],len=match[3];
      state[12] = state[12] - len | 0;
      state[9] = state[9] + size | 0;
      return 0}
    function format_pp_token(state,size,param)
     {if(typeof param === "number")
       switch(param)
        {case 0:
          var _aFy_=state[3];
          if(_aFy_)
           {var
             match=_aFy_[1],
             tabs=match[1],
             add_tab=
              function(n,ls)
               {if(ls)
                 {var l=ls[2],x=ls[1];
                  return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]}
                return [0,n,0]};
            tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1]);
            return 0}
          return 0;
         case 1:
          var _aFz_=state[2];
          if(_aFz_){var ls=_aFz_[2];state[2] = ls;return 0}
          return 0;
         case 2:
          var _aFA_=state[3];
          if(_aFA_){var ls$0=_aFA_[2];state[3] = ls$0;return 0}
          return 0;
         case 3:
          var _aFB_=state[2];
          if(_aFB_)
           {var match$0=_aFB_[1],width=match$0[2];
            return break_line(state,width)}
          return pp_output_newline(state);
         case 4:
          var _aFC_=state[10] !== (state[6] - state[9] | 0)?1:0;
          return _aFC_?pp_skip_token(state):_aFC_;
         default:
          var _aFD_=state[5];
          if(_aFD_)
           {var
             tags=_aFD_[2],
             tag_name=_aFD_[1],
             marker=caml_call1(state[24],tag_name);
            pp_output_string(state,marker);
            state[5] = tags;
            return 0}
          return 0}
      else
       switch(param[0])
        {case 0:
          var s=param[1];
          state[9] = state[9] - size | 0;
          pp_output_string(state,s);
          state[11] = 0;
          return 0;
         case 1:
          var off=param[2],n=param[1],_aFE_=state[2];
          if(_aFE_)
           {var match$1=_aFE_[1],width$0=match$1[2],ty=match$1[1];
            switch(ty)
             {case 0:return break_same_line(state,n);
              case 1:return break_new_line(state,off,width$0);
              case 2:return break_new_line(state,off,width$0);
              case 3:
               return state[9] < size
                       ?break_new_line(state,off,width$0)
                       :break_same_line(state,n);
              case 4:
               return state[11]
                       ?break_same_line(state,n)
                       :state[9] < size
                         ?break_new_line(state,off,width$0)
                         :((state[6] - width$0 | 0) + off | 0) < state[10]
                           ?break_new_line(state,off,width$0)
                           :break_same_line(state,n);
              default:return break_same_line(state,n)}}
          return 0;
         case 2:
          var
           off$0=param[2],
           n$0=param[1],
           insertion_point=state[6] - state[9] | 0,
           _aFF_=state[3];
          if(_aFF_)
           {var
             match$2=_aFF_[1],
             tabs$0=match$2[1],
             find=
              function(n,param)
               {var param$0=param;
                for(;;)
                 {if(param$0)
                   {var l=param$0[2],x=param$0[1];
                    if(caml_greaterequal(x,n))return x;
                    var param$0=l;
                    continue}
                  throw Not_found}},
             _aFG_=tabs$0[1];
            if(_aFG_)
             {var x=_aFG_[1];
              try
               {var _aFH_=find(insertion_point,tabs$0[1]),x$0=_aFH_}
              catch(_aFI_)
               {_aFI_ = caml_wrap_exception(_aFI_);
                if(_aFI_ !== Not_found)throw _aFI_;
                var x$0=x}
              var tab=x$0}
            else
             var tab=insertion_point;
            var offset=tab - insertion_point | 0;
            return 0 <= offset
                    ?break_same_line(state,offset + n$0 | 0)
                    :break_new_line(state,tab + off$0 | 0,state[6])}
          return 0;
         case 3:
          var
           ty$0=param[2],
           off$1=param[1],
           insertion_point$0=state[6] - state[9] | 0;
          if(state[8] < insertion_point$0)pp_force_break_line(state);
          var
           offset$0=state[9] - off$1 | 0,
           bl_type=1 === ty$0?1:state[9] < size?ty$0:5;
          state[2] = [0,[0,bl_type,offset$0],state[2]];
          return 0;
         case 4:var tbox=param[1];state[3] = [0,tbox,state[3]];return 0;
         default:
          var tag_name$0=param[1],marker$0=caml_call1(state[23],tag_name$0);
          pp_output_string(state,marker$0);
          state[5] = [0,tag_name$0,state[5]];
          return 0}}
    function advance_loop(state)
     {for(;;)
       {var _aFu_=state[27][2];
        if(_aFu_)
         {var
           x=_aFu_[1],
           size=x[1],
           len=x[3],
           tok=x[2],
           _aFv_=size < 0?1:0,
           _aFw_=_aFv_?(state[13] - state[12] | 0) < state[9]?1:0:_aFv_,
           _aFx_=1 - _aFw_;
          if(_aFx_)
           {take_queue(state[27]);
            var size$0=0 <= size?size:pp_infinity;
            format_pp_token(state,size$0,tok);
            state[12] = len + state[12] | 0;
            continue}
          return _aFx_}
        throw Empty_queue}}
    function advance_left(state)
     {try
       {var _aFs_=advance_loop(state);return _aFs_}
      catch(_aFt_)
       {_aFt_ = caml_wrap_exception(_aFt_);
        if(_aFt_ === Empty_queue)return 0;
        throw _aFt_}}
    function enqueue_advance(state,tok)
     {pp_enqueue(state,tok);return advance_left(state)}
    function enqueue_string_as(state,size,s)
     {return enqueue_advance(state,[0,size,[0,s],size])}
    var q_elem=[0,-1,_b$_,0],scan_stack_bottom=[0,[0,-1,q_elem],0];
    function clear_scan_stack(state){state[1] = scan_stack_bottom;return 0}
    function set_size(state,ty)
     {var _aFo_=state[1];
      if(_aFo_)
       {var
         match=_aFo_[1],
         queue_elem=match[2],
         left_tot=match[1],
         size=queue_elem[1],
         t=_aFo_[2],
         tok=queue_elem[2];
        if(left_tot < state[12])return clear_scan_stack(state);
        if(typeof tok !== "number")
         switch(tok[0])
          {case 3:
            var
             _aFq_=1 - ty,
             _aFr_=
              _aFq_
               ?(queue_elem[1] = state[13] + size | 0,state[1] = t,0)
               :_aFq_;
            return _aFr_;
           case 1:
           case 2:
            var
             _aFp_=
              ty?(queue_elem[1] = state[13] + size | 0,state[1] = t,0):ty;
            return _aFp_
           }
        return 0}
      return 0}
    function scan_push(state,b,tok)
     {pp_enqueue(state,tok);
      if(b)set_size(state,1);
      state[1] = [0,[0,state[13],tok],state[1]];
      return 0}
    function pp_open_box_gen(state,indent,br_ty)
     {state[14] = state[14] + 1 | 0;
      if(state[14] < state[15])
       {var elem=[0,-state[13] | 0,[3,indent,br_ty],0];
        return scan_push(state,0,elem)}
      var _aFm_=state[14] === state[15]?1:0;
      if(_aFm_)
       {var _aFn_=state[16],len=caml_ml_string_length(_aFn_);
        return enqueue_string_as(state,len,_aFn_)}
      return _aFm_}
    function pp_close_box(state,param)
     {var _aFk_=1 < state[14]?1:0;
      if(_aFk_)
       {if(state[14] < state[15])
         {pp_enqueue(state,[0,0,1,0]);set_size(state,1);set_size(state,0)}
        state[14] = state[14] - 1 | 0;
        var _aFl_=0}
      else
       var _aFl_=_aFk_;
      return _aFl_}
    function pp_flush_queue(state,b)
     {for(;;)
       {if(1 < state[14]){pp_close_box(state,0);continue}
        state[13] = pp_infinity;
        advance_left(state);
        if(b)pp_output_newline(state);
        state[12] = 1;
        state[13] = 1;
        var _aFj_=state[27];
        _aFj_[1] = 0;
        _aFj_[2] = 0;
        clear_scan_stack(state);
        state[2] = 0;
        state[3] = 0;
        state[4] = 0;
        state[5] = 0;
        state[10] = 0;
        state[14] = 0;
        state[9] = state[6];
        return pp_open_box_gen(state,0,3)}}
    function pp_print_as_size(state,size,s)
     {var _aFi_=state[14] < state[15]?1:0;
      return _aFi_?enqueue_string_as(state,size,s):_aFi_}
    function pp_print_as(state,isize,s)
     {return pp_print_as_size(state,isize,s)}
    function pp_print_string(state,s)
     {return pp_print_as(state,caml_ml_string_length(s),s)}
    function pp_print_int(state,i)
     {return pp_print_string(state,caml_new_string("" + i))}
    function pp_print_char(state,c){return pp_print_as(state,1,make$0(1,c))}
    function pp_open_box(state,indent){return pp_open_box_gen(state,indent,4)}
    function pp_print_flush(state,param)
     {pp_flush_queue(state,0);return caml_call1(state[18],0)}
    function pp_force_newline(state,param)
     {var _aFh_=state[14] < state[15]?1:0;
      return _aFh_?enqueue_advance(state,[0,0,3,0]):_aFh_}
    function pp_print_break(state,width,offset)
     {var _aFg_=state[14] < state[15]?1:0;
      if(_aFg_)
       {var elem=[0,-state[13] | 0,[1,width,offset],width];
        return scan_push(state,1,elem)}
      return _aFg_}
    function pp_print_cut(state,param){return pp_print_break(state,0,0)}
    var blank_line=make$0(80,32);
    function default_pp_mark_open_tag(s){return _a_(_cc_,_a_(s,_cb_))}
    function default_pp_mark_close_tag(s){return _a_(_ce_,_a_(s,_cd_))}
    function default_pp_print_open_tag(_aFf_){return 0}
    function default_pp_print_close_tag(_aFe_){return 0}
    function make_formatter(output,flush)
     {function i(_aFd_){return 0}
      function h(_aFc_){return 0}
      var pp_queue=[0,0,0],sys_tok=[0,-1,_cf_,0];
      add_queue(sys_tok,pp_queue);
      var
       sys_scan_stack=[0,[0,1,sys_tok],scan_stack_bottom],
       ppf=
        [0,
         sys_scan_stack,
         0,
         0,
         0,
         0,
         78,
         10,
         68,
         78,
         0,
         1,
         1,
         1,
         1,
         bound,
         _cg_,
         output,
         flush,
         h,
         i,
         0,
         0,
         default_pp_mark_open_tag,
         default_pp_mark_close_tag,
         default_pp_print_open_tag,
         default_pp_print_close_tag,
         pp_queue];
      ppf[19] = function(_aFb_){return caml_call3(ppf[17],_ca_,0,1)};
      ppf[20]
      =
      function(n$1)
       {var n=n$1;
        for(;;)
         {var _aFa_=0 < n?1:0;
          if(_aFa_)
           {if(80 < n)
             {caml_call3(ppf[17],blank_line,0,80);
              var n$0=n - 80 | 0,n=n$0;
              continue}
            return caml_call3(ppf[17],blank_line,0,n)}
          return _aFa_}};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _aE$_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(s,ofs,len)
                {if(0 <= ofs)
                  if(0 <= len)
                   if(!((caml_ml_string_length(s) - len | 0) < ofs))
                    return caml_ml_output(oc,s,ofs,len);
                 return invalid_arg(_f_)},
               _aE$_)}
    function formatter_of_buffer(b)
     {function _aE6_(_aE__){return 0}
      return make_formatter
              (function(_aE7_,_aE8_,_aE9_)
                {return add_substring(b,_aE7_,_aE8_,_aE9_)},
               _aE6_)}
    var pp_buffer_size=512;
    function pp_make_buffer(param){return create(pp_buffer_size)}
    var stdbuf=pp_make_buffer(0),std_formatter=formatter_of_out_channel(oc);
    formatter_of_out_channel(stderr);
    formatter_of_buffer(stdbuf);
    function print_flush(_aE5_){return pp_print_flush(std_formatter,_aE5_)}
    function compute_tag(output,tag_acc)
     {var b=create(16),ppf=formatter_of_buffer(b);
      caml_call2(output,ppf,tag_acc);
      pp_print_flush(ppf,0);
      var len=b[2];
      if(2 <= len)
       {var len$0=len - 2 | 0,ofs=1;
        if(0 <= len$0)
         if(!((b[2] - len$0 | 0) < 1))return sub_string(b[1],ofs,len$0);
        return invalid_arg(_$_)}
      return contents(b)}
    function output_acc$0(ppf,acc)
     {if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          output_acc$0(ppf,p);
          if(typeof f === "number")
           switch(f)
            {case 0:return pp_close_box(ppf,0);
             case 1:
              if(ppf[22])pp_enqueue(ppf,[0,0,5,0]);
              var _aES_=ppf[21];
              if(_aES_)
               {var _aET_=ppf[4];
                if(_aET_)
                 {var tags=_aET_[2],tag_name=_aET_[1];
                  caml_call1(ppf[26],tag_name);
                  ppf[4] = tags;
                  return 0}
                var _aEU_=0}
              else
               var _aEU_=_aES_;
              return _aEU_;
             case 2:return pp_print_flush(ppf,0);
             case 3:return pp_force_newline(ppf,0);
             case 4:pp_flush_queue(ppf,1);return caml_call1(ppf[18],0);
             case 5:return pp_print_char(ppf,64);
             default:return pp_print_char(ppf,37)}
          else
           switch(f[0])
            {case 0:
              var offset=f[3],width=f[2];
              return pp_print_break(ppf,width,offset);
             case 1:return 0;
             default:
              var c=f[1];pp_print_char(ppf,64);return pp_print_char(ppf,c)}
         case 1:
          var _aEV_=acc[2],_aEW_=acc[1];
          if(0 === _aEV_[0])
           {var acc$0=_aEV_[1];
            output_acc$0(ppf,_aEW_);
            var tag_name$0=compute_tag(output_acc$0,acc$0);
            if(ppf[21])
             {ppf[4] = [0,tag_name$0,ppf[4]];caml_call1(ppf[25],tag_name$0)}
            var _aER_=ppf[22];
            return _aER_?pp_enqueue(ppf,[0,0,[5,tag_name$0],0]):_aER_}
          var acc$1=_aEV_[1];
          output_acc$0(ppf,_aEW_);
          var
           match=open_box_of_string(compute_tag(output_acc$0,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _aEX_=acc[1];
          if(typeof _aEX_ === "number")
           var switch$1=1;
          else
           if(0 === _aEX_[0])
            {var _aEY_=_aEX_[2];
             if(typeof _aEY_ === "number")
              var switch$2=1;
             else
              if(1 === _aEY_[0])
               var
                s$0=acc[2],
                size=_aEY_[2],
                p$1=_aEX_[1],
                switch$0=0,
                switch$1=0,
                switch$2=0;
              else
               var switch$2=1;
             if(switch$2)var switch$1=1}
           else
            var switch$1=1;
          if(switch$1)var s=acc[2],p$0=_aEX_,switch$0=2;
          break;
         case 3:
          var _aEZ_=acc[1];
          if(typeof _aEZ_ === "number")
           var switch$3=1;
          else
           if(0 === _aEZ_[0])
            {var _aE0_=_aEZ_[2];
             if(typeof _aE0_ === "number")
              var switch$4=1;
             else
              if(1 === _aE0_[0])
               var
                c$1=acc[2],
                size$0=_aE0_[2],
                p$3=_aEZ_[1],
                switch$0=1,
                switch$3=0,
                switch$4=0;
              else
               var switch$4=1;
             if(switch$4)var switch$3=1}
           else
            var switch$3=1;
          if(switch$3)var c$0=acc[2],p$2=_aEZ_,switch$0=3;
          break;
         case 4:
          var _aE1_=acc[1];
          if(typeof _aE1_ === "number")
           var switch$5=1;
          else
           if(0 === _aE1_[0])
            {var _aE2_=_aE1_[2];
             if(typeof _aE2_ === "number")
              var switch$6=1;
             else
              if(1 === _aE2_[0])
               var
                s$0=acc[2],
                size=_aE2_[2],
                p$1=_aE1_[1],
                switch$0=0,
                switch$5=0,
                switch$6=0;
              else
               var switch$6=1;
             if(switch$6)var switch$5=1}
           else
            var switch$5=1;
          if(switch$5)var s=acc[2],p$0=_aE1_,switch$0=2;
          break;
         case 5:
          var _aE3_=acc[1];
          if(typeof _aE3_ === "number")
           var switch$7=1;
          else
           if(0 === _aE3_[0])
            {var _aE4_=_aE3_[2];
             if(typeof _aE4_ === "number")
              var switch$8=1;
             else
              if(1 === _aE4_[0])
               var
                c$1=acc[2],
                size$0=_aE4_[2],
                p$3=_aE3_[1],
                switch$0=1,
                switch$7=0,
                switch$8=0;
              else
               var switch$8=1;
             if(switch$8)var switch$7=1}
           else
            var switch$7=1;
          if(switch$7)var c$0=acc[2],p$2=_aE3_,switch$0=3;
          break;
         case 6:
          var f$0=acc[2],p$4=acc[1];
          output_acc$0(ppf,p$4);
          return caml_call1(f$0,ppf);
         case 7:
          var p$5=acc[1];output_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          output_acc$0(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:output_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         output_acc$0(ppf,p$3);
         return pp_print_as_size(ppf,size$0,make$0(1,c$1));
        case 2:output_acc$0(ppf,p$0);return pp_print_string(ppf,s);
        default:output_acc$0(ppf,p$2);return pp_print_char(ppf,c$0)}}
    function fprintf(ppf)
     {return function(param)
       {var fmt=param[1],_aEQ_=0;
        return make_printf
                (function(ppf,acc){output_acc$0(ppf,acc);return 0},
                 ppf,
                 _aEQ_,
                 fmt)}}
    function asprintf(fmt$0)
     {var fmt=fmt$0[1],buf=pp_make_buffer(0),ppf=formatter_of_buffer(buf);
      function k(ppf,acc)
       {output_acc$0(ppf,acc);
        pp_flush_queue(ppf,0);
        var s=contents(buf);
        buf[2] = 0;
        buf[1] = buf[4];
        buf[3] = caml_ml_bytes_length(buf[1]);
        return s}
      return make_printf(k,ppf,0,fmt)}
    at_exit(print_flush);
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var initial_object_size=2;
    function public_method_label(s)
     {var accu=[0,0],_aEN_=caml_ml_string_length(s) - 1 | 0,_aEM_=0;
      if(!(_aEN_ < 0))
       {var i=_aEM_;
        for(;;)
         {var _aEO_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _aEO_ | 0;
          var _aEP_=i + 1 | 0;
          if(_aEN_ !== i){var i=_aEP_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    var
     compare$0=caml_string_compare,
     Vars=_Z_([0,compare$0]),
     compare$1=caml_string_compare,
     Meths=_Z_([0,compare$1]),
     compare$2=caml_int_compare,
     Labs=_Z_([0,compare$2]),
     table_count=[0,0],
     dummy_met=caml_obj_block(0,0);
    function fit_size(n){return 2 < n?fit_size((n + 1 | 0) / 2 | 0) * 2 | 0:n}
    function new_table(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       methods=caml_make_vect((len * 2 | 0) + 2 | 0,dummy_met);
      caml_check_bound(methods,0)[1] = len;
      var _aEG_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
      caml_check_bound(methods,1)[2] = _aEG_;
      var _aEI_=len - 1 | 0,_aEH_=0;
      if(!(_aEI_ < 0))
       {var i=_aEH_;
        for(;;)
         {var
           _aEK_=(i * 2 | 0) + 3 | 0,
           _aEJ_=caml_check_bound(pub_labels,i)[i + 1];
          caml_check_bound(methods,_aEK_)[_aEK_ + 1] = _aEJ_;
          var _aEL_=i + 1 | 0;
          if(_aEI_ !== i){var i=_aEL_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function resize$1(array,new_size)
     {var len=array[2].length - 1,_aED_=len < new_size?1:0;
      if(_aED_)
       {var
         a2=caml_make_vect(new_size,dummy_met),
         _aEE_=array[2],
         switch$0=
          0 <= len
           ?(_aEE_.length - 1 - len | 0) < 0
             ?0
             :(a2.length - 1 - len | 0) < 0
               ?0
               :(caml_array_blit(_aEE_,0,a2,0,len),1)
           :0;
        if(!switch$0)invalid_arg(_G_);
        array[2] = a2;
        var _aEF_=0}
      else
       var _aEF_=_aED_;
      return _aEF_}
    var method_count=[0,0],inst_var_count=[0,0];
    function new_method(table)
     {var index=table[2].length - 1;
      resize$1(table,index + 1 | 0);
      return index}
    function get_method_label(table,name)
     {try
       {var _aEB_=caml_call2(Meths[23],name,table[3]);return _aEB_}
      catch(_aEC_)
       {_aEC_ = caml_wrap_exception(_aEC_);
        if(_aEC_ === Not_found)
         {var label=new_method(table);
          table[3] = caml_call3(Meths[4],name,label,table[3]);
          table[4] = caml_call3(Labs[4],label,1,table[4]);
          return label}
        throw _aEC_}}
    function get_method_labels(table,names)
     {return map$1
              (function(_aEA_){return get_method_label(table,_aEA_)},names)}
    function new_slot(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function new_variable(table,name)
     {try
       {var _aEy_=caml_call2(Vars[23],name,table[7]);return _aEy_}
      catch(_aEz_)
       {_aEz_ = caml_wrap_exception(_aEz_);
        if(_aEz_ === Not_found)
         {var index=new_slot(table);
          if(caml_string_notequal(name,_ch_))
           table[7] = caml_call3(Vars[4],name,index,table[7]);
          return index}
        throw _aEz_}}
    function create_table(public_methods)
     {if(public_methods === 0)return new_table([0]);
      var
       tags=map$1(public_method_label,public_methods),
       table=new_table(tags),
       _aEw_=public_methods.length - 1 - 1 | 0,
       _aEv_=0;
      if(!(_aEw_ < 0))
       {var i=_aEv_;
        for(;;)
         {var met=public_methods[i + 1],lab=(i * 2 | 0) + 2 | 0;
          table[3] = caml_call3(Meths[4],met,lab,table[3]);
          table[4] = caml_call3(Labs[4],lab,1,table[4]);
          var _aEx_=i + 1 | 0;
          if(_aEw_ !== i){var i=_aEx_;continue}
          break}}
      return table}
    function init_class(table)
     {inst_var_count[1] = (inst_var_count[1] + table[1] | 0) - 1 | 0;
      table[8] = rev(table[8]);
      return resize$1
              (table,
               3 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0)}
    function create_object_opt(obj_0,table)
     {if(obj_0)return obj_0;
      var obj=caml_obj_block(248,table[1]);
      obj[1] = table[2];
      return caml_set_oo_id(obj)}
    function new_cache(table)
     {var n=new_method(table);
      if(0 === (n % 2 | 0))
       var switch$0=0;
      else
       if((2 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0) < n)
        var switch$0=0;
       else
        var n$0=new_method(table),switch$0=1;
      if(!switch$0)var n$0=n;
      caml_check_bound(table[2],n$0)[n$0 + 1] = 0;
      return n$0}
    function set_methods(table,methods)
     {var len=methods.length - 1,i=[0,0];
      for(;;)
       {if(i[1] < len)
         {var
           _aEp_=i[1],
           label=caml_check_bound(methods,_aEp_)[_aEp_ + 1],
           next=
            function(param)
             {i[1]++;
              var _aEu_=i[1];
              return caml_check_bound(methods,_aEu_)[_aEu_ + 1]},
           clo=next(0);
          if(typeof clo === "number")
           switch(clo)
            {case 0:
              var
               x=next(0),
               clo$0=function(x){return function(obj){return x}}(x);
              break;
             case 1:
              var
               n=next(0),
               clo$0=function(n){return function(obj){return obj[n + 1]}}(n);
              break;
             case 2:
              var
               e=next(0),
               n$0=next(0),
               clo$0=
                function(e,n){return function(obj){return obj[e + 1][n + 1]}}
                 (e,n$0);
              break;
             case 3:
              var
               n$1=next(0),
               clo$0=
                function(n)
                  {return function(obj){return caml_call1(obj[1][n + 1],obj)}}
                 (n$1);
              break;
             case 4:
              var
               n$2=next(0),
               clo$0=
                function(n){return function(obj,x){obj[n + 1] = x;return 0}}
                 (n$2);
              break;
             case 5:
              var
               f=next(0),
               x$0=next(0),
               clo$0=
                function(f,x){return function(obj){return caml_call1(f,x)}}
                 (f,x$0);
              break;
             case 6:
              var
               f$0=next(0),
               n$3=next(0),
               clo$0=
                function(f,n)
                  {return function(obj){return caml_call1(f,obj[n + 1])}}
                 (f$0,n$3);
              break;
             case 7:
              var
               f$1=next(0),
               e$0=next(0),
               n$4=next(0),
               clo$0=
                function(f,e,n)
                  {return function(obj)
                    {return caml_call1(f,obj[e + 1][n + 1])}}
                 (f$1,e$0,n$4);
              break;
             case 8:
              var
               f$2=next(0),
               n$5=next(0),
               clo$0=
                function(f,n)
                  {return function(obj)
                    {return caml_call1(f,caml_call1(obj[1][n + 1],obj))}}
                 (f$2,n$5);
              break;
             case 9:
              var
               f$3=next(0),
               x$1=next(0),
               y=next(0),
               clo$0=
                function(f,x,y)
                  {return function(obj){return caml_call2(f,x,y)}}
                 (f$3,x$1,y);
              break;
             case 10:
              var
               f$4=next(0),
               x$2=next(0),
               n$6=next(0),
               clo$0=
                function(f,x,n)
                  {return function(obj){return caml_call2(f,x,obj[n + 1])}}
                 (f$4,x$2,n$6);
              break;
             case 11:
              var
               f$5=next(0),
               x$3=next(0),
               e$1=next(0),
               n$7=next(0),
               clo$0=
                function(f,x,e,n)
                  {return function(obj)
                    {return caml_call2(f,x,obj[e + 1][n + 1])}}
                 (f$5,x$3,e$1,n$7);
              break;
             case 12:
              var
               f$6=next(0),
               x$4=next(0),
               n$8=next(0),
               clo$0=
                function(f,x,n)
                  {return function(obj)
                    {return caml_call2(f,x,caml_call1(obj[1][n + 1],obj))}}
                 (f$6,x$4,n$8);
              break;
             case 13:
              var
               f$7=next(0),
               n$9=next(0),
               x$5=next(0),
               clo$0=
                function(f,n,x)
                  {return function(obj){return caml_call2(f,obj[n + 1],x)}}
                 (f$7,n$9,x$5);
              break;
             case 14:
              var
               f$8=next(0),
               e$2=next(0),
               n$10=next(0),
               x$6=next(0),
               clo$0=
                function(f,e,n,x)
                  {return function(obj)
                    {return caml_call2(f,obj[e + 1][n + 1],x)}}
                 (f$8,e$2,n$10,x$6);
              break;
             case 15:
              var
               f$9=next(0),
               n$11=next(0),
               x$7=next(0),
               clo$0=
                function(f,n,x)
                  {return function(obj)
                    {return caml_call2(f,caml_call1(obj[1][n + 1],obj),x)}}
                 (f$9,n$11,x$7);
              break;
             case 16:
              var
               n$12=next(0),
               x$8=next(0),
               clo$0=
                function(n,x)
                  {return function(obj)
                    {return caml_call2(obj[1][n + 1],obj,x)}}
                 (n$12,x$8);
              break;
             case 17:
              var
               n$13=next(0),
               m=next(0),
               clo$0=
                function(n,m)
                  {return function(obj)
                    {return caml_call2(obj[1][n + 1],obj,obj[m + 1])}}
                 (n$13,m);
              break;
             case 18:
              var
               n$14=next(0),
               e$3=next(0),
               m$0=next(0),
               clo$0=
                function(n,e,m)
                  {return function(obj)
                    {return caml_call2(obj[1][n + 1],obj,obj[e + 1][m + 1])}}
                 (n$14,e$3,m$0);
              break;
             case 19:
              var
               n$15=next(0),
               m$1=next(0),
               clo$0=
                function(n,m)
                  {return function(obj)
                    {var _aEs_=caml_call1(obj[1][m + 1],obj);
                     return caml_call2(obj[1][n + 1],obj,_aEs_)}}
                 (n$15,m$1);
              break;
             case 20:
              var m$2=next(0),x$9=next(0);
              new_cache(table);
              var
               clo$0=
                function(m,x)
                  {return function(obj)
                    {return caml_call1(caml_get_public_method(x,m,0),x)}}
                 (m$2,x$9);
              break;
             case 21:
              var m$3=next(0),n$16=next(0);
              new_cache(table);
              var
               clo$0=
                function(m,n)
                  {return function(obj)
                    {var _aEr_=obj[n + 1];
                     return caml_call1(caml_get_public_method(_aEr_,m,0),_aEr_)}}
                 (m$3,n$16);
              break;
             case 22:
              var m$4=next(0),e$4=next(0),n$17=next(0);
              new_cache(table);
              var
               clo$0=
                function(m,e,n)
                  {return function(obj)
                    {var _aEq_=obj[e + 1][n + 1];
                     return caml_call1(caml_get_public_method(_aEq_,m,0),_aEq_)}}
                 (m$4,e$4,n$17);
              break;
             default:
              var m$5=next(0),n$18=next(0);
              new_cache(table);
              var
               clo$0=
                function(m,n)
                  {return function(obj)
                    {var _aEt_=caml_call1(obj[1][n + 1],obj);
                     return caml_call1(caml_get_public_method(_aEt_,m,0),_aEt_)}}
                 (m$5,n$18)}
          else
           var clo$0=clo;
          method_count[1]++;
          if(caml_call2(Labs[23],label,table[4]))
           {resize$1(table,label + 1 | 0);
            caml_check_bound(table[2],label)[label + 1] = clo$0}
          else
           table[6] = [0,[0,label,clo$0],table[6]];
          i[1]++;
          continue}
        return 0}}
    function generic_basename(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,_ci_))return current_dir_name;
      var n$3=caml_ml_string_length(name) - 1 | 0,n=n$3;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var p=n + 1 | 0,n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               return k(name,n$1 + 1 | 0,(p - n$1 | 0) - 1 | 0);
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return k(name,0,p)}}
        return k(name,0,1)}}
    function generic_dirname(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,_cj_))return current_dir_name;
      var n$5=caml_ml_string_length(name) - 1 | 0,n=n$5;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               {var n$3=n$1;
                for(;;)
                 {if(0 <= n$3)
                   {if(caml_call2(is_dir_sep,name,n$3))
                     {var n$4=n$3 - 1 | 0,n$3=n$4;continue}
                    return k(name,0,n$3 + 1 | 0)}
                  return k(name,0,1)}}
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return current_dir_name}}
        return k(name,0,1)}}
    function is_dir_sep(s,i){return 47 === caml_string_get(s,i)?1:0}
    function is_relative(n)
     {var
       _aEn_=caml_ml_string_length(n) < 1?1:0,
       _aEo_=_aEn_ || (47 !== caml_string_get(n,0)?1:0);
      return _aEo_}
    try
     {var _Uw_=caml_sys_getenv(_Uv_),temp_dir_name=_Uw_}
    catch(_aEm_)
     {_aEm_ = caml_wrap_exception(_aEm_);
      if(_aEm_ !== Not_found)throw _aEm_;
      var temp_dir_name=_ck_}
    function quote(s)
     {var l=caml_ml_string_length(s),b=create(l + 20 | 0);
      add_char(b,39);
      var _aEk_=l - 1 | 0,_aEj_=0;
      if(!(_aEk_ < 0))
       {var i=_aEj_;
        for(;;)
         {if(39 === caml_string_get(s,i))
           add_string(b,quotequote);
          else
           add_char(b,caml_string_get(s,i));
          var _aEl_=i + 1 | 0;
          if(_aEk_ !== i){var i=_aEl_;continue}
          break}}
      add_char(b,39);
      return contents(b)}
    function basename(_aEi_)
     {return generic_basename(is_dir_sep,current_dir_name,_aEi_)}
    function dirname(_aEh_)
     {return generic_dirname(is_dir_sep,current_dir_name,_aEh_)}
    function is_dir_sep$0(s,i)
     {var c=caml_string_get(s,i),_aEe_=47 === c?1:0;
      if(_aEe_)
       var _aEf_=_aEe_;
      else
       var _aEg_=92 === c?1:0,_aEf_=_aEg_ || (58 === c?1:0);
      return _aEf_}
    function is_relative$0(n)
     {var
       _aD__=caml_ml_string_length(n) < 1?1:0,
       _aD$_=_aD__ || (47 !== caml_string_get(n,0)?1:0);
      if(_aD$_)
       {var
         _aEa_=caml_ml_string_length(n) < 1?1:0,
         _aEb_=_aEa_ || (92 !== caml_string_get(n,0)?1:0);
        if(_aEb_)
         var
          _aEc_=caml_ml_string_length(n) < 2?1:0,
          _aEd_=_aEc_ || (58 !== caml_string_get(n,1)?1:0);
        else
         var _aEd_=_aEb_}
      else
       var _aEd_=_aD$_;
      return _aEd_}
    function is_implicit(n)
     {var _aD1_=is_relative$0(n);
      if(_aD1_)
       {var
         _aD2_=caml_ml_string_length(n) < 2?1:0,
         _aD3_=_aD2_ || caml_string_notequal(k(n,0,2),_co_);
        if(_aD3_)
         {var
           _aD4_=caml_ml_string_length(n) < 2?1:0,
           _aD5_=_aD4_ || caml_string_notequal(k(n,0,2),_cn_);
          if(_aD5_)
           {var
             _aD6_=caml_ml_string_length(n) < 3?1:0,
             _aD7_=_aD6_ || caml_string_notequal(k(n,0,3),_cm_);
            if(_aD7_)
             var
              _aD8_=caml_ml_string_length(n) < 3?1:0,
              _aD9_=_aD8_ || caml_string_notequal(k(n,0,3),_cl_);
            else
             var _aD9_=_aD7_}
          else
           var _aD9_=_aD5_}
        else
         var _aD9_=_aD3_}
      else
       var _aD9_=_aD1_;
      return _aD9_}
    function check_suffix(name,suff)
     {var
       _aDY_=
        caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0;
      if(_aDY_)
       var
        s=
         k
          (name,
           caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
           caml_ml_string_length(suff)),
        _aDZ_=lowercase_ascii$0(suff),
        _aD0_=caml_string_equal(lowercase_ascii$0(s),_aDZ_);
      else
       var _aD0_=_aDY_;
      return _aD0_}
    try
     {var _Uu_=caml_sys_getenv(_Ut_),temp_dir_name$0=_Uu_}
    catch(_aDX_)
     {_aDX_ = caml_wrap_exception(_aDX_);
      if(_aDX_ !== Not_found)throw _aDX_;
      var temp_dir_name$0=_cp_}
    function quote$0(s)
     {var l=caml_ml_string_length(s),b=create(l + 20 | 0);
      add_char(b,34);
      function add_bs(n)
       {var _aDV_=1;
        if(!(n < 1))
         {var j=_aDV_;
          for(;;)
           {add_char(b,92);
            var _aDW_=j + 1 | 0;
            if(n !== j){var j=_aDW_;continue}
            break}}
        return 0}
      function loop$0(counter,i)
       {var i$0=i;
        for(;;)
         {if(i$0 === l)return add_char(b,34);
          var c=caml_string_get(s,i$0);
          if(34 === c)
           {var _aDT_=0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return loop_bs(counter$1,_aDT_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_aDT_,i$0])}
          if(92 === c)
           {var _aDU_=0;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return loop_bs(counter$0,_aDU_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_aDU_,i$0])}
          add_char(b,c);
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function loop_bs(counter,n,i)
       {var n$0=n,i$0=i;
        for(;;)
         {if(i$0 === l){add_char(b,34);return add_bs(n$0)}
          var match=caml_string_get(s,i$0);
          if(34 === match)
           {add_bs((2 * n$0 | 0) + 1 | 0);
            add_char(b,34);
            var _aDS_=i$0 + 1 | 0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;return loop$0(counter$1,_aDS_)}
            return caml_trampoline_return(loop$0,[0,_aDS_])}
          if(92 === match)
           {var i$1=i$0 + 1 | 0,n$1=n$0 + 1 | 0,n$0=n$1,i$0=i$1;continue}
          add_bs(n$0);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return loop$0(counter$0,i$0)}
          return caml_trampoline_return(loop$0,[0,i$0])}}
      function loop(i){return caml_trampoline(loop$0(0,i))}
      loop(0);
      return contents(b)}
    function drive_and_path(s)
     {var _aDO_=2 <= caml_ml_string_length(s)?1:0;
      if(_aDO_)
       var
        param=caml_string_get(s,0),
        switch$0=91 <= param?25 < (param - 97 | 0) >>> 0?0:1:65 <= param?1:0,
        _aDP_=switch$0?1:0,
        _aDQ_=_aDP_?58 === caml_string_get(s,1)?1:0:_aDP_;
      else
       var _aDQ_=_aDO_;
      if(_aDQ_)
       {var _aDR_=k(s,2,caml_ml_string_length(s) - 2 | 0);
        return [0,k(s,0,2),_aDR_]}
      return [0,_cq_,s]}
    function dirname$0(s)
     {var
       match=drive_and_path(s),
       path=match[2],
       drive=match[1],
       dir=generic_dirname(is_dir_sep$0,current_dir_name$0,path);
      return _a_(drive,dir)}
    function basename$0(s)
     {var match=drive_and_path(s),path=match[2];
      return generic_basename(is_dir_sep$0,current_dir_name$0,path)}
    function basename$1(_aDN_)
     {return generic_basename(is_dir_sep$0,current_dir_name$1,_aDN_)}
    function dirname$1(_aDM_)
     {return generic_dirname(is_dir_sep$0,current_dir_name$1,_aDM_)}
    if(caml_string_notequal(os_type,_cr_))
     if(caml_string_notequal(os_type,_cs_))
      var
       dir_sep$2=dir_sep,
       is_dir_sep$1=is_dir_sep,
       is_relative$1=is_relative,
       basename$2=basename,
       dirname$2=dirname,
       switch$0=1;
     else
      var
       _Us_=
        [0,
         current_dir_name$0,
         parent_dir_name,
         dir_sep$0,
         is_dir_sep$0,
         is_relative$0,
         is_implicit,
         check_suffix,
         temp_dir_name$0,
         quote$0,
         basename$0,
         dirname$0],
       switch$0=0;
    else
     var
      _Us_=
       [0,
        current_dir_name$1,
        parent_dir_name$0,
        dir_sep$1,
        is_dir_sep$0,
        is_relative$0,
        is_implicit,
        check_suffix,
        temp_dir_name,
        quote,
        basename$1,
        dirname$1],
      switch$0=0;
    if(!switch$0)
     var
      dir_sep$2=_Us_[3],
      is_dir_sep$1=is_dir_sep$0,
      is_relative$1=is_relative$0,
      basename$2=_Us_[10],
      dirname$2=_Us_[11];
    function concat$1(dirname,filename)
     {var l=caml_ml_string_length(dirname);
      if(0 !== l)
       if(!is_dir_sep$1(dirname,l - 1 | 0))
        return _a_(dirname,_a_(dir_sep$2,filename));
      return _a_(dirname,filename)}
    var global=joo_global_object,undefined$0=undefined;
    function to_option(x){return x === undefined$0?0:[0,x]}
    var
     object_constructor=global.Object,
     array_constructor=global.Array,
     Error=[248,_cu_,caml_fresh_oo_id(0)];
    register_exception(_cv_,[0,Error,{}]);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error)
         {var e=param[2];return [0,caml_js_to_string(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_constructor
                ?0
                :[0,caml_js_to_string(e.toString())]});
    function export_js(field,x){return caml_js_export_var(0)[field] = x}
    function export$0(field,x){return export_js(field.toString(),x)}
    function export_all(obj)
     {var keys=object_constructor.keys(obj);
      return keys.forEach
              (caml_js_wrap_callback
                (function(key,param,_aDL_){return export_js(key,obj[key])}))}
    var direct_depth_default=1e3;
    function filter_map(f,l)
     {var acc=0,l$0=l;
      for(;;)
       {if(l$0)
         {var l$1=l$0[2],x=l$0[1],match=caml_call1(f,x);
          if(match)var y=match[1],acc$0=[0,y,acc];else var acc$0=acc;
          var acc=acc$0,l$0=l$1;
          continue}
        return rev(acc)}}
    function iter$0(f,o){if(o){var x=o[1];return caml_call1(f,x)}return 0}
    function get_or(default$0,x){if(x){var y=x[1];return y}return default$0}
    caml_fresh_oo_id(0);
    function _cA_(O)
     {var
       include=_Q_(O),
       empty=include[1],
       is_empty=include[2],
       mem=include[3],
       add=include[4],
       singleton=include[5],
       remove=include[6],
       union=include[7],
       inter=include[8],
       diff=include[9],
       compare=include[10],
       equal=include[11],
       subset=include[12],
       iter=include[13],
       map=include[14],
       fold=include[15],
       for_all=include[16],
       exists=include[17],
       filter=include[18],
       partition=include[19],
       cardinal=include[20],
       elements=include[21],
       min_elt=include[22],
       max_elt=include[23],
       choose=include[24],
       split=include[25],
       find=include[26];
      function add_seq(set,seq)
       {var set$0=[0,set];
        caml_call1
         (seq,function(x){set$0[1] = caml_call2(add,x,set$0[1]);return 0});
        return set$0[1]}
      function of_seq(s){return add_seq(empty,s)}
      function to_seq(s,yield$0){return caml_call2(iter,yield$0,s)}
      function _aDG_(set,x){return caml_call2(add,x,set)}
      function add_list(_aDJ_,_aDK_){return fold_left(_aDG_,_aDJ_,_aDK_)}
      function of_list(l){return add_list(empty,l)}
      function pp(opt,_aDI_,_aDH_,pp_x,fmt,m)
       {if(opt)var sth=opt[1],start=sth;else var start=_cz_;
        if(_aDI_)var sth$0=_aDI_[1],stop=sth$0;else var stop=_cy_;
        if(_aDH_)var sth$1=_aDH_[1],sep=sth$1;else var sep=_cx_;
        pp_print_string(fmt,start);
        var first=[0,1];
        caml_call2
         (iter,
          function(x)
           {if(first[1])
             first[1] = 0;
            else
             {pp_print_string(fmt,sep);pp_print_cut(fmt,0)}
            return caml_call2(pp_x,fmt,x)},
          m);
        return pp_print_string(fmt,stop)}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              singleton,
              remove,
              union,
              inter,
              diff,
              compare,
              equal,
              subset,
              iter,
              map,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              elements,
              min_elt,
              max_elt,
              choose,
              split,
              find,
              of_seq,
              add_seq,
              to_seq,
              of_list,
              add_list,
              elements,
              pp]}
    function kmp_pattern_length(p){return caml_ml_string_length(p[2])}
    function kmp_find(pattern,s,idx)
     {var
       len=caml_ml_string_length(s),
       i=[0,idx],
       j=[0,0],
       pat_len=kmp_pattern_length(pattern);
      for(;;)
       {if(j[1] < pat_len)
         if((i[1] + j[1] | 0) < len)
          {var
            c=caml_string_get(s,i[1] + j[1] | 0),
            expected=caml_string_get(pattern[2],j[1]);
           if(c === expected)
            j[1]++;
           else
            {var
              _aDF_=j[1],
              fail_offset=caml_check_bound(pattern[1],_aDF_)[_aDF_ + 1];
             if(0 <= fail_offset)
              {if(!(fail_offset < j[1]))throw [0,Assert_failure,_cC_];
               i[1] = (i[1] + j[1] | 0) - fail_offset | 0;
               j[1] = fail_offset}
             else
              {j[1] = 0;i[1]++}}
           continue}
        return j[1] === pat_len?i[1]:-1}}
    function compile(str)
     {if(1 === caml_ml_string_length(str))return [0,caml_string_get(str,0)];
      var len=caml_ml_string_length(str),get=caml_string_get;
      if(0 === len)
       var _aDE_=[0,[0],str];
      else
       if(1 === len)
        var _aDE_=[0,[0,-1],str];
       else
        {var failure=caml_make_vect(len,0);
         caml_check_bound(failure,0)[1] = -1;
         var i=[0,2],j=[0,0];
         for(;;)
          {if(i[1] < len)
            {var match=j[1],_aDz_=get(str,j[1]);
             if(get(str,i[1] - 1 | 0) === _aDz_)
              {j[1]++;
               var _aDB_=i[1],_aDA_=j[1];
               caml_check_bound(failure,_aDB_)[_aDB_ + 1] = _aDA_;
               i[1]++}
             else
              if(0 === match)
               {var _aDC_=i[1];
                caml_check_bound(failure,_aDC_)[_aDC_ + 1] = 0;
                i[1]++}
              else
               {if(!(0 < j[1]))throw [0,Assert_failure,_cB_];
                var _aDD_=j[1];
                j[1] = caml_check_bound(failure,_aDD_)[_aDD_ + 1]}
             continue}
           var _aDE_=[0,failure,str];
           break}}
      return [1,_aDE_]}
    function find$1(opt,pattern,s)
     {if(opt)var sth=opt[1],start=sth;else var start=0;
      if(0 === pattern[0])
       {var c=pattern[1];
        try
         {var _aDx_=index_from(s,start,c);return _aDx_}
        catch(_aDy_)
         {_aDy_ = caml_wrap_exception(_aDy_);
          if(_aDy_ === Not_found)return -1;
          throw _aDy_}}
      var pattern$0=pattern[1];
      return kmp_find(pattern$0,s,start)}
    function split$0(by$0,s)
     {var by=compile(by$0),acc=0,state$0=state;
      for(;;)
       {if(state$0)
         {var prev=state$0[1],j=find$1([0,prev],by,s);
          if(0 <= j)
           {var _aDv_=j - prev | 0;
            if(0 === by[0])
             var _aDw_=1;
            else
             var p=by[1],_aDw_=kmp_pattern_length(p);
            var _aDu_=[0,[0,[0,j + _aDw_ | 0],prev,_aDv_]]}
          else
           var _aDu_=[0,[0,0,prev,caml_ml_string_length(s) - prev | 0]];
          var match=_aDu_}
        else
         var match=0;
        if(match)
         {var
           match$0=match[1],
           len=match$0[3],
           i=match$0[2],
           state$1=match$0[1],
           acc$0=[0,k(s,i,len),acc],
           acc=acc$0,
           state$0=state$1;
          continue}
        return rev(acc)}}
    function lines(s){return split$0(_cF_,s)}
    caml_fresh_oo_id(0);
    function _cL_(O)
     {var
       include=_Z_(O),
       empty=include[1],
       is_empty=include[2],
       mem=include[3],
       add=include[4],
       singleton=include[5],
       remove=include[6],
       merge=include[7],
       union=include[8],
       compare=include[9],
       equal=include[10],
       iter=include[11],
       fold=include[12],
       for_all=include[13],
       exists=include[14],
       filter=include[15],
       partition=include[16],
       cardinal=include[17],
       bindings=include[18],
       min_binding=include[19],
       max_binding=include[20],
       choose=include[21],
       split=include[22],
       find=include[23],
       map=include[24],
       mapi=include[25];
      function get(k,m)
       {try
         {var _aDs_=[0,caml_call2(find,k,m)];return _aDs_}
        catch(_aDt_)
         {_aDt_ = caml_wrap_exception(_aDt_);
          if(_aDt_ === Not_found)return 0;
          throw _aDt_}}
      function get_or(k,m,default$0)
       {try
         {var _aDq_=caml_call2(find,k,m);return _aDq_}
        catch(_aDr_)
         {_aDr_ = caml_wrap_exception(_aDr_);
          if(_aDr_ === Not_found)return default$0;
          throw _aDr_}}
      function update(k,f,m)
       {try
         {var _aDo_=caml_call1(f,[0,caml_call2(find,k,m)]),x=_aDo_}
        catch(_aDp_)
         {_aDp_ = caml_wrap_exception(_aDp_);
          if(_aDp_ !== Not_found)throw _aDp_;
          var x=caml_call1(f,0)}
        if(x){var v=x[1];return caml_call3(add,k,v,m)}
        return caml_call2(remove,k,m)}
      function merge_safe(f,a,b)
       {return caml_call3
                (merge,
                 function(k,v1,match)
                  {if(v1)
                    {var _aDn_=v1[1];
                     if(match)
                      {var v2=match[1];
                       return caml_call2(f,k,[0,737457313,[0,_aDn_,v2]])}
                     return caml_call2(f,k,[0,847852583,_aDn_])}
                   if(match)
                    {var v2$0=match[1];
                     return caml_call2(f,k,[0,-57574468,v2$0])}
                   throw [0,Assert_failure,_cG_]},
                 a,
                 b)}
      function add_seq(m,s)
       {var m$0=[0,m];
        caml_call1
         (s,
          function(param)
           {var v=param[2],k=param[1];
            m$0[1] = caml_call3(add,k,v,m$0[1]);
            return 0});
        return m$0[1]}
      function of_seq(s){return add_seq(empty,s)}
      function to_seq(m,yield$0)
       {return caml_call2
                (iter,function(k,v){return caml_call1(yield$0,[0,k,v])},m)}
      function keys(m,yield$0)
       {return caml_call2
                (iter,function(k,param){return caml_call1(yield$0,k)},m)}
      function values(m,yield$0)
       {return caml_call2
                (iter,function(param,v){return caml_call1(yield$0,v)},m)}
      function add_list(m,l)
       {return fold_left
                (function(m,param)
                  {var v=param[2],k=param[1];return caml_call3(add,k,v,m)},
                 m,
                 l)}
      function of_list(l){return add_list(empty,l)}
      function to_list(m)
       {var _aDm_=0;
        return caml_call3
                (fold,function(k,v,acc){return [0,[0,k,v],acc]},m,_aDm_)}
      function pp(opt,_aDl_,_aDk_,_aDj_,pp_k,pp_v,fmt,m)
       {if(opt)var sth=opt[1],start=sth;else var start=_cK_;
        if(_aDl_)var sth$0=_aDl_[1],stop=sth$0;else var stop=_cJ_;
        if(_aDk_)var sth$1=_aDk_[1],arrow=sth$1;else var arrow=_cI_;
        if(_aDj_)var sth$2=_aDj_[1],sep=sth$2;else var sep=_cH_;
        pp_print_string(fmt,start);
        var first=[0,1];
        caml_call2
         (iter,
          function(k,v)
           {if(first[1])
             first[1] = 0;
            else
             {pp_print_string(fmt,sep);pp_print_cut(fmt,0)}
            caml_call2(pp_k,fmt,k);
            pp_print_string(fmt,arrow);
            return caml_call2(pp_v,fmt,v)},
          m);
        return pp_print_string(fmt,stop)}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              singleton,
              remove,
              merge,
              union,
              compare,
              equal,
              iter,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              bindings,
              min_binding,
              max_binding,
              choose,
              split,
              find,
              map,
              mapi,
              get,
              get_or,
              update,
              merge_safe,
              of_seq,
              add_seq,
              to_seq,
              of_list,
              add_list,
              keys,
              values,
              to_list,
              pp]}
    function appendToBuff(d,s)
     {if(0 === d[0]){var c=d[1];return output_string(c,s)}
      var b=d[1];
      return add_string(b,s)}
    function newline(t){appendToBuff(t[1],_cO_);t[4] = 0;return 0}
    function indent(t)
     {t[2] = t[2] + 1 | 0;t[3] = make$0(t[2] * 3 | 0,32);return newline(t)}
    function outdent(t)
     {t[2] = t[2] - 1 | 0;
      if(t[2] < 0)failwith(_cP_);
      t[3] = make$0(t[2] * 3 | 0,32);
      return 0}
    function append(t,s)
     {if(1 - t[4]){appendToBuff(t[1],t[3]);t[4] = 1}
      return appendToBuff(t[1],s)}
    function ret(buffer){return 0}
    function newline$0(buffer){return newline(buffer)}
    function comma(buffer){return append(buffer,_cQ_)}
    function commaspace(buffer){return append(buffer,_cR_)}
    function semi(buffer){return append(buffer,_cS_)}
    function string(s,buffer){return append(buffer,s)}
    function int$0(i,buffer){return append(buffer,caml_new_string("" + i))}
    function parenthesize(t,buffer)
     {append(buffer,_cV_);caml_call1(t,buffer);return append(buffer,_cW_)}
    function indent$0(t,buffer)
     {indent(buffer);caml_call1(t,buffer);return outdent(buffer)}
    function wrap(l,r,t,buffer)
     {caml_call1(l,buffer);caml_call1(t,buffer);return caml_call1(r,buffer)}
    function join(elems,buffer)
     {return iter(function(a){return caml_call1(a,buffer)},elems)}
    function join_sep(sep,param,buffer)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var _aDh_=param$0[2],_aDi_=param$0[1];
          if(_aDh_)
           {caml_call1(_aDi_,buffer);
            caml_call1(sep,buffer);
            var param$0=_aDh_;
            continue}
          return caml_call1(_aDi_,buffer)}
        return 0}}
    function join_sep_all(sep,elems,buffer)
     {return iter
              (function(h){caml_call1(h,buffer);return caml_call1(sep,buffer)},
               elems)}
    function map_sep(sep,f,param,buffer)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var _aDf_=param$0[2],_aDg_=param$0[1];
          if(_aDf_)
           {caml_call1(caml_call1(f,_aDg_),buffer);
            caml_call1(sep,buffer);
            var param$0=_aDf_;
            continue}
          return caml_call1(caml_call1(f,_aDg_),buffer)}
        return 0}}
    function map_sep_all(sep,f,elems,buffer)
     {return iter
              (function(h)
                {caml_call1(caml_call1(f,h),buffer);
                 return caml_call1(sep,buffer)},
               elems)}
    function _cX_(t1,t2)
     {return function(buffer)
       {caml_call1(t1,buffer);return caml_call1(t2,buffer)}}
    function print(t)
     {var buffer=[0,[1,create(128)],0,_cM_,0];
      caml_call1(t,buffer);
      var _aDe_=buffer[1];
      if(0 === _aDe_[0])return _cN_;
      var b=_aDe_[1];
      return contents(b)}
    caml_fresh_oo_id(0);
    caml_fresh_oo_id(0);
    function _cY_(_aC9_,_aC8_,_aC7_,_aC6_)
     {var _aC$_=_aC9_,_aC__=_aC6_;
      for(;;)
       {var _aDa_=_aC$_?_aC$_[1]:pp_print_cut;
        if(_aC__)
         {var _aDb_=_aC__[2];
          caml_call2(_aC8_,_aC7_,_aC__[1]);
          var _aDc_=0 !== _aDb_?1:0;
          if(_aDc_)
           {caml_call2(_aDa_,_aC7_,0);
            var _aC$_=[0,_aDa_],_aC__=_aDb_;
            continue}
          var _aDd_=_aDc_}
        else
         var _aDd_=_aC__;
        return _aDd_}}
    function _cZ_(_aCZ_,_aCY_)
     {var _aC0_=_aCZ_[2],_aC1_=_aCZ_[1],_aC2_=caml_int_of_string(_aCY_);
      try
       {var _aC4_=find$0(_aC0_,_aC2_);return _aC4_}
      catch(_aC5_)
       {_aC5_ = caml_wrap_exception(_aC5_);
        if(_aC5_ === Not_found)
         {var _aC3_=_aC1_[1];
          add(_aC0_,_aC2_,_aC3_);
          _aC1_[1] = _aC3_ + 1 | 0;
          return _aC3_}
        throw _aC5_}}
    function _c0_(_aCV_)
     {var _aCW_=_aCV_[1];return function(_aCX_){return _cZ_(_aCW_,_aCX_)}}
    function _c1_(_aCT_)
     {var _aCU_=_aCT_[2];return [0,[0,[0,0],create$0(0,0)],_aCU_]}
    function _c2_(_aCS_,_aCR_){return pp_print_char(_aCS_,32)}
    function _c3_(_aCQ_,_aCP_){return pp_print_string(_aCQ_,_c4_)}
    var
     _c5_=function _aCO_(_aCM_,_aCN_){return _aCO_.fun(_aCM_,_aCN_)},
     _c6_=function _aCL_(_aCJ_,_aCK_){return _aCL_.fun(_aCJ_,_aCK_)},
     _c7_=function _aCI_(_aCG_,_aCH_){return _aCI_.fun(_aCG_,_aCH_)},
     _c8_=function _aCF_(_aCD_,_aCE_){return _aCF_.fun(_aCD_,_aCE_)},
     _c9_=function _aCC_(_aCA_,_aCB_){return _aCC_.fun(_aCA_,_aCB_)},
     _c__=function _aCz_(_aCx_,_aCy_){return _aCz_.fun(_aCx_,_aCy_)},
     _c$_=
      function _aCw_(_aCt_,_aCu_,_aCv_){return _aCw_.fun(_aCt_,_aCu_,_aCv_)},
     _da_=function _aCs_(_aCq_,_aCr_){return _aCs_.fun(_aCq_,_aCr_)},
     _db_=function _aCp_(_aCn_,_aCo_){return _aCp_.fun(_aCn_,_aCo_)},
     _dc_=function _aCm_(_aCk_,_aCl_){return _aCm_.fun(_aCk_,_aCl_)},
     _dd_=function _aCj_(_aCi_){return _aCj_.fun(_aCi_)},
     _de_=function _aCh_(_aCf_,_aCg_){return _aCh_.fun(_aCf_,_aCg_)},
     _df_=function _aCe_(_aCc_,_aCd_){return _aCe_.fun(_aCc_,_aCd_)},
     _dg_=function _aCb_(_aB$_,_aCa_){return _aCb_.fun(_aB$_,_aCa_)},
     _dh_=
      function _aB__(_aB7_,_aB8_,_aB9_){return _aB__.fun(_aB7_,_aB8_,_aB9_)},
     _di_=
      function _aB6_(_aB3_,_aB4_,_aB5_){return _aB6_.fun(_aB3_,_aB4_,_aB5_)},
     _dj_=
      function _aB2_(_aBZ_,_aB0_,_aB1_){return _aB2_.fun(_aBZ_,_aB0_,_aB1_)},
     _dk_=
      function _aBY_(_aBV_,_aBW_,_aBX_){return _aBY_.fun(_aBV_,_aBW_,_aBX_)},
     _dm_=
      function _aBU_(_aBR_,_aBS_,_aBT_){return _aBU_.fun(_aBR_,_aBS_,_aBT_)},
     _dn_=
      function _aBQ_(_aBN_,_aBO_,_aBP_){return _aBQ_.fun(_aBN_,_aBO_,_aBP_)},
     _do_=
      function _aBM_(_aBJ_,_aBK_,_aBL_){return _aBM_.fun(_aBJ_,_aBK_,_aBL_)},
     _dp_=
      function _aBI_(_aBF_,_aBG_,_aBH_){return _aBI_.fun(_aBF_,_aBG_,_aBH_)},
     _dq_=
      function _aBE_(_aBB_,_aBC_,_aBD_){return _aBE_.fun(_aBB_,_aBC_,_aBD_)},
     _dr_=
      function _aBA_(_aBx_,_aBy_,_aBz_){return _aBA_.fun(_aBx_,_aBy_,_aBz_)},
     _ds_=
      function _aBw_(_aBt_,_aBu_,_aBv_){return _aBw_.fun(_aBt_,_aBu_,_aBv_)},
     _dl_=
      function _aBs_(_aBp_,_aBq_,_aBr_){return _aBs_.fun(_aBp_,_aBq_,_aBr_)};
    caml_update_dummy
     (_c5_,
      function(_aBo_,_aBn_)
       {switch(_aBn_)
         {case 0:return caml_call1(fprintf(_aBo_),_dt_);
          case 1:return caml_call1(fprintf(_aBo_),_du_);
          case 2:return caml_call1(fprintf(_aBo_),_dv_);
          case 3:return caml_call1(fprintf(_aBo_),_dw_);
          case 4:return caml_call1(fprintf(_aBo_),_dx_);
          case 5:return caml_call1(fprintf(_aBo_),_dy_);
          case 6:return caml_call1(fprintf(_aBo_),_dz_);
          case 7:return caml_call1(fprintf(_aBo_),_dA_);
          case 8:return caml_call1(fprintf(_aBo_),_dB_);
          case 9:return caml_call1(fprintf(_aBo_),_dC_);
          default:return caml_call1(fprintf(_aBo_),_dD_)}});
    caml_update_dummy
     (_c6_,
      function(_aBm_,_aBl_)
       {return 0 === _aBl_
                ?caml_call1(fprintf(_aBm_),_dE_)
                :caml_call1(fprintf(_aBm_),_dF_)});
    caml_update_dummy
     (_c7_,
      function(_aBk_,_aBj_)
       {switch(_aBj_)
         {case 0:return caml_call1(fprintf(_aBk_),_dG_);
          case 1:return caml_call1(fprintf(_aBk_),_dH_);
          default:return caml_call1(fprintf(_aBk_),_dI_)}});
    caml_update_dummy
     (_c8_,
      function(_aBh_,_aBg_)
       {if(typeof _aBg_ === "number")
         switch(_aBg_)
          {case 0:return caml_call1(fprintf(_aBh_),_dJ_);
           case 1:return caml_call1(fprintf(_aBh_),_dK_);
           default:return caml_call1(fprintf(_aBh_),_dL_)}
        var _aBi_=_aBg_[1];
        return caml_call2(fprintf(_aBh_),_dM_,_aBi_)});
    caml_update_dummy
     (_c9_,
      function(_aBd_,_aBc_)
       {if(typeof _aBc_ === "number")
         switch(_aBc_)
          {case 0:return caml_call1(fprintf(_aBd_),_dN_);
           case 1:return caml_call1(fprintf(_aBd_),_dO_);
           case 2:return caml_call1(fprintf(_aBd_),_dP_);
           case 3:return caml_call1(fprintf(_aBd_),_dQ_);
           case 4:return caml_call1(fprintf(_aBd_),_dR_);
           case 5:return caml_call1(fprintf(_aBd_),_dS_);
           case 6:return caml_call1(fprintf(_aBd_),_dT_);
           case 7:return caml_call1(fprintf(_aBd_),_dU_);
           case 8:return caml_call1(fprintf(_aBd_),_dV_);
           case 9:return caml_call1(fprintf(_aBd_),_dW_);
           default:return caml_call1(fprintf(_aBd_),_dX_)}
        else
         {if(0 === _aBc_[0])
           {var _aBe_=_aBc_[1];return caml_call2(fprintf(_aBd_),_dY_,_aBe_)}
          var _aBf_=_aBc_[1];
          return caml_call2(fprintf(_aBd_),_dZ_,_aBf_)}});
    caml_update_dummy
     (_c__,
      function(_aA8_,_aA7_)
       {if(typeof _aA7_ === "number")
         switch(_aA7_)
          {case 0:return caml_call1(fprintf(_aA8_),_d0_);
           case 1:return caml_call1(fprintf(_aA8_),_d1_);
           case 2:return caml_call1(fprintf(_aA8_),_d2_);
           case 3:return caml_call1(fprintf(_aA8_),_d3_);
           case 4:return caml_call1(fprintf(_aA8_),_d4_);
           case 5:return caml_call1(fprintf(_aA8_),_d5_);
           case 6:return caml_call1(fprintf(_aA8_),_d6_);
           case 7:return caml_call1(fprintf(_aA8_),_d7_);
           case 8:return caml_call1(fprintf(_aA8_),_d8_);
           case 9:return caml_call1(fprintf(_aA8_),_d9_);
           case 10:return caml_call1(fprintf(_aA8_),_d__);
           case 11:return caml_call1(fprintf(_aA8_),_d$_);
           case 12:return caml_call1(fprintf(_aA8_),_ea_);
           case 13:return caml_call1(fprintf(_aA8_),_eb_);
           case 14:return caml_call1(fprintf(_aA8_),_ec_);
           case 15:return caml_call1(fprintf(_aA8_),_ed_);
           case 16:return caml_call1(fprintf(_aA8_),_ee_);
           case 17:return caml_call1(fprintf(_aA8_),_ef_);
           case 18:return caml_call1(fprintf(_aA8_),_eg_);
           case 19:return caml_call1(fprintf(_aA8_),_eh_);
           case 20:return caml_call1(fprintf(_aA8_),_ei_);
           case 21:return caml_call1(fprintf(_aA8_),_ej_);
           case 22:return caml_call1(fprintf(_aA8_),_ek_);
           case 23:return caml_call1(fprintf(_aA8_),_el_);
           case 24:return caml_call1(fprintf(_aA8_),_em_);
           case 25:return caml_call1(fprintf(_aA8_),_en_);
           default:return caml_call1(fprintf(_aA8_),_eo_)}
        else
         switch(_aA7_[0])
          {case 0:
            var _aA9_=_aA7_[1];return caml_call2(fprintf(_aA8_),_ep_,_aA9_);
           case 1:
            var _aA__=_aA7_[1];return caml_call2(fprintf(_aA8_),_eq_,_aA__);
           case 2:
            var _aA$_=_aA7_[2],_aBa_=_aA7_[1];
            return caml_call3(fprintf(_aA8_),_er_,_aBa_,_aA$_);
           default:
            var _aBb_=_aA7_[1];return caml_call2(fprintf(_aA8_),_es_,_aBb_)}});
    function _et_(_aA6_,_aA5_,_aA4_)
     {if(48 <= caml_string_get(_aA4_,0))
       if(!(57 < caml_string_get(_aA4_,0)))
        return pp_print_int(_aA5_,caml_call1(_aA6_,_aA4_));
      return pp_print_string(_aA5_,_aA4_)}
    caml_update_dummy
     (_c$_,
      function(_aA0_,_aAZ_,_aAY_)
       {if(0 === _aAY_[0])
         {pp_print_char(_aAZ_,64);
          var _aA1_=_aAY_[1],_aAX_=_aA0_[2];
          return _et_(function(_aA3_){return _cZ_(_aAX_,_aA3_)},_aAZ_,_aA1_)}
        pp_print_char(_aAZ_,37);
        var _aA2_=_aAY_[1];
        return _et_(_c0_(_aA0_),_aAZ_,_aA2_)});
    caml_update_dummy
     (_da_,
      function(_aAE_,_aAD_)
       {if(typeof _aAD_ === "number")
         switch(_aAD_)
          {case 0:return caml_call1(fprintf(_aAE_),_eu_);
           case 1:return caml_call1(fprintf(_aAE_),_ev_);
           case 2:return caml_call1(fprintf(_aAE_),_ew_);
           case 3:return caml_call1(fprintf(_aAE_),_ex_);
           case 4:throw [0,Assert_failure,_ey_];
           case 5:throw [0,Assert_failure,_ez_];
           case 6:throw [0,Assert_failure,_eA_];
           case 7:return caml_call1(fprintf(_aAE_),_eB_);
           case 8:return caml_call1(fprintf(_aAE_),_eC_);
           case 9:throw [0,Assert_failure,_eD_];
           default:throw [0,Assert_failure,_eE_]}
        else
         switch(_aAD_[0])
          {case 0:
            var _aAF_=_aAD_[1];return caml_call2(fprintf(_aAE_),_eF_,_aAF_);
           case 1:
            var _aAG_=_aAD_[1];
            return caml_call3(fprintf(_aAE_),_eG_,_da_,_aAG_);
           case 2:
            var _aAH_=_aAD_[1],_aAI_=_aAH_[2],_aAJ_=_aAH_[1];
            return caml_call4(fprintf(_aAE_),_eH_,_aAJ_,_da_,_aAI_);
           case 3:throw [0,Assert_failure,_eI_];
           case 4:
            var
             _aAK_=_aAD_[1],
             _aAL_=[0,_c3_],
             _aAM_=function(_aAV_,_aAW_){return _cY_(_aAL_,_da_,_aAV_,_aAW_)};
            return caml_call3(fprintf(_aAE_),_eJ_,_aAM_,_aAK_);
           case 5:
            var
             _aAN_=_aAD_[1],
             _aAO_=[0,_c3_],
             _aAP_=function(_aAT_,_aAU_){return _cY_(_aAO_,_da_,_aAT_,_aAU_)};
            return caml_call3(fprintf(_aAE_),_eK_,_aAP_,_aAN_);
           default:
            var _aAQ_=_aAD_[1],_aAR_=_aAQ_[2],_aAS_=_aAQ_[1];
            return caml_call4(fprintf(_aAE_),_eL_,_aAS_,_da_,_aAR_)}});
    caml_update_dummy
     (_db_,
      function(_aAB_,_aAA_)
       {switch(_aAA_)
         {case 0:var _aAC_=_eM_;break;
          case 1:var _aAC_=_eN_;break;
          case 2:var _aAC_=_eO_;break;
          case 3:var _aAC_=_eP_;break;
          case 4:var _aAC_=_eQ_;break;
          case 5:var _aAC_=_eR_;break;
          case 6:var _aAC_=_eS_;break;
          case 7:var _aAC_=_eT_;break;
          case 8:var _aAC_=_eU_;break;
          default:var _aAC_=_eV_}
        return caml_call1(fprintf(_aAB_),_aAC_)});
    caml_update_dummy
     (_dc_,
      function(_aAy_,_aAx_)
       {switch(_aAx_)
         {case 0:var _aAz_=_eW_;break;
          case 1:var _aAz_=_eX_;break;
          case 2:var _aAz_=_eY_;break;
          case 3:var _aAz_=_eZ_;break;
          case 4:var _aAz_=_e0_;break;
          case 5:var _aAz_=_e1_;break;
          case 6:var _aAz_=_e2_;break;
          case 7:var _aAz_=_e3_;break;
          case 8:var _aAz_=_e4_;break;
          case 9:var _aAz_=_e5_;break;
          case 10:var _aAz_=_e6_;break;
          case 11:var _aAz_=_e7_;break;
          case 12:var _aAz_=_e8_;break;
          case 13:var _aAz_=_e9_;break;
          case 14:var _aAz_=_e__;break;
          default:var _aAz_=_e$_}
        return caml_call1(fprintf(_aAy_),_aAz_)});
    caml_update_dummy
     (_dd_,
      function(_aAm_)
       {function _aAn_(_aAw_,_aAv_)
         {return _aAv_?caml_call1(fprintf(_aAw_),_fa_):_aAv_}
        function _aAo_(_aAu_,_aAt_)
         {return _aAt_?caml_call1(fprintf(_aAu_),_fb_):_aAt_}
        function _aAp_(_aAs_,_aAr_)
         {return _aAr_?caml_call1(fprintf(_aAs_),_fc_):_aAr_}
        return function(_aAq_)
         {if(typeof _aAq_ === "number")
           switch(_aAq_)
            {case 0:return caml_call1(fprintf(_aAm_),_fd_);
             case 1:return caml_call1(fprintf(_aAm_),_fe_);
             case 2:return caml_call1(fprintf(_aAm_),_ff_);
             case 3:return caml_call1(fprintf(_aAm_),_fg_);
             default:return caml_call1(fprintf(_aAm_),_fh_)}
          else
           switch(_aAq_[0])
            {case 0:
              caml_call1(fprintf(_aAm_),_fi_);
              _aAn_(_aAm_,_aAq_[1]);
              return _aAo_(_aAm_,_aAq_[2]);
             case 1:
              caml_call1(fprintf(_aAm_),_fj_);
              _aAn_(_aAm_,_aAq_[1]);
              return _aAo_(_aAm_,_aAq_[2]);
             case 2:
              caml_call1(fprintf(_aAm_),_fk_);
              _aAn_(_aAm_,_aAq_[1]);
              return _aAo_(_aAm_,_aAq_[2]);
             case 3:
              caml_call1(fprintf(_aAm_),_fl_);
              _aAn_(_aAm_,_aAq_[1]);
              return _aAo_(_aAm_,_aAq_[2]);
             case 4:
              caml_call1(fprintf(_aAm_),_fm_);return _aAp_(_aAm_,_aAq_[1]);
             case 5:
              caml_call1(fprintf(_aAm_),_fn_);return _aAp_(_aAm_,_aAq_[1]);
             case 6:
              caml_call1(fprintf(_aAm_),_fo_);return _aAp_(_aAm_,_aAq_[1]);
             default:
              caml_call1(fprintf(_aAm_),_fp_);return _aAp_(_aAm_,_aAq_[1])}}});
    caml_update_dummy
     (_de_,
      function(_aAk_,_aAj_)
       {switch(_aAj_)
         {case 0:var _aAl_=_fq_;break;
          case 1:var _aAl_=_fr_;break;
          case 2:var _aAl_=_fs_;break;
          case 3:var _aAl_=_ft_;break;
          default:var _aAl_=_fu_}
        return caml_call1(fprintf(_aAk_),_aAl_)});
    caml_update_dummy
     (_df_,
      function(_aAh_,_aAg_)
       {switch(_aAg_)
         {case 0:var _aAi_=_fv_;break;
          case 1:var _aAi_=_fw_;break;
          case 2:var _aAi_=_fx_;break;
          case 3:var _aAi_=_fy_;break;
          default:var _aAi_=_fz_}
        return pp_print_string(_aAh_,_aAi_)});
    caml_update_dummy
     (_dg_,
      function(_aAe_,_aAd_)
       {switch(_aAd_)
         {case 0:var _aAf_=_fA_;break;
          case 1:var _aAf_=_fB_;break;
          case 2:var _aAf_=_fC_;break;
          case 3:var _aAf_=_fD_;break;
          case 4:var _aAf_=_fE_;break;
          case 5:var _aAf_=_fF_;break;
          case 6:var _aAf_=_fG_;break;
          case 7:var _aAf_=_fH_;break;
          case 8:var _aAf_=_fI_;break;
          case 9:var _aAf_=_fJ_;break;
          case 10:var _aAf_=_fK_;break;
          default:var _aAf_=_fL_}
        return caml_call1(fprintf(_aAe_),_aAf_)});
    caml_update_dummy
     (_dh_,
      function(_axI_,_axH_,_axG_)
       {if(typeof _axG_ === "number")
         switch(_axG_)
          {case 0:return pp_print_string(_axH_,_fM_);
           case 1:throw [0,Assert_failure,_fN_];
           case 5:return pp_print_string(_axH_,_fP_);
           case 6:return pp_print_string(_axH_,_fQ_);
           default:throw [0,Assert_failure,_fO_]}
        else
         switch(_axG_[0])
          {case 0:
            var
             _axJ_=_axG_[4],
             _axK_=caml_call1(_di_,_axI_),
             _axL_=_axG_[3],
             _axM_=caml_call1(_di_,_axI_),
             _axN_=_axG_[2],
             _axO_=_axG_[1];
            return caml_call9
                    (fprintf(_axH_),
                     _fR_,
                     _dd_,
                     _axO_,
                     _da_,
                     _axN_,
                     _axM_,
                     _axL_,
                     _axK_,
                     _axJ_);
           case 1:
            var
             _axP_=_axG_[4],
             _axQ_=caml_call1(_di_,_axI_),
             _axR_=_axG_[3],
             _axS_=caml_call1(_di_,_axI_),
             _axT_=_axG_[2],
             _axU_=_axG_[1];
            return caml_call9
                    (fprintf(_axH_),
                     _fS_,
                     _db_,
                     _axU_,
                     _da_,
                     _axT_,
                     _axS_,
                     _axR_,
                     _axQ_,
                     _axP_);
           case 2:
            var _axV_=_axG_[2];
            caml_call2(_de_,_axH_,_axG_[1]);
            if(0 !== _axV_){_c2_(_axH_,0);_cY_([0,_c2_],_df_,_axH_,_axV_)}
            var
             _axW_=_axG_[5],
             _axX_=caml_call1(_di_,_axI_),
             _axY_=_axG_[4],
             _axZ_=caml_call1(_di_,_axI_),
             _ax0_=_axG_[3];
            return caml_call7
                    (fprintf(_axH_),_fT_,_da_,_ax0_,_axZ_,_axY_,_axX_,_axW_);
           case 3:
            var
             _ax1_=_axG_[4],
             _ax2_=caml_call1(_di_,_axI_),
             _ax3_=_axG_[3],
             _ax4_=caml_call1(_di_,_axI_),
             _ax5_=_axG_[2],
             _ax6_=_axG_[1];
            return caml_call9
                    (fprintf(_axH_),
                     _fU_,
                     _dc_,
                     _ax6_,
                     _da_,
                     _ax5_,
                     _ax4_,
                     _ax3_,
                     _ax2_,
                     _ax1_);
           case 4:
            var
             _ax7_=_axG_[4],
             _ax8_=_axG_[3],
             _ax9_=caml_call1(_di_,_axI_),
             _ax__=_axG_[2],
             _ax$_=_axG_[1];
            return caml_call9
                    (fprintf(_axH_),
                     _fV_,
                     _dg_,
                     _ax$_,
                     _da_,
                     _ax__,
                     _ax9_,
                     _ax8_,
                     _da_,
                     _ax7_);
           case 5:
            var
             _aya_=_axG_[2],
             _ayb_=caml_call1(_dj_,_axI_),
             _ayc_=[0,_c3_],
             _ayd_=function(_aAb_,_aAc_){return _cY_(_ayc_,_ayb_,_aAb_,_aAc_)},
             _aye_=_axG_[1],
             _ayf_=caml_call1(_dj_,_axI_);
            return caml_call5(fprintf(_axH_),_fW_,_ayf_,_aye_,_ayd_,_aya_);
           case 6:
            var
             _ayg_=_axG_[2],
             _ayh_=caml_call1(_dj_,_axI_),
             _ayi_=_axG_[1],
             _ayj_=caml_call1(_dj_,_axI_);
            return caml_call5(fprintf(_axH_),_fX_,_ayj_,_ayi_,_ayh_,_ayg_);
           case 7:
            var
             _ayk_=_axG_[3],
             _ayl_=caml_call1(_dj_,_axI_),
             _aym_=_axG_[2],
             _ayn_=caml_call1(_dj_,_axI_),
             _ayo_=_axG_[1],
             _ayp_=caml_call1(_dj_,_axI_);
            return caml_call7
                    (fprintf(_axH_),_fY_,_ayp_,_ayo_,_ayn_,_aym_,_ayl_,_ayk_);
           case 8:
            var
             _ayq_=_axG_[3],
             _ayr_=caml_call1(_dj_,_axI_),
             _ays_=_axG_[2],
             _ayt_=caml_call1(_dj_,_axI_),
             _ayu_=_axG_[1],
             _ayv_=caml_call1(_dj_,_axI_);
            return caml_call7
                    (fprintf(_axH_),_fZ_,_ayv_,_ayu_,_ayt_,_ays_,_ayr_,_ayq_);
           case 9:
            var
             _ayw_=_axG_[2],
             _ayx_=[0,_c3_],
             _ayy_=
              function(_az$_,_aAa_)
               {return _cY_(_ayx_,pp_print_int,_az$_,_aAa_)},
             _ayz_=_axG_[1],
             _ayA_=caml_call1(_dj_,_axI_);
            return caml_call5(fprintf(_axH_),_f0_,_ayA_,_ayz_,_ayy_,_ayw_);
           case 10:
            var
             _ayB_=_axG_[3],
             _ayC_=[0,_c3_],
             _ayD_=
              function(_az9_,_az__)
               {return _cY_(_ayC_,pp_print_int,_az9_,_az__)},
             _ayE_=_axG_[2],
             _ayF_=caml_call1(_dj_,_axI_),
             _ayG_=_axG_[1],
             _ayH_=caml_call1(_dj_,_axI_);
            return caml_call7
                    (fprintf(_axH_),_f1_,_ayH_,_ayG_,_ayF_,_ayE_,_ayD_,_ayB_);
           case 11:
            var
             _ayI_=_axG_[2],
             _ayJ_=caml_call1(_dj_,_axI_),
             _ayK_=[0,_c3_],
             _ayL_=function(_az7_,_az8_){return _cY_(_ayK_,_ayJ_,_az7_,_az8_)},
             _ayM_=_axG_[1],
             _ayN_=caml_call1(_dk_,_axI_);
            return caml_call5(fprintf(_axH_),_f2_,_ayN_,_ayM_,_ayL_,_ayI_);
           case 12:
            var _ayO_=_axG_[3],_ayP_=_axG_[2],_ayQ_=_axG_[1];
            caml_call3(fprintf(_axH_),_f3_,_da_,_ayQ_);
            if(_ayP_)
             {var _ayR_=_ayP_[1],_ayS_=caml_call1(_dj_,_axI_);
              caml_call3(fprintf(_axH_),_f4_,_ayS_,_ayR_)}
            if(_ayO_)
             {var _ayT_=_ayO_[1];return caml_call2(fprintf(_axH_),_f5_,_ayT_)}
            return _ayO_;
           case 13:
            var _ayU_=_axG_[3];
            pp_print_string(_axH_,_f6_);
            if(_axG_[1])pp_print_string(_axH_,_f7_);
            caml_call3(_dj_,_axI_,_axH_,_axG_[2]);
            if(_ayU_)
             {var _ayV_=_ayU_[1];return caml_call2(fprintf(_axH_),_f8_,_ayV_)}
            return _ayU_;
           case 14:
            var
             _ayW_=_axG_[2],
             _ayX_=
              function(_az6_,_az5_)
               {caml_call3(_di_,_axI_,_az6_,_az5_[1]);
                pp_print_string(_az6_,_f9_);
                return caml_call3(_c$_,_axI_,_az6_,_az5_[2])},
             _ayY_=
              [0,function(_az3_,_az4_){return pp_print_string(_az3_,_f__)}],
             _ayZ_=function(_az1_,_az2_){return _cY_(_ayY_,_ayX_,_az1_,_az2_)},
             _ay0_=_axG_[1];
            return caml_call5(fprintf(_axH_),_f$_,_da_,_ay0_,_ayZ_,_ayW_);
           case 15:
            var
             _ay1_=_axG_[3],
             _ay2_=caml_call1(_dj_,_axI_),
             _ay3_=_axG_[2],
             _ay4_=caml_call1(_dj_,_axI_),
             _ay5_=_axG_[1],
             _ay6_=caml_call1(_dj_,_axI_);
            return caml_call7
                    (fprintf(_axH_),_ga_,_ay6_,_ay5_,_ay4_,_ay3_,_ay2_,_ay1_);
           case 16:
            var _ay7_=_axG_[4];
            pp_print_string(_axH_,_gb_);
            if(_axG_[1])pp_print_string(_axH_,_gc_);
            var
             _ay8_=_axG_[3],
             _ay9_=caml_call1(_dk_,_axI_),
             _ay__=_axG_[2],
             _ay$_=caml_call1(_dj_,_axI_);
            caml_call5(fprintf(_axH_),_gd_,_ay$_,_ay__,_ay9_,_ay8_);
            if(_ay7_)
             {var _aza_=_ay7_[1];return caml_call2(fprintf(_axH_),_ge_,_aza_)}
            return _ay7_;
           case 17:
            var
             _azb_=_axG_[4],
             _azc_=caml_call1(_dk_,_axI_),
             _azd_=_axG_[3],
             _aze_=caml_call1(_dk_,_axI_),
             _azf_=_axG_[2],
             _azg_=caml_call1(_dj_,_axI_),
             _azh_=[0,_c3_],
             _azi_=function(_azZ_,_az0_){return _cY_(_azh_,_azg_,_azZ_,_az0_)},
             _azj_=_axG_[1],
             _azk_=caml_call1(_dk_,_axI_);
            return caml_call9
                    (fprintf(_axH_),
                     _gf_,
                     _azk_,
                     _azj_,
                     _azi_,
                     _azf_,
                     _aze_,
                     _azd_,
                     _azc_,
                     _azb_);
           case 18:
            var
             _azl_=_axG_[1],
             _azm_=[0,_azl_[1],_azl_[2]],
             _azn_=caml_call1(_dj_,_axI_);
            return caml_call3(fprintf(_axH_),_gg_,_azn_,_azm_);
           case 19:
            var
             _azo_=_axG_[3],
             _azp_=caml_call1(_dk_,_axI_),
             _azq_=_axG_[2],
             _azr_=caml_call1(_dk_,_axI_),
             _azs_=_axG_[1],
             _azt_=caml_call1(_dj_,_axI_);
            return caml_call7
                    (fprintf(_axH_),_gh_,_azt_,_azs_,_azr_,_azq_,_azp_,_azo_);
           case 20:
            var
             _azu_=_axG_[1],
             _azv_=_azu_[2],
             _azw_=caml_call1(_c$_,_axI_),
             _azx_=_azu_[1];
            return caml_call5(fprintf(_axH_),_gi_,_da_,_azx_,_azw_,_azv_);
           case 21:
            var
             _azy_=_axG_[3],
             _azz_=
              function(_azY_,_azX_)
               {caml_call3(_dj_,_axI_,_azY_,_azX_[1]);
                pp_print_string(_azY_,_gj_);
                return caml_call3(_dk_,_axI_,_azY_,_azX_[2])},
             _azA_=[0,_c2_],
             _azB_=function(_azV_,_azW_){return _cY_(_azA_,_azz_,_azV_,_azW_)},
             _azC_=_axG_[2],
             _azD_=caml_call1(_dk_,_axI_),
             _azE_=_axG_[1],
             _azF_=caml_call1(_dj_,_axI_);
            return caml_call7
                    (fprintf(_axH_),_gk_,_azF_,_azE_,_azD_,_azC_,_azB_,_azy_);
           case 22:
            var
             _azG_=_axG_[2],
             _azH_=caml_call1(_dk_,_axI_),
             _azI_=[0,_c3_],
             _azJ_=function(_azT_,_azU_){return _cY_(_azI_,_azH_,_azT_,_azU_)},
             _azK_=_axG_[1],
             _azL_=caml_call1(_dj_,_axI_);
            return caml_call5(fprintf(_axH_),_gl_,_azL_,_azK_,_azJ_,_azG_);
           case 23:
            var
             _azM_=_axG_[1],
             _azN_=[0,_azM_[1],_azM_[2]],
             _azO_=caml_call1(_dj_,_axI_);
            return caml_call3(fprintf(_axH_),_gm_,_azO_,_azN_);
           default:
            var
             _azP_=_axG_[2],
             _azQ_=caml_call1(_dh_,_axI_),
             _azR_=_axG_[1],
             _azS_=caml_call1(_c$_,_axI_);
            return caml_call5(fprintf(_axH_),_gn_,_azS_,_azR_,_azQ_,_azP_)}});
    caml_update_dummy
     (_di_,
      function(_axh_,state,_axg_)
       {if(typeof _axg_ === "number")
         switch(_axg_)
          {case 0:return pp_print_string(state,_go_);
           case 1:return pp_print_string(state,_gp_);
           default:return pp_print_string(state,_gq_)}
        else
         switch(_axg_[0])
          {case 0:return caml_call3(_c$_,_axh_,state,_axg_[1]);
           case 1:return pp_print_int(state,_axg_[1]);
           case 2:return pp_print_string(state,string_of_float(_axg_[1]));
           case 3:return pp_print_string(state,string_of_bool(_axg_[1]));
           case 4:
            var
             _axi_=_axg_[1],
             _axj_=caml_call1(_dj_,_axh_),
             _axk_=[0,_c3_],
             _axl_=function(_axC_,_axD_){return _cY_(_axk_,_axj_,_axC_,_axD_)};
            return caml_call3(fprintf(state),_gr_,_axl_,_axi_);
           case 5:
            var
             _axm_=_axg_[1],
             _axn_=caml_call1(_dj_,_axh_),
             _axo_=[0,_c3_],
             _axp_=function(_axA_,_axB_){return _cY_(_axo_,_axn_,_axA_,_axB_)};
            return caml_call3(fprintf(state),_gs_,_axp_,_axm_);
           case 6:
            var
             _axq_=_axg_[1],
             _axr_=caml_call1(_dj_,_axh_),
             _axs_=[0,_c3_],
             _axt_=function(_axy_,_axz_){return _cY_(_axs_,_axr_,_axy_,_axz_)};
            return caml_call3(fprintf(state),_gt_,_axt_,_axq_);
           default:
            var
             _axu_=_axg_[1],
             _axv_=caml_call1(_dj_,_axh_),
             _axw_=[0,_c3_],
             _axx_=function(_axE_,_axF_){return _cY_(_axw_,_axv_,_axE_,_axF_)};
            return caml_call3(fprintf(state),_gu_,_axx_,_axu_)}});
    caml_update_dummy
     (_dj_,
      function(_axc_,_axb_,_axa_)
       {var _axd_=_axa_[2],_axe_=caml_call1(_di_,_axc_),_axf_=_axa_[1];
        return caml_call5(fprintf(_axb_),_gv_,_da_,_axf_,_axe_,_axd_)});
    caml_update_dummy
     (_dk_,
      function(_aw8_,_aw7_,_aw6_)
       {var _aw9_=_aw6_[2],_aw__=caml_call1(_c$_,_aw8_),_aw$_=_aw6_[1];
        return caml_call5(fprintf(_aw7_),_gw_,_da_,_aw$_,_aw__,_aw9_)});
    caml_update_dummy
     (_dl_,
      function(_aw5_,_aw4_,_aw3_)
       {return _cY_([0,pp_force_newline],caml_call1(_dm_,_aw5_),_aw4_,_aw3_)});
    caml_update_dummy
     (_dm_,
      function(_awN_,_awM_,_awL_)
       {switch(_awL_[0])
         {case 0:
           var _awO_=_awL_[1];return caml_call2(fprintf(_awM_),_gx_,_awO_);
          case 1:
           var _awP_=_awL_[1];return caml_call2(fprintf(_awM_),_gy_,_awP_);
          case 2:return caml_call3(_dp_,_awN_,_awM_,_awL_[1]);
          case 3:return caml_call3(_dq_,_awN_,_awM_,_awL_[1]);
          case 4:
           var
            _awQ_=_awL_[1],
            _awR_=_awQ_[2],
            _awS_=_awQ_[1],
            _awT_=caml_call1(_c$_,_awN_);
           return caml_call5(fprintf(_awM_),_gz_,_awT_,_awS_,_da_,_awR_);
          case 5:return caml_call3(_do_,_awN_,_awM_,_awL_[1]);
          case 6:
           var _awU_=_awL_[2],_awV_=caml_call1(_dn_,_awN_),_awW_=_awL_[1];
           return caml_call4(fprintf(_awM_),_gA_,_awW_,_awV_,_awU_);
          default:
           var
            _awX_=_awL_[2],
            _awY_=[0,_c2_],
            _awZ_=function(_aw1_,_aw2_){return _cY_(_awY_,_c__,_aw1_,_aw2_)},
            _aw0_=_awL_[1];
           return caml_call4(fprintf(_awM_),_gB_,_aw0_,_awZ_,_awX_)}});
    caml_update_dummy
     (_dn_,
      function(_awu_,_awt_,_aws_)
       {if(typeof _aws_ === "number")
         return pp_print_string(_awt_,_gC_);
        else
         switch(_aws_[0])
          {case 0:return caml_call3(_dj_,_awu_,_awt_,_aws_[1]);
           case 1:
            var _awv_=_aws_[1];return caml_call2(fprintf(_awt_),_gD_,_awv_);
           case 2:
            var _aww_=_aws_[1];return caml_call2(fprintf(_awt_),_gE_,_aww_);
           case 3:
            var
             _awx_=_aws_[1],
             _awy_=
              function(_awI_,_awH_)
               {return caml_call2(fprintf(_awI_),_gF_,_awH_)},
             _awz_=[0,_c3_],
             _awA_=function(_awF_,_awG_){return _cY_(_awz_,_awy_,_awF_,_awG_)};
            return caml_call3(fprintf(_awt_),_gG_,_awA_,_awx_);
           default:
            var
             _awB_=_aws_[1],
             _awC_=caml_call1(_dn_,_awu_),
             _awD_=[0,_c3_],
             _awE_=function(_awJ_,_awK_){return _cY_(_awD_,_awC_,_awJ_,_awK_)};
            return caml_call3(fprintf(_awt_),_gH_,_awE_,_awB_)}});
    caml_update_dummy
     (_do_,
      function(_awi_,_awh_,_awg_)
       {var
         _awj_=_awg_[13],
         _awk_=_awg_[12],
         _awl_=_awg_[4],
         _awm_=_awg_[2],
         _awn_=_awg_[3]?_gI_:_gM_,
         _awo_=_awg_[1],
         _awp_=caml_call1(_c$_,_awi_);
        caml_call6(fprintf(_awh_),_gJ_,_awp_,_awo_,_awn_,_da_,_awm_);
        if(_awl_)caml_call3(_di_,_awi_,_awh_,_awl_[1]);
        if(_awk_){var _awq_=_awk_[1];caml_call2(fprintf(_awh_),_gK_,_awq_)}
        if(_awj_)
         {var _awr_=_awj_[1];return caml_call2(fprintf(_awh_),_gL_,_awr_)}
        return _awj_});
    caml_update_dummy
     (_dp_,
      function(_av2_,_av1_,_av0_)
       {var _av3_=_av0_[2];
        if(typeof _av3_ !== "number" && 3 === _av3_[0])
         {var
           _av4_=_av0_[3],
           _av5_=_av4_[1],
           _av6_=_av3_[1],
           _av7_=
            function(_awf_,_awe_)
             {caml_call2(_da_,_awf_,_awe_[1]);
              return _cY_([0,_c2_],_c9_,_awf_,_awe_[2])};
          pp_print_string(_av1_,_gO_);
          if(0 !== _av5_){_c2_(_av1_,0);_cY_([0,_c2_],_c9_,_av1_,_av5_)}
          var
           _av8_=combine(_av6_[2],_av4_[2]),
           _av9_=[0,_c3_],
           _av__=function(_awc_,_awd_){return _cY_(_av9_,_av7_,_awc_,_awd_)},
           _av$_=_av0_[1],
           _awa_=caml_call1(_c$_,_av2_),
           _awb_=_av6_[1];
          return caml_call7
                  (fprintf(_av1_),_gP_,_da_,_awb_,_awa_,_av$_,_av__,_av8_)}
        throw [0,Match_failure,_gN_]});
    caml_update_dummy
     (_dq_,
      function(_avv_,_avu_,_avt_)
       {var _avw_=_avt_[1],_avx_=_avw_[2];
        if(typeof _avx_ !== "number" && 3 === _avx_[0])
         {var
           _avy_=_avw_[3],
           _avz_=_avy_[1],
           _avA_=_avx_[1],
           _avB_=
            function(_avX_,_avW_)
             {var _avY_=_avW_[1],_avZ_=_avY_[2];
              caml_call2(_da_,_avX_,_avY_[1]);
              _c2_(_avX_,0);
              if(0 !== _avZ_){_cY_([0,_c2_],_c9_,_avX_,_avZ_);_c2_(_avX_,0)}
              return caml_call3(_c$_,_avv_,_avX_,_avW_[2])};
          pp_print_string(_avu_,_gR_);
          var _avC_=_avt_[4];
          if(_avC_){caml_call2(_c5_,_avu_,_avC_[1]);_c2_(_avu_,0)}
          var _avD_=_avt_[5];
          if(_avD_){caml_call2(_c7_,_avu_,_avD_[1]);_c2_(_avu_,0)}
          var _avE_=_avt_[6];
          if(_avE_){caml_call2(_c6_,_avu_,_avE_[1]);_c2_(_avu_,0)}
          var _avF_=_avt_[7];
          if(_avF_){caml_call2(_c8_,_avu_,_avF_[1]);_c2_(_avu_,0)}
          if(0 !== _avz_){_cY_([0,_c2_],_c9_,_avu_,_avz_);_c2_(_avu_,0)}
          var
           _avG_=_avt_[2],
           _avH_=combine(combine(_avA_[2],_avy_[2]),_avG_),
           _avI_=[0,_c3_],
           _avJ_=function(_avU_,_avV_){return _cY_(_avI_,_avB_,_avU_,_avV_)},
           _avK_=_avw_[1],
           _avL_=caml_call1(_c$_,_avv_),
           _avM_=_avA_[1];
          caml_call7(fprintf(_avu_),_gS_,_da_,_avM_,_avL_,_avK_,_avJ_,_avH_);
          if(0 !== _avt_[8]){_cY_([0,_c2_],_c__,_avu_,_avt_[8]);_c2_(_avu_,0)}
          var _avN_=_avt_[9];
          if(_avN_){var _avO_=_avN_[1];caml_call2(fprintf(_avu_),_gT_,_avO_)}
          var _avP_=_avt_[10];
          if(_avP_){var _avQ_=_avP_[1];caml_call2(fprintf(_avu_),_gU_,_avQ_)}
          var _avR_=_avt_[11];
          if(_avR_){var _avS_=_avR_[1];caml_call2(fprintf(_avu_),_gV_,_avS_)}
          pp_print_char(_avu_,123);
          pp_force_newline(_avu_,0);
          var _avT_=_avt_[3];
          _cY_([0,pp_force_newline],caml_call1(_dr_,_avv_),_avu_,_avT_);
          pp_force_newline(_avu_,0);
          return pp_print_char(_avu_,125)}
        throw [0,Match_failure,_gQ_]});
    caml_update_dummy
     (_dr_,
      function(_avp_,_avo_,_avn_)
       {var _avq_=_avn_[1];
        try
         {pp_print_int(_avo_,caml_call1(_c0_(_avp_),_avq_))}
        catch(_avs_)
         {_avs_ = caml_wrap_exception(_avs_);
          var
           switch$0=
            _avs_[1] === Failure
             ?caml_string_notequal(_avs_[2],_gW_)
               ?0
               :(pp_print_string(_avo_,_avq_),1)
             :0;
          if(!switch$0)throw _avs_}
        pp_print_char(_avo_,58);
        pp_open_box(_avo_,2);
        pp_force_newline(_avo_,0);
        var _avr_=_avn_[2];
        _cY_([0,pp_force_newline],caml_call1(_dh_,_avp_),_avo_,_avr_);
        return pp_close_box(_avo_,0)});
    caml_update_dummy
     (_ds_,
      function(_au9_,_au8_,_au7_)
       {var _au__=_au7_[1];
        caml_call2(fprintf(_au8_),_gX_,_au__);
        pp_force_newline(_au8_,0);
        caml_call3(_dm_,_au9_,_au8_,_au7_[2]);
        pp_force_newline(_au8_,0);
        caml_call3(_dm_,_au9_,_au8_,_au7_[3]);
        pp_force_newline(_au8_,0);
        var _au$_=_au7_[4],_ava_=map(function(_avm_){return _avm_[2]},_au$_);
        _cY_([0,pp_force_newline],caml_call1(_do_,_c1_(_au9_)),_au8_,_ava_);
        pp_force_newline(_au8_,0);
        var
         _avb_=_au7_[5],
         _avc_=
          caml_call1
           (find_all
             (function(_avj_)
               {var param=_au7_[6],_avk_=_avj_[1];
                for(;;)
                 {if(param)
                   {var
                     l=param[2],
                     match=param[1],
                     a=match[1],
                     _avi_=0 === caml_compare(a,_avk_)?1:0;
                    if(!_avi_){var param=l;continue}
                    var _avl_=_avi_}
                  else
                   var _avl_=0;
                  return 1 - _avl_}}),
            _avb_),
         _avd_=map(function(_avh_){return _avh_[2]},_avc_);
        _cY_([0,pp_force_newline],caml_call1(_dp_,_c1_(_au9_)),_au8_,_avd_);
        pp_force_newline(_au8_,0);
        var _ave_=_au7_[6],_avf_=map(function(_avg_){return _avg_[2]},_ave_);
        _cY_([0,pp_force_newline],caml_call1(_dq_,_c1_(_au9_)),_au8_,_avf_);
        return pp_force_newline(_au8_,0)});
    var _g0_=2,_g1_=7,_g2_=0;
    function _g3_(_au6_){return [0,_gY_,[1,_au6_]]}
    function _g4_(_au4_)
     {var _au5_=_au4_[2];
      if(typeof _au5_ !== "number" && 0 === _au5_[0])
       return [0,_au4_[1],_au5_[1]];
      throw [0,Match_failure,_g5_]}
    function _g6_(_au1_,_au0_,_auZ_,_auY_)
     {var _au2_=_au1_?_au1_[1]:_au1_,_au3_=_au0_?_au0_[1]:_au0_;
      return [0,_g2_,[16,_au2_,_auZ_,_g4_(_auY_),_au3_]]}
    function _g7_(_auR_,_auQ_)
     {var
       _auS_=_auR_?_auR_[1]:_auR_,
       _auT_=_auQ_?_auQ_[1]:_auQ_,
       _auU_=[0,_auS_,_auT_];
      return function(_auW_,_auX_)
       {var _auV_=_auW_[1];return [0,_auV_,[0,_auU_,_auV_,_auW_[2],_auX_[2]]]}}
    function _g8_(_auP_,_auO_)
     {var _auN_=_g4_(_auP_);return [24,_auN_[2],_auO_[2]]}
    function _g$_(_auF_,_auE_,_auD_)
     {if(caml_string_notequal(_auD_,_ha_))
       try
        {var
          _auI_=assoc(_auD_,_auF_[2]),
          _auJ_=_a_(_auD_,caml_new_string("" + _auI_)),
          _auK_=[0,_auF_[1],[0,[0,_auD_,_auI_ + 1 | 0],_auF_[2]]],
          _auH_=_auK_,
          _auG_=_auJ_}
       catch(_auM_)
        {_auM_ = caml_wrap_exception(_auM_);
         if(_auM_ !== Not_found)throw _auM_;
         var _auH_=[0,_auF_[1],[0,[0,_auD_,0],_auF_[2]]],_auG_=_auD_}
      else
       var
        _auL_=_auF_[1],
        _auH_=[0,_auL_ + 1 | 0,_auF_[2]],
        _auG_=caml_new_string("" + _auL_);
      return [0,_auH_,[0,_auE_,[0,[1,_auG_]]]]}
    function _hd_(_auB_,_auA_,_auz_)
     {var _auC_=_g$_(_auB_[2],_auA_,_auz_);
      return [0,[0,_auB_[1],_auC_[1]],_auC_[2]]}
    function to_string(f){return string_of_float(f)}
    var
     SimpleMap=_cL_([0,compare]),
     compare$3=caml_compare,
     PairMap=_cL_([0,compare$3]),
     makeKeywords=SimpleMap[33],
     makeTypes=SimpleMap[33],
     makeCasts=PairMap[33],
     makeFunctions=PairMap[33],
     makeOperators=PairMap[33],
     makeArrayInitializations=SimpleMap[33],
     makeArrayCopy=SimpleMap[33],
     makeRealToString=SimpleMap[33],
     global_replacement_map=[0,SimpleMap[1]];
    function registerReplacements(name,t)
     {global_replacement_map[1]
      =
      caml_call3(SimpleMap[4],name,t,global_replacement_map[1]);
      return 0}
    function takeSecond(param,opt1,opt2){return opt2?opt2:opt1}
    function extendReplacements(first,second)
     {var
       _aur_=caml_call3(SimpleMap[7],takeSecond,first[9],second[9]),
       _aus_=caml_call3(SimpleMap[7],takeSecond,first[8],second[8]),
       _aut_=caml_call3(SimpleMap[7],takeSecond,first[7],second[7]),
       _auu_=caml_call3(PairMap[7],takeSecond,first[6],second[6]),
       _auv_=caml_call3(PairMap[7],takeSecond,first[5],second[5]),
       _auw_=caml_call3(PairMap[7],takeSecond,first[4],second[4]),
       _aux_=caml_call3(PairMap[7],takeSecond,first[3],second[3]),
       _auy_=caml_call3(SimpleMap[7],takeSecond,first[2],second[2]);
      return [0,
              caml_call3(SimpleMap[7],takeSecond,first[1],second[1]),
              _auy_,
              _aux_,
              _auw_,
              _auv_,
              _auu_,
              _aut_,
              _aus_,
              _aur_]}
    function getKeyword(t,name)
     {var match=caml_call2(SimpleMap[26],name,t[1]);
      if(match){var new_keyword=match[1];return new_keyword}
      return name}
    function getType(t,name)
     {var match=caml_call2(SimpleMap[26],name,t[2]);
      if(match){var new_type=match[1];return new_type}
      return name}
    function getCast(t,from_t,to_t)
     {var
       to_tt=getType(t,to_t),
       from_tt=getType(t,from_t),
       match=caml_call2(PairMap[26],[0,from_tt,to_tt],t[3]);
      if(match){var cast=match[1];return cast}
      return to_tt}
    function getFunction(t,op,typ)
     {var
       typ_t=getType(t,typ),
       match=caml_call2(PairMap[26],[0,op,typ_t],t[6]);
      if(match){var new_op=match[1];return new_op}
      return op}
    function _hf_(path)
     {if(caml_sys_file_exists(path))
       {var file=open_in(path),buffer=create(16);
        try
         {for(;;){var c=caml_ml_input_char(file);add_char(buffer,c);continue}}
        catch(_auq_){caml_ml_close_channel(file);return [0,contents(buffer)]}}
      return 0}
    function _hg_(path)
     {if(caml_sys_file_exists(path))
       {var file=open_in(path),buffer=create(16);
        try
         {for(;;){var c=caml_ml_input_char(file);add_char(buffer,c);continue}}
        catch(_aup_)
         {_aup_ = caml_wrap_exception(_aup_);
          if(_aup_ === End_of_file)
           {caml_ml_close_channel(file);return [0,buffer]}
          throw _aup_}}
      return 0}
    function read(path){return _hf_(path)}
    function pp(fmt,param){return pp_print_string(fmt,_hh_)}
    var default$0=[0,dummy_pos,dummy_pos,_hi_];
    function isSamePos(p1,p2)
     {var _aum_=p1[2] === p2[2]?1:0;
      if(_aum_)
       var _aun_=p1[3] === p2[3]?1:0,_auo_=_aun_?p1[4] === p2[4]?1:0:_aun_;
      else
       var _auo_=_aum_;
      return _auo_}
    function isSameLoc(loc1,loc2)
     {var _aul_=isSamePos(loc1[1],loc2[1]);
      return _aul_?isSamePos(loc1[2],loc2[2]):_aul_}
    function getLocation(source,lexbuf)
     {return [0,lexbuf[11],lexbuf[12],source]}
    function startColumn(location){return location[1][4] - location[1][3] | 0}
    function line(location){return location[1][2]}
    function to_string_readable(location)
     {var
       _aui_=location[2][4] - location[1][3] | 0,
       _auj_=location[1][4] - location[1][3] | 0,
       _auk_=location[1][2];
      return caml_call3(sprintf(_hj_),_auk_,_auj_,_aui_)}
    function getNext(loc)
     {var _auh_=loc[2],end_pos=[0,_auh_[1],_auh_[2],_auh_[3],loc[2][4]];
      return [0,end_pos,end_pos,loc[3]]}
    function merge(loc1,loc2)
     {if(caml_equal(loc1,default$0))return loc2;
      if(caml_equal(loc2,default$0))return loc1;
      var pos_list=[0,loc1[1],[0,loc2[1],[0,loc1[2],[0,loc2[2],0]]]];
      if(pos_list)
       {var _aud_=pos_list[1];
        if(pos_list[2])
         var
          _aue_=[0,_aud_,_aud_],
          match=
           fold_left
            (function(param,a)
              {var
                max=param[2],
                min=param[1],
                _auf_=a[2] !== max[2]?a[2] < max[2]?max:a:a[4] < max[4]?max:a,
                _aug_=a[2] !== min[2]?a[2] < min[2]?a:min:a[4] < min[4]?a:min;
               return [0,_aug_,_auf_]},
             _aue_,
             pos_list);
        else
         var match=[0,_aud_,_aud_]}
      else
       var match=failwith(_hk_);
      var end_pos=match[2],start_pos=match[1];
      return [0,start_pos,end_pos,loc1[3]]}
    var Errors=[248,_hl_,caml_fresh_oo_id(0)];
    function reportErrorStringNoLoc(error)
     {if(0 === error[0])
       {var
         msg=error[2],
         location=error[1],
         col_start$0=startColumn(location),
         _at$_=location[3];
        if(0 === _at$_[0])
         {var filename=_at$_[1],match=read(filename);
          if(match)
           var contents$0=match[1],_aua_=lines(contents$0);
          else
           var _aua_=failwith(_a_(_hp_,filename));
          var lines$0=_aua_}
        else
         var code=_at$_[1],lines$0=lines(code);
        var n=line(location);
        if(1 < n >>> 0)
         var
          _aub_=_a_(_ho_,nth(lines$0,n - 1 | 0)),
          result=_a_(nth(lines$0,n - 2 | 0),_aub_);
        else
         var result=nth(lines$0,0);
        if(caml_string_equal(sub$0,_cD_))invalid_arg(_cE_);
        var
         pattern=compile(sub$0),
         b=create(caml_ml_string_length(result)),
         start=[0,0];
        for(;;)
         {if(start[1] < caml_ml_string_length(result))
           {var i=find$1([0,start[1]],pattern,result);
            if(0 <= i)
             {add_substring(b,result,start[1],i - start[1] | 0);
              add_string(b,by);
              start[1] = i + 1 | 0}
            else
             {add_substring
               (b,
                result,
                start[1],
                caml_ml_string_length(result) - start[1] | 0);
              start[1] = caml_ml_string_length(result)}
            continue}
          var
           line$0=contents(b),
           col_start=max(startColumn(location),0),
           col_end=max(location[2][4] - location[1][3] | 0,0),
           pointer=
            0 === (col_end - col_start | 0)
             ?_hm_
             :make$0(col_end - col_start | 0,94),
           _at__=make$0(col_start,32),
           indicator=caml_call3(sprintf(_hn_),line$0,_at__,pointer),
           full_msg=_a_(msg,_a_(_hq_,indicator)),
           _auc_=line(location);
          return [0,full_msg,location[1][1],_auc_,col_start$0]}}
      var msg$0=error[1];
      return [0,msg$0,_hr_,0,0]}
    function raiseError(msg,loc){throw [0,Errors,[0,[0,loc,msg],0]]}
    function raiseErrorMsg(msg){throw [0,Errors,[0,[1,msg],0]]}
    var
     pp_args=function _at9_(_at7_,_at8_){return _at9_.fun(_at7_,_at8_)},
     show_args=function _at6_(_at5_){return _at6_.fun(_at5_)};
    caml_update_dummy
     (pp_args,
      function(fmt,x)
       {caml_call1(fprintf(fmt),_hA_);
        caml_call2(fprintf(fmt),_hC_,_hB_);
        var _atP_=x[1];
        caml_call1(fprintf(fmt),_hD_);
        var _atQ_=0;
        fold_left
         (function(sep,param)
           {if(sep)caml_call1(fprintf(fmt),_hE_);
            if(0 === param[0])
             {var a0=param[1];
              caml_call1(fprintf(fmt),_hs_);
              caml_call1(caml_call1(fprintf(fmt),_ht_),a0);
              caml_call1(fprintf(fmt),_hu_)}
            else
             {var a1=param[2],a0$0=param[1];
              caml_call1(fprintf(fmt),_hv_);
              caml_call1(caml_call1(fprintf(fmt),_hw_),a0$0);
              caml_call1(fprintf(fmt),_hx_);
              caml_call1(caml_call1(fprintf(fmt),_hy_),a1);
              caml_call1(fprintf(fmt),_hz_)}
            return 1},
          _atQ_,
          _atP_);
        caml_call1(fprintf(fmt),_hF_);
        caml_call1(fprintf(fmt),_hG_);
        caml_call1(fprintf(fmt),_hH_);
        caml_call2(fprintf(fmt),_hJ_,_hI_);
        var _atR_=x[2];
        caml_call1(caml_call1(fprintf(fmt),_hK_),_atR_);
        caml_call1(fprintf(fmt),_hL_);
        caml_call1(fprintf(fmt),_hM_);
        caml_call2(fprintf(fmt),_hO_,_hN_);
        var _atS_=x[3];
        caml_call1(caml_call1(fprintf(fmt),_hP_),_atS_);
        caml_call1(fprintf(fmt),_hQ_);
        caml_call1(fprintf(fmt),_hR_);
        caml_call2(fprintf(fmt),_hT_,_hS_);
        var _atT_=x[4];
        caml_call1(caml_call1(fprintf(fmt),_hU_),_atT_);
        caml_call1(fprintf(fmt),_hV_);
        caml_call1(fprintf(fmt),_hW_);
        caml_call2(fprintf(fmt),_hY_,_hX_);
        var _atU_=x[5];
        caml_call1(caml_call1(fprintf(fmt),_hZ_),_atU_);
        caml_call1(fprintf(fmt),_h0_);
        caml_call1(fprintf(fmt),_h1_);
        caml_call2(fprintf(fmt),_h3_,_h2_);
        var _atV_=x[6];
        caml_call1(caml_call1(fprintf(fmt),_h4_),_atV_);
        caml_call1(fprintf(fmt),_h5_);
        caml_call1(fprintf(fmt),_h6_);
        caml_call2(fprintf(fmt),_h8_,_h7_);
        var _atW_=x[7];
        caml_call1(caml_call1(fprintf(fmt),_h9_),_atW_);
        caml_call1(fprintf(fmt),_h__);
        caml_call1(fprintf(fmt),_h$_);
        caml_call2(fprintf(fmt),_ib_,_ia_);
        var _atX_=x[8];
        caml_call1(caml_call1(fprintf(fmt),_ic_),_atX_);
        caml_call1(fprintf(fmt),_id_);
        caml_call1(fprintf(fmt),_ie_);
        caml_call2(fprintf(fmt),_ig_,_if_);
        var _atY_=x[9];
        caml_call1(caml_call1(fprintf(fmt),_ih_),_atY_);
        caml_call1(fprintf(fmt),_ii_);
        caml_call1(fprintf(fmt),_ij_);
        caml_call2(fprintf(fmt),_il_,_ik_);
        var _atZ_=x[10];
        caml_call1(caml_call1(fprintf(fmt),_im_),_atZ_);
        caml_call1(fprintf(fmt),_in_);
        caml_call1(fprintf(fmt),_io_);
        caml_call2(fprintf(fmt),_iq_,_ip_);
        var _at0_=x[11];
        caml_call1(caml_call1(fprintf(fmt),_ir_),_at0_);
        caml_call1(fprintf(fmt),_is_);
        caml_call1(fprintf(fmt),_it_);
        caml_call2(fprintf(fmt),_iv_,_iu_);
        var _at1_=x[12];
        caml_call1(caml_call1(fprintf(fmt),_iw_),_at1_);
        caml_call1(fprintf(fmt),_ix_);
        caml_call1(fprintf(fmt),_iy_);
        caml_call2(fprintf(fmt),_iA_,_iz_);
        var _at2_=x[13];
        caml_call1(fprintf(fmt),_iB_);
        var _at3_=0;
        fold_left
         (function(sep,x)
           {if(sep)caml_call1(fprintf(fmt),_iC_);
            caml_call1(caml_call1(fprintf(fmt),_iD_),x);
            return 1},
          _at3_,
          _at2_);
        caml_call1(fprintf(fmt),_iE_);
        caml_call1(fprintf(fmt),_iF_);
        caml_call1(fprintf(fmt),_iG_);
        caml_call2(fprintf(fmt),_iI_,_iH_);
        var _at4_=x[14];
        caml_call1(caml_call1(fprintf(fmt),_iJ_),_at4_);
        caml_call1(fprintf(fmt),_iK_);
        return caml_call1(fprintf(fmt),_iL_)});
    caml_update_dummy
     (show_args,function(x){return caml_call2(asprintf(_iM_),pp_args,x)});
    var equal_args=function _atO_(_atM_,_atN_){return _atO_.fun(_atM_,_atN_)};
    caml_update_dummy
     (equal_args,
      function(lhs,rhs)
       {var x=lhs[1],y=rhs[1];
        for(;;)
         {if(x)
           if(y)
            {var y$0=y[2],b=y[1],x$0=x[2],a=x[1];
             if(0 === a[0])
              {var _ats_=a[1];
               if(0 === b[0])
                var rhs0=b[1],_atL_=caml_string_equal(_ats_,rhs0),switch$1=1;
               else
                var switch$1=0}
             else
              {var _att_=a[2],_atu_=a[1];
               if(0 === b[0])
                var switch$1=0;
               else
                {var
                  rhs1=b[2],
                  rhs0$0=b[1],
                  _atv_=caml_string_equal(_atu_,rhs0$0);
                 if(_atv_)
                  var _atL_=caml_string_equal(_att_,rhs1),switch$1=1;
                 else
                  var _atL_=_atv_,switch$1=1}}
             if(!switch$1)var _atL_=0;
             if(_atL_){var x=x$0,y=y$0;continue}
             var _atw_=_atL_,switch$0=1}
           else
            var switch$0=0;
          else
           if(y)var switch$0=0;else var _atw_=1,switch$0=1;
          if(!switch$0)var _atw_=0;
          var
           _atx_=_atw_?lhs[2] === rhs[2]?1:0:_atw_,
           _aty_=_atx_?lhs[3] === rhs[3]?1:0:_atx_,
           _atz_=_aty_?lhs[4] === rhs[4]?1:0:_aty_,
           _atA_=_atz_?lhs[5] === rhs[5]?1:0:_atz_,
           _atB_=_atA_?lhs[6] === rhs[6]?1:0:_atA_,
           _atC_=_atB_?lhs[7] === rhs[7]?1:0:_atB_,
           _atD_=_atC_?lhs[8] === rhs[8]?1:0:_atC_,
           _atE_=_atD_?caml_string_equal(lhs[9],rhs[9]):_atD_,
           _atF_=_atE_?caml_string_equal(lhs[10],rhs[10]):_atE_,
           _atG_=_atF_?caml_string_equal(lhs[11],rhs[11]):_atF_,
           _atH_=_atG_?lhs[12] === rhs[12]?1:0:_atG_;
          if(_atH_)
           {var x$1=lhs[13],y$1=rhs[13];
            for(;;)
             {if(x$1)
               if(y$1)
                {var
                  y$2=y$1[2],
                  b$0=y$1[1],
                  x$2=x$1[2],
                  a$0=x$1[1],
                  _atI_=caml_string_equal(a$0,b$0);
                 if(_atI_){var x$1=x$2,y$1=y$2;continue}
                 var _atJ_=_atI_,switch$2=1}
               else
                var switch$2=0;
              else
               if(y$1)var switch$2=0;else var _atJ_=1,switch$2=1;
              if(!switch$2)var _atJ_=0;
              var _atK_=_atJ_;
              break}}
          else
           var _atK_=_atH_;
          return _atK_?lhs[14] === rhs[14]?1:0:_atK_}});
    var
     compare_args=
      function _atr_(_atp_,_atq_){return _atr_.fun(_atp_,_atq_)};
    caml_update_dummy
     (compare_args,
      function(lhs,rhs)
       {var x$0=caml_int_compare(lhs[14],rhs[14]);
        if(0 === x$0)
         {var x$1=lhs[13],y=rhs[13];
          for(;;)
           {if(x$1)
             if(y)
              {var y$0=y[2],b=y[1],x$2=x$1[2],a=x$1[1],x$3=caml_compare(a,b);
               if(0 === x$3){var x$1=x$2,y=y$0;continue}
               var x$4=x$3}
             else
              var x$4=1;
            else
             var x$4=y?-1:0;
            if(0 === x$4)
             {var x$5=caml_int_compare(lhs[12],rhs[12]);
              if(0 === x$5)
               {var x$6=caml_string_compare(lhs[11],rhs[11]);
                if(0 === x$6)
                 {var x$7=caml_string_compare(lhs[10],rhs[10]);
                  if(0 === x$7)
                   {var x$8=caml_string_compare(lhs[9],rhs[9]);
                    if(0 === x$8)
                     {var x$9=caml_int_compare(lhs[8],rhs[8]);
                      if(0 === x$9)
                       {var x$10=caml_int_compare(lhs[7],rhs[7]);
                        if(0 === x$10)
                         {var x$11=caml_int_compare(lhs[6],rhs[6]);
                          if(0 === x$11)
                           {var x$12=caml_int_compare(lhs[5],rhs[5]);
                            if(0 === x$12)
                             {var x$13=caml_int_compare(lhs[4],rhs[4]);
                              if(0 === x$13)
                               {var x$14=caml_int_compare(lhs[3],rhs[3]);
                                if(0 === x$14)
                                 {var x$15=caml_int_compare(lhs[2],rhs[2]);
                                  if(0 === x$15)
                                   {var x$16=lhs[1],y$1=rhs[1];
                                    for(;;)
                                     {if(x$16)
                                       {if(y$1)
                                         {var y$2=y$1[2],b$0=y$1[1],x$17=x$16[2],a$0=x$16[1];
                                          if(0 === a$0[0])
                                           {var _atk_=a$0[1];
                                            if(0 === b$0[0])
                                             var
                                              rhs0=b$0[1],
                                              _ato_=caml_string_compare(_atk_,rhs0),
                                              switch$0=1;
                                            else
                                             var switch$0=0}
                                          else
                                           {var _atm_=a$0[2],_atn_=a$0[1];
                                            if(0 === b$0[0])
                                             var switch$0=0;
                                            else
                                             {var
                                               rhs1=b$0[2],
                                               rhs0$0=b$0[1],
                                               x=caml_string_compare(_atn_,rhs0$0);
                                              if(0 === x)
                                               var _ato_=caml_string_compare(_atm_,rhs1),switch$0=1;
                                              else
                                               var _ato_=x,switch$0=1}}
                                          if(!switch$0)
                                           var
                                            to_int=function(param){return 0 === param[0]?0:1},
                                            _atl_=to_int(b$0),
                                            _ato_=caml_int_compare(to_int(a$0),_atl_);
                                          if(0 === _ato_){var x$16=x$17,y$1=y$2;continue}
                                          return _ato_}
                                        return 1}
                                      return y$1?-1:0}}
                                  return x$15}
                                return x$14}
                              return x$13}
                            return x$12}
                          return x$11}
                        return x$10}
                      return x$9}
                    return x$8}
                  return x$7}
                return x$6}
              return x$5}
            return x$4}}
        return x$0});
    var
     _iN_=0,
     _iO_=0,
     _iP_=0,
     _iT_=0,
     _iU_=0,
     _iV_=0,
     _iW_=0,
     _iX_=0,
     _iY_=0,
     _iZ_=0,
     _i0_=0;
    function pp$0(fmt,x)
     {caml_call1(fprintf(fmt),_i1_);
      var _atj_=0;
      fold_left
       (function(sep,x)
         {if(sep)caml_call1(fprintf(fmt),_i2_);
          caml_call1(caml_call1(fprintf(fmt),_i3_),x);
          return 1},
        _atj_,
        x);
      return caml_call1(fprintf(fmt),_i4_)}
    var equal=function _ati_(_atg_,_ath_){return _ati_.fun(_atg_,_ath_)};
    caml_update_dummy
     (equal,
      function(x$1,y$1)
       {var x=x$1,y=y$1;
        for(;;)
         {if(x)
           {if(y)
             {var
               y$0=y[2],
               b=y[1],
               x$0=x[2],
               a=x[1],
               _atf_=caml_string_equal(a,b);
              if(_atf_){var x=x$0,y=y$0;continue}
              return _atf_}}
          else
           if(!y)return 1;
          return 0}});
    var compare$4=function _ate_(_atc_,_atd_){return _ate_.fun(_atc_,_atd_)};
    caml_update_dummy
     (compare$4,
      function(x$2,y$1)
       {var x=x$2,y=y$1;
        for(;;)
         {if(x)
           {if(y)
             {var y$0=y[2],b=y[1],x$0=x[2],a=x[1],x$1=caml_compare(a,b);
              if(0 === x$1){var x=x$0,y=y$0;continue}
              return x$1}
            return 1}
          return y?-1:0}});
    function postfix(id,post)
     {if(id)
       {var _ata_=id[2],_atb_=id[1];
        if(!_ata_)return [0,_a_(_atb_,post),0];
        if(!_ata_[2]){var name=_ata_[1];return [0,_atb_,[0,_a_(name,post),0]]}}
      return failwith(_i5_)}
    function joinSep(sep,fname,var$0)
     {return [0,concat$0(sep,joinErrors(fname,var$0)),0]}
    function pp_id(fmt,x)
     {caml_call1(fprintf(fmt),_i6_);
      var _as$_=0;
      fold_left
       (function(sep,x)
         {if(sep)caml_call1(fprintf(fmt),_i7_);
          caml_call1(caml_call1(fprintf(fmt),_i8_),x);
          return 1},
        _as$_,
        x);
      return caml_call1(fprintf(fmt),_i9_)}
    var equal_id=function _as__(_as8_,_as9_){return _as__.fun(_as8_,_as9_)};
    caml_update_dummy
     (equal_id,
      function(x$1,y$1)
       {var x=x$1,y=y$1;
        for(;;)
         {if(x)
           {if(y)
             {var
               y$0=y[2],
               b=y[1],
               x$0=x[2],
               a=x[1],
               _as7_=caml_string_equal(a,b);
              if(_as7_){var x=x$0,y=y$0;continue}
              return _as7_}}
          else
           if(!y)return 1;
          return 0}});
    var compare_id=function _as6_(_as4_,_as5_){return _as6_.fun(_as4_,_as5_)};
    caml_update_dummy
     (compare_id,
      function(x$2,y$1)
       {var x=x$2,y=y$1;
        for(;;)
         {if(x)
           {if(y)
             {var y$0=y[2],b=y[1],x$0=x[2],a=x[1],x$1=caml_compare(a,b);
              if(0 === x$1){var x=x$0,y=y$0;continue}
              return x$1}
            return 1}
          return y?-1:0}});
    var
     pp_vtype=function _as3_(_as1_,_as2_){return _as3_.fun(_as1_,_as2_)},
     show_vtype=function _as0_(_asZ_){return _as0_.fun(_asZ_)},
     pp$1=function _asY_(_asW_,_asX_){return _asY_.fun(_asW_,_asX_)},
     show=function _asV_(_asU_){return _asV_.fun(_asU_)};
    caml_update_dummy
     (pp_vtype,
      function(fmt,param)
       {switch(param[0])
         {case 0:
           var a2=param[3],a1=param[2],a0=param[1];
           caml_call1(fprintf(fmt),_i__);
           caml_call1(caml_call1(fprintf(fmt),_i$_),a0);
           caml_call1(fprintf(fmt),_ja_);
           if(a1)
            {var x=a1[1];
             pp_print_string(fmt,_jb_);
             caml_call1(caml_call1(fprintf(fmt),_jc_),x);
             pp_print_string(fmt,_jd_)}
           else
            pp_print_string(fmt,_je_);
           caml_call1(fprintf(fmt),_jf_);
           if(a2)
            {var x$0=a2[1];
             pp_print_string(fmt,_jg_);
             pp(fmt,x$0);
             pp_print_string(fmt,_jh_)}
           else
            pp_print_string(fmt,_ji_);
           return caml_call1(fprintf(fmt),_jj_);
          case 1:
           var a1$0=param[2],a0$0=param[1];
           caml_call1(fprintf(fmt),_jk_);
           pp_id(fmt,a0$0);
           caml_call1(fprintf(fmt),_jl_);
           if(a1$0)
            {var x$1=a1$0[1];
             pp_print_string(fmt,_jm_);
             pp(fmt,x$1);
             pp_print_string(fmt,_jn_)}
           else
            pp_print_string(fmt,_jo_);
           return caml_call1(fprintf(fmt),_jp_);
          case 2:
           var a2$0=param[3],a1$1=param[2],a0$1=param[1];
           caml_call1(fprintf(fmt),_jq_);
           pp_id(fmt,a0$1);
           caml_call1(fprintf(fmt),_jr_);
           caml_call1(fprintf(fmt),_js_);
           var _asS_=0;
           fold_left
            (function(sep,x)
              {if(sep)caml_call1(fprintf(fmt),_jt_);
               caml_call1(caml_call1(pp$1,fmt),x);
               return 1},
             _asS_,
             a1$1);
           caml_call1(fprintf(fmt),_ju_);
           caml_call1(fprintf(fmt),_jv_);
           if(a2$0)
            {var x$2=a2$0[1];
             pp_print_string(fmt,_jw_);
             pp(fmt,x$2);
             pp_print_string(fmt,_jx_)}
           else
            pp_print_string(fmt,_jy_);
           return caml_call1(fprintf(fmt),_jz_);
          case 3:
           var a2$1=param[3],a1$2=param[2],a0$2=param[1];
           caml_call1(fprintf(fmt),_jA_);
           caml_call1(caml_call1(pp$1,fmt),a0$2);
           caml_call1(fprintf(fmt),_jB_);
           caml_call1(caml_call1(pp$1,fmt),a1$2);
           caml_call1(fprintf(fmt),_jC_);
           if(a2$1)
            {var x$3=a2$1[1];
             pp_print_string(fmt,_jD_);
             pp(fmt,x$3);
             pp_print_string(fmt,_jE_)}
           else
            pp_print_string(fmt,_jF_);
           return caml_call1(fprintf(fmt),_jG_);
          case 4:
           var a0$3=param[1];
           caml_call1(fprintf(fmt),_jH_);
           caml_call1(caml_call1(pp$1,fmt),a0$3);
           return caml_call1(fprintf(fmt),_jI_);
          case 5:
           var a0$4=param[1];
           caml_call1(fprintf(fmt),_jJ_);
           caml_call1(fprintf(fmt),_jK_);
           var _asT_=0;
           fold_left
            (function(sep,x)
              {if(sep)caml_call1(fprintf(fmt),_jL_);
               caml_call1(caml_call1(pp$1,fmt),x);
               return 1},
             _asT_,
             a0$4);
           caml_call1(fprintf(fmt),_jM_);
           return caml_call1(fprintf(fmt),_jN_);
          default:
           var a1$3=param[2],a0$5=param[1];
           caml_call1(fprintf(fmt),_jO_);
           caml_call1(caml_call1(fprintf(fmt),_jP_),a0$5);
           caml_call1(fprintf(fmt),_jQ_);
           if(a1$3)
            {var x$4=a1$3[1];
             pp_print_string(fmt,_jR_);
             pp(fmt,x$4);
             pp_print_string(fmt,_jS_)}
           else
            pp_print_string(fmt,_jT_);
           return caml_call1(fprintf(fmt),_jU_)}});
    caml_update_dummy
     (show_vtype,function(x){return caml_call2(asprintf(_jV_),pp_vtype,x)});
    caml_update_dummy
     (pp$1,
      function(fmt,x)
       {pp_print_string(fmt,_jW_);
        var _asR_=x[1];
        caml_call1(caml_call1(pp_vtype,fmt),_asR_);
        return pp_print_string(fmt,_jX_)});
    caml_update_dummy
     (show,function(x){return caml_call2(asprintf(_jY_),pp$1,x)});
    var
     equal_vtype=function _asQ_(_asO_,_asP_){return _asQ_.fun(_asO_,_asP_)},
     equal$0=function _asN_(_asL_,_asM_){return _asN_.fun(_asL_,_asM_)};
    caml_update_dummy
     (equal_vtype,
      function(lhs,match)
       {switch(lhs[0])
         {case 0:
           if(0 === match[0])
            {var
              rhs2=match[3],
              rhs1=match[2],
              rhs0=match[1],
              lhs2=lhs[3],
              lhs1=lhs[2],
              lhs0=lhs[1],
              _asz_=caml_string_equal(lhs0,rhs0);
             if(_asz_)
              {if(lhs1)
                if(rhs1)
                 var b=rhs1[1],a=lhs1[1],_asA_=a === b?1:0,switch$0=1;
                else
                 var switch$0=0;
               else
                if(rhs1)var switch$0=0;else var _asA_=1,switch$0=1;
               if(!switch$0)var _asA_=0;
               var _asB_=_asA_}
             else
              var _asB_=_asz_;
             if(_asB_)
              {if(lhs2){if(rhs2)return 1}else if(!rhs2)return 1;return 0}
             return _asB_}
           break;
          case 1:
           if(1 === match[0])
            {var
              rhs1$0=match[2],
              rhs0$0=match[1],
              lhs1$0=lhs[2],
              lhs0$0=lhs[1],
              _asC_=caml_call1(caml_call1(equal_id,lhs0$0),rhs0$0);
             if(_asC_)
              {if(lhs1$0){if(rhs1$0)return 1}else if(!rhs1$0)return 1;
               return 0}
             return _asC_}
           break;
          case 2:
           if(2 === match[0])
            {var
              rhs2$0=match[3],
              rhs1$1=match[2],
              rhs0$1=match[1],
              lhs2$0=lhs[3],
              lhs1$1=lhs[2],
              lhs0$1=lhs[1],
              _asD_=caml_call1(caml_call1(equal_id,lhs0$1),rhs0$1);
             if(_asD_)
              {var x=lhs1$1,y=rhs1$1;
               for(;;)
                {if(x)
                  if(y)
                   {var
                     y$0=y[2],
                     b$0=y[1],
                     x$0=x[2],
                     a$0=x[1],
                     _asE_=caml_call1(caml_call1(equal$0,a$0),b$0);
                    if(_asE_){var x=x$0,y=y$0;continue}
                    var _asF_=_asE_,switch$1=1}
                  else
                   var switch$1=0;
                 else
                  if(y)var switch$1=0;else var _asF_=1,switch$1=1;
                 if(!switch$1)var _asF_=0;
                 var _asG_=_asF_;
                 break}}
             else
              var _asG_=_asD_;
             if(_asG_)
              {if(lhs2$0){if(rhs2$0)return 1}else if(!rhs2$0)return 1;
               return 0}
             return _asG_}
           break;
          case 3:
           if(3 === match[0])
            {var
              rhs2$1=match[3],
              rhs1$2=match[2],
              rhs0$2=match[1],
              lhs2$1=lhs[3],
              lhs1$2=lhs[2],
              lhs0$2=lhs[1],
              _asH_=caml_call1(caml_call1(equal$0,lhs0$2),rhs0$2),
              _asI_=_asH_?caml_call1(caml_call1(equal$0,lhs1$2),rhs1$2):_asH_;
             if(_asI_)
              {if(lhs2$1){if(rhs2$1)return 1}else if(!rhs2$1)return 1;
               return 0}
             return _asI_}
           break;
          case 4:
           if(4 === match[0])
            {var rhs0$3=match[1],lhs0$3=lhs[1];
             return caml_call1(caml_call1(equal$0,lhs0$3),rhs0$3)}
           break;
          case 5:
           if(5 === match[0])
            {var rhs0$4=match[1],lhs0$4=lhs[1],x$1=lhs0$4,y$1=rhs0$4;
             for(;;)
              {if(x$1)
                {if(y$1)
                  {var
                    y$2=y$1[2],
                    b$1=y$1[1],
                    x$2=x$1[2],
                    a$1=x$1[1],
                    _asJ_=caml_call1(caml_call1(equal$0,a$1),b$1);
                   if(_asJ_){var x$1=x$2,y$1=y$2;continue}
                   return _asJ_}}
               else
                if(!y$1)return 1;
               return 0}}
           break;
          default:
           if(6 === match[0])
            {var
              rhs1$3=match[2],
              rhs0$5=match[1],
              lhs1$3=lhs[2],
              lhs0$5=lhs[1],
              _asK_=lhs0$5 === rhs0$5?1:0;
             if(_asK_)
              {if(lhs1$3){if(rhs1$3)return 1}else if(!rhs1$3)return 1;
               return 0}
             return _asK_}}
        return 0});
    caml_update_dummy
     (equal$0,
      function(a,b)
       {var _asy_=b[1];return caml_call1(caml_call1(equal_vtype,a[1]),_asy_)});
    var
     compare_vtype=function _asx_(_asv_,_asw_){return _asx_.fun(_asv_,_asw_)},
     compare$5=function _asu_(_ass_,_ast_){return _asu_.fun(_ass_,_ast_)};
    caml_update_dummy
     (compare_vtype,
      function(lhs,match)
       {switch(lhs[0])
         {case 0:
           if(0 === match[0])
            {var
              rhs2=match[3],
              rhs1=match[2],
              rhs0=match[1],
              lhs2=lhs[3],
              lhs1=lhs[2],
              lhs0=lhs[1],
              x=caml_string_compare(lhs0,rhs0);
             if(0 === x)
              {if(lhs1)
                {var _asq_=lhs1[1];
                 if(rhs1)
                  var b=rhs1[1],x$0=caml_int_compare(_asq_,b);
                 else
                  var x$0=1}
               else
                var x$0=rhs1?-1:0;
               return 0 === x$0?lhs2?rhs2?0:1:rhs2?-1:0:x$0}
             return x}
           break;
          case 1:
           if(1 === match[0])
            {var
              rhs1$0=match[2],
              rhs0$0=match[1],
              lhs1$0=lhs[2],
              lhs0$0=lhs[1],
              x$1=caml_call1(caml_call1(compare_id,lhs0$0),rhs0$0);
             return 0 === x$1?lhs1$0?rhs1$0?0:1:rhs1$0?-1:0:x$1}
           break;
          case 2:
           if(2 === match[0])
            {var
              rhs2$0=match[3],
              rhs1$1=match[2],
              rhs0$1=match[1],
              lhs2$0=lhs[3],
              lhs1$1=lhs[2],
              lhs0$1=lhs[1],
              x$2=caml_call1(caml_call1(compare_id,lhs0$1),rhs0$1);
             if(0 === x$2)
              {var x$3=lhs1$1,y=rhs1$1;
               for(;;)
                {if(x$3)
                  if(y)
                   {var
                     y$0=y[2],
                     b$0=y[1],
                     x$4=x$3[2],
                     a=x$3[1],
                     x$5=caml_call1(caml_call1(compare$5,a),b$0);
                    if(0 === x$5){var x$3=x$4,y=y$0;continue}
                    var x$6=x$5}
                  else
                   var x$6=1;
                 else
                  var x$6=y?-1:0;
                 return 0 === x$6?lhs2$0?rhs2$0?0:1:rhs2$0?-1:0:x$6}}
             return x$2}
           break;
          case 3:
           if(3 === match[0])
            {var
              rhs2$1=match[3],
              rhs1$2=match[2],
              rhs0$2=match[1],
              lhs2$1=lhs[3],
              lhs1$2=lhs[2],
              lhs0$2=lhs[1],
              x$7=caml_call1(caml_call1(compare$5,lhs0$2),rhs0$2);
             if(0 === x$7)
              {var x$8=caml_call1(caml_call1(compare$5,lhs1$2),rhs1$2);
               return 0 === x$8?lhs2$1?rhs2$1?0:1:rhs2$1?-1:0:x$8}
             return x$7}
           break;
          case 4:
           if(4 === match[0])
            {var rhs0$3=match[1],lhs0$3=lhs[1];
             return caml_call1(caml_call1(compare$5,lhs0$3),rhs0$3)}
           break;
          case 5:
           if(5 === match[0])
            {var rhs0$4=match[1],lhs0$4=lhs[1],x$9=lhs0$4,y$1=rhs0$4;
             for(;;)
              {if(x$9)
                {if(y$1)
                  {var
                    y$2=y$1[2],
                    b$1=y$1[1],
                    x$10=x$9[2],
                    a$0=x$9[1],
                    x$11=caml_call1(caml_call1(compare$5,a$0),b$1);
                   if(0 === x$11){var x$9=x$10,y$1=y$2;continue}
                   return x$11}
                 return 1}
               return y$1?-1:0}}
           break;
          default:
           if(6 === match[0])
            {var
              rhs1$3=match[2],
              rhs0$5=match[1],
              lhs1$3=lhs[2],
              lhs0$5=lhs[1],
              x$12=caml_int_compare(lhs0$5,rhs0$5);
             return 0 === x$12?lhs1$3?rhs1$3?0:1:rhs1$3?-1:0:x$12}}
        function to_int(param)
         {switch(param[0])
           {case 0:return 0;
            case 1:return 1;
            case 2:return 2;
            case 3:return 3;
            case 4:return 4;
            case 5:return 5;
            default:return 6}}
        var _asr_=to_int(match);
        return caml_int_compare(to_int(lhs),_asr_)});
    caml_update_dummy
     (compare$5,
      function(a,b)
       {var _asp_=b[1];
        return caml_call1(caml_call1(compare_vtype,a[1]),_asp_)});
    function unlink(t)
     {var t$0=t;
      for(;;)
       {var _asn_=t$0[1];
        switch(_asn_[0])
         {case 0:var level=_asn_[2],name=_asn_[1];return [0,[0,name,level,0]];
          case 1:var id=_asn_[1];return [0,[1,id,0]];
          case 2:
           var elems=_asn_[2],id$0=_asn_[1];
           return [0,[2,id$0,map(unlink,elems),0]];
          case 3:
           var t2=_asn_[2],t1=_asn_[1],_aso_=unlink(t2);
           return [0,[3,unlink(t1),_aso_,0]];
          case 4:var t$1=_asn_[1],t$0=t$1;continue;
          case 5:var elems$0=_asn_[1];return [0,[5,map(unlink,elems$0)]];
          default:var n=_asn_[1];return [0,[6,n,0]]}}}
    function compare$6(a,b)
     {var _asm_=unlink(b);return caml_call2(compare$5,unlink(a),_asm_)}
    var gensym_counter=[0,0];
    function gensym(param)
     {var n=gensym_counter[1];
      gensym_counter[1]++;
      return _a_(_jZ_,caml_new_string("" + n))}
    var _j0_=1;
    function current_level(param){return _j0_}
    function makeArrowType(last,types)
     {if(types)
       {var t=types[2],h=types[1];return [0,[3,h,makeArrowType(last,t),0]]}
      return last}
    function stripArrow(typ)
     {var _asl_=typ[1];
      if(3 === _asl_[0])
       {var
         t2=_asl_[2],
         t1=_asl_[1],
         match=stripArrow(t2),
         last=match[2],
         args=match[1];
        return [0,[0,t1,args],last]}
      return [0,0,typ]}
    function newvar(param)
     {var _ask_=[0,current_level(0)];return [0,[0,gensym(0),_ask_,0]]}
    function base(t)
     {var _asj_=t[1];
      switch(_asj_[0])
       {case 1:var id=_asj_[1];return id;
        case 2:var id$0=_asj_[1];return id$0;
        default:return failwith(_j1_)}}
    function fixType(table,t)
     {try
       {var
         _ash_=
          [0,
           find(function(key){return caml_call2(equal$0,key,t)},table),
           table];
        return _ash_}
      catch(_asi_)
       {var _asg_=t[1];
        switch(_asg_[0])
         {case 0:return [0,t,[0,t,table]];
          case 2:
           var
            loc=_asg_[3],
            elems=_asg_[2],
            id=_asg_[1],
            match=fixTypeList(table,elems),
            table$0=match[2],
            elems$0=match[1];
           return [0,[0,[2,id,elems$0,loc]],table$0];
          case 3:
           var
            loc$0=_asg_[3],
            t2=_asg_[2],
            t1=_asg_[1],
            match$0=fixType(table,t1),
            table$1=match$0[2],
            t1$0=match$0[1],
            match$1=fixType(table$1,t2),
            table$2=match$1[2],
            t2$0=match$1[1];
           return [0,[0,[3,t1$0,t2$0,loc$0]],table$2];
          case 4:
           var
            link=_asg_[1],
            match$2=fixType(table,link),
            table$3=match$2[2],
            link$0=match$2[1];
           return [0,[0,[4,link$0]],table$3];
          case 5:
           var
            elems$1=_asg_[1],
            match$3=fixTypeList(table,elems$1),
            table$4=match$3[2],
            elems$2=match$3[1];
           return [0,[0,[5,elems$2]],table$4];
          default:return [0,t,table]}}}
    function fixTypeList(table,tl)
     {var
       _asf_=[0,0,table],
       match=
        fold_left
         (function(param,t)
           {var
             table=param[2],
             ol=param[1],
             match=fixType(table,t),
             table$0=match[2],
             o=match[1];
            return [0,[0,o,ol],table$0]},
          _asf_,
          tl),
       table$0=match[2],
       tl$0=match[1];
      return [0,rev(tl$0),table$0]}
    function isUnbound(t)
     {var t$0=t;
      for(;;)
       {var _asd_=t$0[1];
        switch(_asd_[0])
         {case 0:return 1;
          case 1:return 0;
          case 2:var elems=_asd_[2];return exists(isUnbound,elems);
          case 3:
           var t2=_asd_[2],t1=_asd_[1],_ase_=isUnbound(t1);
           if(_ase_)return _ase_;
           var t$0=t2;
           continue;
          case 4:var t$1=_asd_[1],t$0=t$1;continue;
          case 5:return 1;
          default:return 0}}}
    function location(t)
     {var t$0=t;
      for(;;)
       {var _ar8_=t$0[1];
        switch(_ar8_[0])
         {case 0:
           var _ar9_=_ar8_[3];if(_ar9_){var loc=_ar9_[1];return loc}break;
          case 1:
           var _ar__=_ar8_[2];if(_ar__){var loc$0=_ar__[1];return loc$0}break;
          case 2:
           var _ar$_=_ar8_[3];
           if(_ar$_)
            {var loc$1=_ar$_[1],elems=_ar8_[2];
             return fold_left
                     (function(s,a){return merge(s,location(a))},loc$1,elems)}
           break;
          case 3:
           var _asa_=_ar8_[3];
           if(_asa_)
            {var
              loc$2=_asa_[1],
              t2=_ar8_[2],
              t1=_ar8_[1],
              _asb_=merge(location(t1),loc$2);
             return merge(location(t2),_asb_)}
           break;
          case 4:var t$1=_ar8_[1],t$0=t$1;continue;
          case 5:
           var elems$0=_ar8_[1];
           return fold_left
                   (function(s,a){return merge(s,location(a))},
                    default$0,
                    elems$0);
          default:
           var _asc_=_ar8_[2];if(_asc_){var loc$3=_asc_[1];return loc$3}}
        return default$0}}
    function getLevel(param)
     {if(param){var n=param[1];return n}return current_level(0)}
    function p(t1,t2)
     {var t1$0=t1,t2$0=t2;
      for(;;)
       {if(t1$0 === t2$0)return 1;
        var _arN_=t1$0[1];
        switch(_arN_[0])
         {case 0:
           var _arO_=_arN_[3],_arQ_=_arN_[1],_arR_=t2$0[1],_arP_=_arN_[2];
           switch(_arR_[0])
            {case 0:
              var loc2=_arR_[3],level2=_arR_[2];
              if(_arO_)
               if(loc2)
                {var l1$1=_arO_[1];
                 if(caml_equal(l1$1,default$0))
                  var loc=loc2;
                 else
                  var l2$1=loc2[1],loc=caml_equal(l2$1,default$0)?_arO_:_arO_}
               else
                var loc=_arO_;
              else
               var loc=loc2;
              var
               _arS_=getLevel(level2),
               level=min(getLevel(_arP_),_arS_),
               n=caml_string_equal(_arQ_,_j2_)?gensym(0):_arQ_,
               t=[0,n,[0,level],loc];
              t1$0[1] = t;
              t2$0[1] = [4,t1$0];
              return 1;
             case 4:var switch$0=0;break;
             default:var switch$0=1}
           break;
          case 1:
           var _arW_=t2$0[1],_arV_=_arN_[1];
           switch(_arW_[0])
            {case 0:var switch$0=2;break;
             case 1:
              var id2=_arW_[1];
              if(caml_equal(_arV_,id2))return 1;
              var switch$0=4;
              break;
             case 4:var switch$0=0;break;
             default:var switch$0=4}
           break;
          case 2:
           var _arX_=_arN_[2],_arZ_=t2$0[1],_arY_=_arN_[1];
           switch(_arZ_[0])
            {case 0:var switch$0=2;break;
             case 2:
              var elems2=_arZ_[2],n2=_arZ_[1];
              if(caml_equal(_arY_,n2))
               {var _ar0_=length(elems2);
                if(length(_arX_) === _ar0_)
                 {var l1=_arX_,l2=elems2;
                  for(;;)
                   {if(l1)
                     {if(l2)
                       {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1],_arM_=p(a1,a2);
                        if(_arM_){var l1=l1$0,l2=l2$0;continue}
                        return _arM_}}
                    else
                     if(!l2)return 1;
                    return invalid_arg(_o_)}}}
              var switch$0=4;
              break;
             case 4:var switch$0=0;break;
             default:var switch$0=4}
           break;
          case 3:
           var _ar3_=t2$0[1],_ar1_=_arN_[2],_ar2_=_arN_[1];
           switch(_ar3_[0])
            {case 0:var switch$0=2;break;
             case 3:
              var b2=_ar3_[2],b1=_ar3_[1],_ar4_=p(_ar2_,b1);
              if(_ar4_){var t1$0=_ar1_,t2$0=b2;continue}
              return _ar4_;
             case 4:var switch$0=0;break;
             default:var switch$0=4}
           break;
          case 4:var t1$1=t2$0,t2$1=_arN_[1],switch$0=5;break;
          case 5:
           var _ar5_=t2$0[1];
           switch(_ar5_[0])
            {case 0:var switch$0=2;break;
             case 4:var switch$0=0;break;
             case 5:
              if(caml_call2(equal_vtype,_arN_,_ar5_))
               {t2$0[1] = [4,t1$0];return 1}
              var switch$0=3;
              break;
             default:var switch$0=3}
           break;
          default:
           var _ar7_=t2$0[1],_ar6_=_arN_[1];
           switch(_ar7_[0])
            {case 0:var switch$0=2;break;
             case 4:var switch$0=0;break;
             case 6:
              var n2$0=_ar7_[1];
              if(_ar6_ === n2$0)return 1;
              var switch$0=4;
              break;
             default:var switch$0=4}}
        switch(switch$0)
         {case 0:
           var _arU_=t2$0[1];
           if(4 === _arU_[0])
            var t1$1=t1$0,t2$1=_arU_[1],switch$1=4;
           else
            var switch$1=0;
           break;
          case 1:var switch$1=0;break;
          case 2:var switch$1=1;break;
          case 3:var switch$1=2;break;
          case 4:var switch$1=3;break;
          default:var switch$1=4}
        switch(switch$1)
         {case 0:
           if(0 === _arN_[0])
            var t$0=t2$0,tu=t1$0,switch$2=3;
           else
            var switch$2=0;
           break;
          case 1:var switch$2=0;break;
          case 2:var switch$2=1;break;
          case 3:var switch$2=2;break;
          default:var t1$0=t1$1,t2$0=t2$1;continue}
        switch(switch$2)
         {case 0:
           if(0 === t2$0[1][0])
            var t$0=t1$0,tu=t2$0,switch$3=2;
           else
            var switch$3=0;
           break;
          case 1:var switch$3=0;break;
          case 2:var switch$3=1;break;
          default:var switch$3=2}
        switch(switch$3)
         {case 0:
           if(5 === _arN_[0])
            var t$1=t2$0,tu$0=t1$0,alt=_arN_[1],switch$4=1;
           else
            var switch$4=0;
           break;
          case 1:var switch$4=0;break;
          default:tu[1] = [4,t$0];return 1}
        if(!switch$4)
         {var _arT_=t2$0[1];
          if(5 !== _arT_[0])return caml_call2(equal_vtype,_arN_,_arT_)?1:0;
          var t$1=t1$0,tu$0=t2$0,alt=_arT_[1]}
        var alt$0=alt;
        for(;;)
         {if(alt$0)
           {var alt_rest=alt$0[2],first_alt=alt$0[1];
            if(p(t$1,first_alt)){tu$0[1] = [4,first_alt];return 1}
            var alt$0=alt_rest;
            continue}
          return 0}}}
    function join$0(sep,id)
     {if(id)
       {var _arK_=id[2],_arL_=id[1];
        return _arK_?_a_(_arL_,_a_(sep,join$0(sep,_arK_))):_arL_}
      return _j3_}
    function _j4_(typ)
     {var typ$0=typ;
      for(;;)
       {var _arH_=typ$0[1];
        switch(_arH_[0])
         {case 1:var id=_arH_[1];return join$0(_j6_,id);
          case 2:
           var elems=_arH_[2],id$0=_arH_[1],_arI_=[0,_j8_,map(_j4_,elems)];
           return join$0(_j__,joinErrors([0,join$0(_j9_,id$0),_arI_],_j7_));
          case 3:
           var e2=_arH_[2],e1=_arH_[1],_arJ_=_a_(_j$_,_j4_(e2));
           return _a_(_j4_(e1),_arJ_);
          case 4:var typ$1=_arH_[1],typ$0=typ$1;continue;
          default:return failwith(_j5_)}}}
    function arrayTypeAndSize(typ)
     {var _arB_=typ[1];
      if(2 === _arB_[0])
       {var _arC_=_arB_[1];
        if(_arC_)
         if(!caml_string_notequal(_arC_[1],_kc_))
          if(!_arC_[2])
           {var _arD_=_arB_[2];
            if(_arD_)
             {var _arE_=_arD_[2];
              if(_arE_)
               {var _arG_=_arE_[1][1],_arF_=_arD_[1];
                if(6 === _arG_[0])
                 if(!_arE_[2]){var n=_arG_[1];return [0,_arF_,n]}}}}}
      return failwith(_kb_)}
    function isArray(typ)
     {var _arz_=unlink(typ)[1];
      if(2 === _arz_[0])
       {var _arA_=_arz_[1];
        if(_arA_)if(!caml_string_notequal(_arA_[1],_kd_))if(!_arA_[2])return 1}
      return 0}
    function isTuple(typ)
     {var _arx_=typ[1];
      if(2 === _arx_[0])
       {var _ary_=_arx_[1];
        if(_ary_)if(!caml_string_notequal(_ary_[1],_ke_))if(!_ary_[2])return 1}
      return 0}
    function isSimpleType(typ)
     {var _aru_=typ[1];
      if(1 === _aru_[0])
       {var _arv_=_aru_[1];
        if(_arv_)
         {var _arw_=_arv_[1];
          if(caml_string_notequal(_arw_,_kf_))
           {if(caml_string_notequal(_arw_,_kg_))
             {if(caml_string_notequal(_arw_,_kh_))
               {if(caml_string_notequal(_arw_,_ki_))
                 {if(caml_string_notequal(_arw_,_kj_))
                   {if(!caml_string_notequal(_arw_,_kk_))if(!_arv_[2])return 1}
                  else
                   if(!_arv_[2])return 1}
                else
                 if(!_arv_[2])return 1}
              else
               if(!_arv_[2])return 1}
            else
             if(!_arv_[2])return 1}
          else
           if(!_arv_[2])return 1}}
      return 0}
    function isRealType(typ)
     {var _ars_=typ[1];
      if(1 === _ars_[0])
       {var _art_=_ars_[1];
        if(_art_)if(!caml_string_notequal(_art_[1],_kl_))if(!_art_[2])return 1}
      return 0}
    function isSimpleOpType(typ)
     {if(typ){var t=typ[1];return isSimpleType(t)}return 1}
    function _km_(a,b){return [0,[3,a,b,0]]}
    var
     empty=[0,_kn_],
     type_type=[0,_ko_],
     typ=[0,_kp_],
     typ$0=[0,_kq_],
     ret$0=[0,_kr_],
     real_type=[0,_ks_],
     typ$1=[0,_kt_];
    function num_type(param){return [0,[5,[0,real_type,[0,ret$0,0]]]]}
    function real_real(param){return _km_(real_type,real_type)}
    function a_a(param){var a=[0,_ku_];return _km_(a,a)}
    function num_num(param){var num=num_type(0);return _km_(num,num)}
    function num_num_num(param)
     {var num=num_type(0);return _km_(num,_km_(num,num))}
    function num_num_bool(param)
     {var num=num_type(0);return _km_(num,_km_(num,typ$0))}
    function a_a_bool(param){var a=[0,_kv_];return _km_(a,_km_(a,typ$0))}
    function a_a_a_a(param){var a=[0,_kw_];return _km_(a,_km_(a,_km_(a,a)))}
    function bool_bool(param){return _km_(typ$0,typ$0)}
    function bool_bool_bool(param){return _km_(typ$0,_km_(typ$0,typ$0))}
    function num_int(param){return _km_(num_type(0),ret$0)}
    function num_real(param){return _km_(num_type(0),real_type)}
    function array_size(param)
     {var a=[0,_kx_],size=[0,_ky_],array_type=[0,[2,_kz_,[0,a,[0,size,0]],0]];
      return _km_(array_type,ret$0)}
    function array_get(param)
     {var a=[0,_kA_],size=[0,_kB_],array_type=[0,[2,_kC_,[0,a,[0,size,0]],0]];
      return _km_(array_type,_km_(ret$0,a))}
    function array_set(param)
     {var a=[0,_kD_],size=[0,_kE_],array_type=[0,[2,_kF_,[0,a,[0,size,0]],0]];
      return _km_(array_type,_km_(ret$0,_km_(a,typ)))}
    function array_make(param)
     {var a=[0,_kG_],size=[0,_kH_],array_type=[0,[2,_kI_,[0,a,[0,size,0]],0]];
      return _km_(ret$0,_km_(a,array_type))}
    function wrap_array(param)
     {var a=[0,_kJ_],size=[0,_kK_],array_type=[0,[2,_kL_,[0,a,[0,size,0]],0]];
      return _km_(array_type,array_type)}
    var
     compare$7=caml_compare,
     IdMap=_cL_([0,compare$7]),
     compare$8=caml_compare;
    _cL_([0,compare$8]);
    var
     compare$9=caml_compare,
     PathSet=_cA_([0,compare$9]),
     compare$10=caml_compare,
     IdSet=_cA_([0,compare$10]),
     pp_id_type=function _arr_(_arp_,_arq_){return _arr_.fun(_arp_,_arq_)},
     show_id_type=function _aro_(_arn_){return _aro_.fun(_arn_)};
    caml_update_dummy
     (pp_id_type,
      function(fmt,param)
       {var a1=param[2],a0=param[1];
        caml_call1(fprintf(fmt),_kM_);
        pp$0(fmt,a0);
        caml_call1(fprintf(fmt),_kN_);
        caml_call1(caml_call1(pp$1,fmt),a1);
        return caml_call1(fprintf(fmt),_kO_)});
    caml_update_dummy
     (show_id_type,
      function(x){return caml_call2(asprintf(_kP_),pp_id_type,x)});
    var
     equal_id_type=
      function _arm_(_ark_,_arl_){return _arm_.fun(_ark_,_arl_)};
    caml_update_dummy
     (equal_id_type,
      function(param,_ari_)
       {var
         rhs1=_ari_[2],
         rhs0=_ari_[1],
         lhs1=param[2],
         lhs0=param[1],
         _arj_=caml_call1(caml_call1(equal,lhs0),rhs0);
        return _arj_?caml_call1(caml_call1(equal$0,lhs1),rhs1):_arj_});
    var
     compare_id_type=
      function _arh_(_arf_,_arg_){return _arh_.fun(_arf_,_arg_)};
    caml_update_dummy
     (compare_id_type,
      function(param,_are_)
       {var
         rhs1=_are_[2],
         rhs0=_are_[1],
         lhs1=param[2],
         lhs0=param[1],
         x=caml_call1(caml_call1(compare$4,lhs0),rhs0);
        return 0 === x?compare$6(lhs1,rhs1):x});
    var IdTypeSet=_cA_([0,compare_id_type]),TypeSet=_cA_([0,compare$6]);
    _cL_([0,compare$6]);
    function pp_attr(fmt,param){return pp_print_string(fmt,_kQ_)}
    function pp_arg_type(fmt,param)
     {switch(param)
       {case 0:return pp_print_string(fmt,_kR_);
        case 1:return pp_print_string(fmt,_kS_);
        default:return pp_print_string(fmt,_kT_)}}
    function equal_arg_type(lhs,rhs)
     {switch(lhs)
       {case 0:if(0 === rhs)return 1;break;
        case 1:if(1 === rhs)return 1;break;
        default:if(2 <= rhs)return 1}
      return 0}
    function compare_arg_type(lhs,rhs)
     {switch(lhs)
       {case 0:if(0 === rhs)return 0;break;
        case 1:if(1 === rhs)return 0;break;
        default:if(2 <= rhs)return 0}
      function to_int(param)
       {switch(param){case 0:return 0;case 1:return 1;default:return 2}}
      var _ard_=to_int(rhs);
      return caml_int_compare(to_int(lhs),_ard_)}
    var
     pp_typed_id=function _arc_(_ara_,_arb_){return _arc_.fun(_ara_,_arb_)},
     show_typed_id=function _aq$_(_aq__){return _aq$_.fun(_aq__)};
    caml_update_dummy
     (pp_typed_id,
      function(fmt,param)
       {if(0 === param[0])
         {var a2=param[3],a1=param[2],a0=param[1];
          caml_call1(fprintf(fmt),_kU_);
          pp$0(fmt,a0);
          caml_call1(fprintf(fmt),_kV_);
          pp_arg_type(fmt,a1);
          caml_call1(fprintf(fmt),_kW_);
          pp_attr(fmt,a2);
          return caml_call1(fprintf(fmt),_kX_)}
        var a3=param[4],a2$0=param[3],a1$0=param[2],a0$0=param[1];
        caml_call1(fprintf(fmt),_kY_);
        pp$0(fmt,a0$0);
        caml_call1(fprintf(fmt),_kZ_);
        caml_call1(caml_call1(pp$1,fmt),a1$0);
        caml_call1(fprintf(fmt),_k0_);
        pp_arg_type(fmt,a2$0);
        caml_call1(fprintf(fmt),_k1_);
        pp_attr(fmt,a3);
        return caml_call1(fprintf(fmt),_k2_)});
    caml_update_dummy
     (show_typed_id,
      function(x){return caml_call2(asprintf(_k3_),pp_typed_id,x)});
    var
     equal_typed_id=
      function _aq9_(_aq7_,_aq8_){return _aq9_.fun(_aq7_,_aq8_)};
    caml_update_dummy
     (equal_typed_id,
      function(lhs,match)
       {if(0 === lhs[0])
         {var _aqX_=lhs[2],_aqY_=lhs[1];
          if(0 === match[0])
           {var
             rhs1=match[2],
             rhs0=match[1],
             _aqZ_=caml_call1(caml_call1(equal,_aqY_),rhs0),
             _aq0_=_aqZ_?equal_arg_type(_aqX_,rhs1):_aqZ_;
            return _aq0_?1:_aq0_}}
        else
         {var _aq1_=lhs[3],_aq2_=lhs[2],_aq3_=lhs[1];
          if(0 !== match[0])
           {var
             rhs2=match[3],
             rhs1$0=match[2],
             rhs0$0=match[1],
             _aq4_=caml_call1(caml_call1(equal,_aq3_),rhs0$0),
             _aq5_=_aq4_?caml_call1(caml_call1(equal$0,_aq2_),rhs1$0):_aq4_,
             _aq6_=_aq5_?equal_arg_type(_aq1_,rhs2):_aq5_;
            return _aq6_?1:_aq6_}}
        return 0});
    var
     compare_typed_id=
      function _aqW_(_aqU_,_aqV_){return _aqW_.fun(_aqU_,_aqV_)};
    caml_update_dummy
     (compare_typed_id,
      function(lhs,match)
       {if(0 === lhs[0])
         {var _aqO_=lhs[2],_aqP_=lhs[1];
          if(0 === match[0])
           {var
             rhs1=match[2],
             rhs0=match[1],
             x=caml_call1(caml_call1(compare$4,_aqP_),rhs0);
            if(0 === x)
             {var x$1=compare_arg_type(_aqO_,rhs1);return 0 === x$1?0:x$1}
            return x}}
        else
         {var _aqR_=lhs[3],_aqS_=lhs[2],_aqT_=lhs[1];
          if(0 !== match[0])
           {var
             rhs2=match[3],
             rhs1$0=match[2],
             rhs0$0=match[1],
             x$0=caml_call1(caml_call1(compare$4,_aqT_),rhs0$0);
            if(0 === x$0)
             {var x$2=compare$6(_aqS_,rhs1$0);
              if(0 === x$2)
               {var x$3=compare_arg_type(_aqR_,rhs2);return 0 === x$3?0:x$3}
              return x$2}
            return x$0}}
        function to_int(param){return 0 === param[0]?0:1}
        var _aqQ_=to_int(match);
        return caml_int_compare(to_int(lhs),_aqQ_)});
    var
     pp_lhs_exp=function _aqN_(_aqL_,_aqM_){return _aqN_.fun(_aqL_,_aqM_)},
     show_lhs_exp=function _aqK_(_aqJ_){return _aqK_.fun(_aqJ_)};
    caml_update_dummy
     (pp_lhs_exp,
      function(fmt,param)
       {switch(param[0])
         {case 0:
           var a0=param[1];
           caml_call1(fprintf(fmt),_k4_);
           pp_attr(fmt,a0);
           return caml_call1(fprintf(fmt),_k5_);
          case 1:
           var a2=param[3],a1=param[2],a0$0=param[1];
           caml_call1(fprintf(fmt),_k6_);
           pp$0(fmt,a0$0);
           caml_call1(fprintf(fmt),_k7_);
           if(a1)
            {var x=a1[1];
             pp_print_string(fmt,_k8_);
             caml_call1(caml_call1(pp$1,fmt),x);
             pp_print_string(fmt,_k9_)}
           else
            pp_print_string(fmt,_k__);
           caml_call1(fprintf(fmt),_k$_);
           pp_attr(fmt,a2);
           return caml_call1(fprintf(fmt),_la_);
          case 2:
           var a1$0=param[2],a0$1=param[1];
           caml_call1(fprintf(fmt),_lb_);
           caml_call1(fprintf(fmt),_lc_);
           var _aqI_=0;
           fold_left
            (function(sep,x)
              {if(sep)caml_call1(fprintf(fmt),_ld_);
               caml_call1(caml_call1(pp_lhs_exp,fmt),x);
               return 1},
             _aqI_,
             a0$1);
           caml_call1(fprintf(fmt),_le_);
           caml_call1(fprintf(fmt),_lf_);
           pp_attr(fmt,a1$0);
           return caml_call1(fprintf(fmt),_lg_);
          case 3:
           var a2$0=param[3],a1$1=param[2],a0$2=param[1];
           caml_call1(fprintf(fmt),_lh_);
           caml_call1(caml_call1(pp_lhs_exp,fmt),a0$2);
           caml_call1(fprintf(fmt),_li_);
           caml_call1(caml_call1(pp$1,fmt),a1$1);
           caml_call1(fprintf(fmt),_lj_);
           pp_attr(fmt,a2$0);
           return caml_call1(fprintf(fmt),_lk_);
          default:
           var a1$2=param[2],a0$3=param[1];
           caml_call1(fprintf(fmt),_ll_);
           caml_call1(caml_call1(pp_lhs_exp,fmt),a0$3);
           caml_call1(fprintf(fmt),_lm_);
           pp_attr(fmt,a1$2);
           return caml_call1(fprintf(fmt),_ln_)}});
    caml_update_dummy
     (show_lhs_exp,
      function(x){return caml_call2(asprintf(_lo_),pp_lhs_exp,x)});
    var
     equal_lhs_exp=
      function _aqH_(_aqF_,_aqG_){return _aqH_.fun(_aqF_,_aqG_)};
    caml_update_dummy
     (equal_lhs_exp,
      function(lhs,match)
       {switch(lhs[0])
         {case 0:if(0 === match[0])return 1;break;
          case 1:
           if(1 === match[0])
            {var
              rhs1=match[2],
              rhs0=match[1],
              lhs1=lhs[2],
              lhs0=lhs[1],
              _aqx_=caml_call1(caml_call1(equal,lhs0),rhs0);
             if(_aqx_)
              {if(lhs1)
                if(rhs1)
                 var
                  b=rhs1[1],
                  a=lhs1[1],
                  _aqy_=caml_call1(caml_call1(equal$0,a),b),
                  switch$0=1;
                else
                 var switch$0=0;
               else
                if(rhs1)var switch$0=0;else var _aqy_=1,switch$0=1;
               if(!switch$0)var _aqy_=0;
               var _aqz_=_aqy_}
             else
              var _aqz_=_aqx_;
             return _aqz_?1:_aqz_}
           break;
          case 2:
           if(2 === match[0])
            {var rhs0$0=match[1],lhs0$0=lhs[1],x=lhs0$0,y=rhs0$0;
             for(;;)
              {if(x)
                if(y)
                 {var
                   y$0=y[2],
                   b$0=y[1],
                   x$0=x[2],
                   a$0=x[1],
                   _aqA_=caml_call1(caml_call1(equal_lhs_exp,a$0),b$0);
                  if(_aqA_){var x=x$0,y=y$0;continue}
                  var _aqB_=_aqA_,switch$1=1}
                else
                 var switch$1=0;
               else
                if(y)var switch$1=0;else var _aqB_=1,switch$1=1;
               if(!switch$1)var _aqB_=0;
               return _aqB_?1:_aqB_}}
           break;
          case 3:
           if(3 === match[0])
            {var
              rhs1$0=match[2],
              rhs0$1=match[1],
              lhs1$0=lhs[2],
              lhs0$1=lhs[1],
              _aqC_=caml_call1(caml_call1(equal_lhs_exp,lhs0$1),rhs0$1),
              _aqD_=_aqC_?caml_call1(caml_call1(equal$0,lhs1$0),rhs1$0):_aqC_;
             return _aqD_?1:_aqD_}
           break;
          default:
           if(4 === match[0])
            {var
              rhs0$2=match[1],
              lhs0$2=lhs[1],
              _aqE_=caml_call1(caml_call1(equal_lhs_exp,lhs0$2),rhs0$2);
             return _aqE_?1:_aqE_}}
        return 0});
    var
     compare_lhs_exp=
      function _aqw_(_aqu_,_aqv_){return _aqw_.fun(_aqu_,_aqv_)};
    caml_update_dummy
     (compare_lhs_exp,
      function(lhs,match)
       {switch(lhs[0])
         {case 0:if(0 === match[0])return 0;break;
          case 1:
           if(1 === match[0])
            {var
              rhs1=match[2],
              rhs0=match[1],
              lhs1=lhs[2],
              lhs0=lhs[1],
              x=caml_call1(caml_call1(compare$4,lhs0),rhs0);
             if(0 === x)
              {if(lhs1)
                {var _aqt_=lhs1[1];
                 if(rhs1)var b=rhs1[1],x$0=compare$6(_aqt_,b);else var x$0=1}
               else
                var x$0=rhs1?-1:0;
               return 0 === x$0?0:x$0}
             return x}
           break;
          case 2:
           if(2 === match[0])
            {var rhs0$0=match[1],lhs0$0=lhs[1],x$1=lhs0$0,y=rhs0$0;
             for(;;)
              {if(x$1)
                if(y)
                 {var
                   y$0=y[2],
                   b$0=y[1],
                   x$2=x$1[2],
                   a=x$1[1],
                   x$3=caml_call1(caml_call1(compare_lhs_exp,a),b$0);
                  if(0 === x$3){var x$1=x$2,y=y$0;continue}
                  var x$4=x$3}
                else
                 var x$4=1;
               else
                var x$4=y?-1:0;
               return 0 === x$4?0:x$4}}
           break;
          case 3:
           if(3 === match[0])
            {var
              rhs1$0=match[2],
              rhs0$1=match[1],
              lhs1$0=lhs[2],
              lhs0$1=lhs[1],
              x$5=caml_call1(caml_call1(compare_lhs_exp,lhs0$1),rhs0$1);
             if(0 === x$5)
              {var x$7=compare$6(lhs1$0,rhs1$0);return 0 === x$7?0:x$7}
             return x$5}
           break;
          default:
           if(4 === match[0])
            {var
              rhs0$2=match[1],
              lhs0$2=lhs[1],
              x$6=caml_call1(caml_call1(compare_lhs_exp,lhs0$2),rhs0$2);
             return 0 === x$6?0:x$6}}
        function to_int(param)
         {switch(param[0])
           {case 0:return 0;
            case 1:return 1;
            case 2:return 2;
            case 3:return 3;
            default:return 4}}
        var _aqs_=to_int(match);
        return caml_int_compare(to_int(lhs),_aqs_)});
    var
     pp_exp=function _aqr_(_aqp_,_aqq_){return _aqr_.fun(_aqp_,_aqq_)},
     show_exp=function _aqo_(_aqn_){return _aqo_.fun(_aqn_)},
     pp_stmt=function _aqm_(_aqk_,_aql_){return _aqm_.fun(_aqk_,_aql_)},
     show_stmt=function _aqj_(_aqi_){return _aqj_.fun(_aqi_)},
     pp_val_decl=function _aqh_(_aqf_,_aqg_){return _aqh_.fun(_aqf_,_aqg_)},
     show_val_decl=function _aqe_(_aqd_){return _aqe_.fun(_aqd_)};
    caml_update_dummy
     (pp_exp,
      function(fmt,param)
       {if(typeof param === "number")
         return pp_print_string(fmt,_lp_);
        else
         switch(param[0])
          {case 0:
            var a0=param[1];
            caml_call1(fprintf(fmt),_lq_);
            pp_attr(fmt,a0);
            return caml_call1(fprintf(fmt),_lr_);
           case 1:
            var a1=param[2],a0$0=param[1];
            caml_call1(fprintf(fmt),_ls_);
            caml_call1(caml_call1(fprintf(fmt),_lt_),a0$0);
            caml_call1(fprintf(fmt),_lu_);
            pp_attr(fmt,a1);
            return caml_call1(fprintf(fmt),_lv_);
           case 2:
            var a1$0=param[2],a0$1=param[1];
            caml_call1(fprintf(fmt),_lw_);
            caml_call1(caml_call1(fprintf(fmt),_lx_),a0$1);
            caml_call1(fprintf(fmt),_ly_);
            pp_attr(fmt,a1$0);
            return caml_call1(fprintf(fmt),_lz_);
           case 3:
            var a1$1=param[2],a0$2=param[1];
            caml_call1(fprintf(fmt),_lA_);
            caml_call1(caml_call1(fprintf(fmt),_lB_),a0$2);
            caml_call1(fprintf(fmt),_lC_);
            pp_attr(fmt,a1$1);
            return caml_call1(fprintf(fmt),_lD_);
           case 4:
            var a1$2=param[2],a0$3=param[1];
            caml_call1(fprintf(fmt),_lE_);
            caml_call1(caml_call1(fprintf(fmt),_lF_),a0$3);
            caml_call1(fprintf(fmt),_lG_);
            pp_attr(fmt,a1$2);
            return caml_call1(fprintf(fmt),_lH_);
           case 5:
            var a1$3=param[2],a0$4=param[1];
            caml_call1(fprintf(fmt),_lI_);
            pp$0(fmt,a0$4);
            caml_call1(fprintf(fmt),_lJ_);
            pp_attr(fmt,a1$3);
            return caml_call1(fprintf(fmt),_lK_);
           case 6:
            var a1$4=param[2],a0$5=param[1];
            caml_call1(fprintf(fmt),_lL_);
            caml_call1(fprintf(fmt),_lM_);
            var _ap$_=0;
            fold_left$0
             (function(sep,x)
               {if(sep)caml_call1(fprintf(fmt),_lN_);
                caml_call1(caml_call1(pp_exp,fmt),x);
                return 1},
              _ap$_,
              a0$5);
            caml_call1(fprintf(fmt),_lO_);
            caml_call1(fprintf(fmt),_lP_);
            pp_attr(fmt,a1$4);
            return caml_call1(fprintf(fmt),_lQ_);
           case 7:
            var a2=param[3],a1$5=param[2],a0$6=param[1];
            caml_call1(fprintf(fmt),_lR_);
            caml_call1(caml_call1(fprintf(fmt),_lS_),a0$6);
            caml_call1(fprintf(fmt),_lT_);
            caml_call1(caml_call1(pp_exp,fmt),a1$5);
            caml_call1(fprintf(fmt),_lU_);
            pp_attr(fmt,a2);
            return caml_call1(fprintf(fmt),_lV_);
           case 8:
            var a2$0=param[3],a1$6=param[2],a0$7=param[1];
            caml_call1(fprintf(fmt),_lW_);
            caml_call1(caml_call1(fprintf(fmt),_lX_),a0$7);
            caml_call1(fprintf(fmt),_lY_);
            caml_call1(fprintf(fmt),_lZ_);
            var _aqa_=0;
            fold_left
             (function(sep,x)
               {if(sep)caml_call1(fprintf(fmt),_l0_);
                caml_call1(caml_call1(pp_exp,fmt),x);
                return 1},
              _aqa_,
              a1$6);
            caml_call1(fprintf(fmt),_l1_);
            caml_call1(fprintf(fmt),_l2_);
            pp_attr(fmt,a2$0);
            return caml_call1(fprintf(fmt),_l3_);
           case 9:
            var a3=param[4],a2$1=param[3],a1$7=param[2],a0$8=param[1];
            caml_call1(fprintf(fmt),_l4_);
            if(a0$8)
             {var x=a0$8[1];
              pp_print_string(fmt,_l5_);
              pp$0(fmt,x);
              pp_print_string(fmt,_l6_)}
            else
             pp_print_string(fmt,_l7_);
            caml_call1(fprintf(fmt),_l8_);
            pp$0(fmt,a1$7);
            caml_call1(fprintf(fmt),_l9_);
            caml_call1(fprintf(fmt),_l__);
            var _aqb_=0;
            fold_left
             (function(sep,x)
               {if(sep)caml_call1(fprintf(fmt),_l$_);
                caml_call1(caml_call1(pp_exp,fmt),x);
                return 1},
              _aqb_,
              a2$1);
            caml_call1(fprintf(fmt),_ma_);
            caml_call1(fprintf(fmt),_mb_);
            pp_attr(fmt,a3);
            return caml_call1(fprintf(fmt),_mc_);
           case 10:
            var a3$0=param[4],a2$2=param[3],a1$8=param[2],a0$9=param[1];
            caml_call1(fprintf(fmt),_md_);
            caml_call1(caml_call1(pp_exp,fmt),a0$9);
            caml_call1(fprintf(fmt),_me_);
            caml_call1(caml_call1(pp_exp,fmt),a1$8);
            caml_call1(fprintf(fmt),_mf_);
            caml_call1(caml_call1(pp_exp,fmt),a2$2);
            caml_call1(fprintf(fmt),_mg_);
            pp_attr(fmt,a3$0);
            return caml_call1(fprintf(fmt),_mh_);
           case 11:
            var a1$9=param[2],a0$10=param[1];
            caml_call1(fprintf(fmt),_mi_);
            caml_call1(caml_call1(pp_exp,fmt),a0$10);
            caml_call1(fprintf(fmt),_mj_);
            pp_attr(fmt,a1$9);
            return caml_call1(fprintf(fmt),_mk_);
           case 12:
            var a1$10=param[2],a0$11=param[1];
            caml_call1(fprintf(fmt),_ml_);
            caml_call1(fprintf(fmt),_mm_);
            var _aqc_=0;
            fold_left
             (function(sep,x)
               {if(sep)caml_call1(fprintf(fmt),_mn_);
                caml_call1(caml_call1(pp_exp,fmt),x);
                return 1},
              _aqc_,
              a0$11);
            caml_call1(fprintf(fmt),_mo_);
            caml_call1(fprintf(fmt),_mp_);
            pp_attr(fmt,a1$10);
            return caml_call1(fprintf(fmt),_mq_);
           default:
            var a2$3=param[3],a1$11=param[2],a0$12=param[1];
            caml_call1(fprintf(fmt),_mr_);
            if(a0$12)
             {var x$0=a0$12[1];
              pp_print_string(fmt,_ms_);
              pp$0(fmt,x$0);
              pp_print_string(fmt,_mt_)}
            else
             pp_print_string(fmt,_mu_);
            caml_call1(fprintf(fmt),_mv_);
            caml_call1(caml_call1(pp_stmt,fmt),a1$11);
            caml_call1(fprintf(fmt),_mw_);
            pp_attr(fmt,a2$3);
            return caml_call1(fprintf(fmt),_mx_)}});
    caml_update_dummy
     (show_exp,function(x){return caml_call2(asprintf(_my_),pp_exp,x)});
    caml_update_dummy
     (pp_stmt,
      function(fmt,param)
       {if(typeof param === "number")
         return pp_print_string(fmt,_mz_);
        else
         switch(param[0])
          {case 0:
            var a2=param[3],a1=param[2],a0=param[1];
            caml_call1(fprintf(fmt),_mA_);
            caml_call1(caml_call1(pp_lhs_exp,fmt),a0);
            caml_call1(fprintf(fmt),_mB_);
            if(a1)
             {var x=a1[1];
              pp_print_string(fmt,_mC_);
              caml_call1(caml_call1(pp_exp,fmt),x);
              pp_print_string(fmt,_mD_)}
            else
             pp_print_string(fmt,_mE_);
            caml_call1(fprintf(fmt),_mF_);
            pp_attr(fmt,a2);
            return caml_call1(fprintf(fmt),_mG_);
           case 1:
            var a2$0=param[3],a1$0=param[2],a0$0=param[1];
            caml_call1(fprintf(fmt),_mH_);
            caml_call1(caml_call1(pp_lhs_exp,fmt),a0$0);
            caml_call1(fprintf(fmt),_mI_);
            if(a1$0)
             {var x$0=a1$0[1];
              pp_print_string(fmt,_mJ_);
              caml_call1(caml_call1(pp_exp,fmt),x$0);
              pp_print_string(fmt,_mK_)}
            else
             pp_print_string(fmt,_mL_);
            caml_call1(fprintf(fmt),_mM_);
            pp_attr(fmt,a2$0);
            return caml_call1(fprintf(fmt),_mN_);
           case 2:
            var a2$1=param[3],a1$1=param[2],a0$1=param[1];
            caml_call1(fprintf(fmt),_mO_);
            caml_call1(caml_call1(pp_exp,fmt),a0$1);
            caml_call1(fprintf(fmt),_mP_);
            caml_call1(caml_call1(pp_stmt,fmt),a1$1);
            caml_call1(fprintf(fmt),_mQ_);
            pp_attr(fmt,a2$1);
            return caml_call1(fprintf(fmt),_mR_);
           case 3:
            var a1$2=param[2],a0$2=param[1];
            caml_call1(fprintf(fmt),_mS_);
            caml_call1(caml_call1(pp_exp,fmt),a0$2);
            caml_call1(fprintf(fmt),_mT_);
            pp_attr(fmt,a1$2);
            return caml_call1(fprintf(fmt),_mU_);
           case 4:
            var a3=param[4],a2$2=param[3],a1$3=param[2],a0$3=param[1];
            caml_call1(fprintf(fmt),_mV_);
            caml_call1(caml_call1(pp_exp,fmt),a0$3);
            caml_call1(fprintf(fmt),_mW_);
            caml_call1(caml_call1(pp_stmt,fmt),a1$3);
            caml_call1(fprintf(fmt),_mX_);
            if(a2$2)
             {var x$1=a2$2[1];
              pp_print_string(fmt,_mY_);
              caml_call1(caml_call1(pp_stmt,fmt),x$1);
              pp_print_string(fmt,_mZ_)}
            else
             pp_print_string(fmt,_m0_);
            caml_call1(fprintf(fmt),_m1_);
            pp_attr(fmt,a3);
            return caml_call1(fprintf(fmt),_m2_);
           case 5:
            var
             a4=param[5],
             a3$0=param[4],
             a2$3=param[3],
             a1$4=param[2],
             a0$4=param[1];
            caml_call1(fprintf(fmt),_m3_);
            pp$0(fmt,a0$4);
            caml_call1(fprintf(fmt),_m4_);
            caml_call1(fprintf(fmt),_m5_);
            var _ap7_=0;
            fold_left
             (function(sep,x)
               {if(sep)caml_call1(fprintf(fmt),_m6_);
                caml_call1(caml_call1(pp_typed_id,fmt),x);
                return 1},
              _ap7_,
              a1$4);
            caml_call1(fprintf(fmt),_m7_);
            caml_call1(fprintf(fmt),_m8_);
            caml_call1(caml_call1(pp_stmt,fmt),a2$3);
            caml_call1(fprintf(fmt),_m9_);
            if(a3$0)
             {var x$2=a3$0[1];
              pp_print_string(fmt,_m__);
              caml_call1(caml_call1(pp$1,fmt),x$2);
              pp_print_string(fmt,_m$_)}
            else
             pp_print_string(fmt,_na_);
            caml_call1(fprintf(fmt),_nb_);
            pp_attr(fmt,a4);
            return caml_call1(fprintf(fmt),_nc_);
           case 6:
            var
             a4$0=param[5],
             a3$1=param[4],
             a2$4=param[3],
             a1$5=param[2],
             a0$5=param[1];
            caml_call1(fprintf(fmt),_nd_);
            pp$0(fmt,a0$5);
            caml_call1(fprintf(fmt),_ne_);
            caml_call1(fprintf(fmt),_nf_);
            var _ap8_=0;
            fold_left
             (function(sep,x)
               {if(sep)caml_call1(fprintf(fmt),_ng_);
                caml_call1(caml_call1(pp_typed_id,fmt),x);
                return 1},
              _ap8_,
              a1$5);
            caml_call1(fprintf(fmt),_nh_);
            caml_call1(fprintf(fmt),_ni_);
            caml_call1(caml_call1(pp$1,fmt),a2$4);
            caml_call1(fprintf(fmt),_nj_);
            if(a3$1)
             {var x$3=a3$1[1];
              pp_print_string(fmt,_nk_);
              caml_call1(caml_call1(fprintf(fmt),_nl_),x$3);
              pp_print_string(fmt,_nm_)}
            else
             pp_print_string(fmt,_nn_);
            caml_call1(fprintf(fmt),_no_);
            pp_attr(fmt,a4$0);
            return caml_call1(fprintf(fmt),_np_);
           case 7:
            var a2$5=param[3],a1$6=param[2],a0$6=param[1];
            caml_call1(fprintf(fmt),_nq_);
            caml_call1(caml_call1(pp_lhs_exp,fmt),a0$6);
            caml_call1(fprintf(fmt),_nr_);
            caml_call1(caml_call1(pp_exp,fmt),a1$6);
            caml_call1(fprintf(fmt),_ns_);
            pp_attr(fmt,a2$5);
            return caml_call1(fprintf(fmt),_nt_);
           case 8:
            var a2$6=param[3],a1$7=param[2],a0$7=param[1];
            caml_call1(fprintf(fmt),_nu_);
            if(a0$7)
             {var x$4=a0$7[1];
              pp_print_string(fmt,_nv_);
              pp$0(fmt,x$4);
              pp_print_string(fmt,_nw_)}
            else
             pp_print_string(fmt,_nx_);
            caml_call1(fprintf(fmt),_ny_);
            caml_call1(fprintf(fmt),_nz_);
            var _ap9_=0;
            fold_left
             (function(sep,x)
               {if(sep)caml_call1(fprintf(fmt),_nA_);
                caml_call1(caml_call1(pp_stmt,fmt),x);
                return 1},
              _ap9_,
              a1$7);
            caml_call1(fprintf(fmt),_nB_);
            caml_call1(fprintf(fmt),_nC_);
            pp_attr(fmt,a2$6);
            return caml_call1(fprintf(fmt),_nD_);
           case 9:
            var a2$7=param[3],a1$8=param[2],a0$8=param[1];
            caml_call1(fprintf(fmt),_nE_);
            caml_call1(caml_call1(pp$1,fmt),a0$8);
            caml_call1(fprintf(fmt),_nF_);
            caml_call1(fprintf(fmt),_nG_);
            var _ap__=0;
            fold_left
             (function(sep,x)
               {if(sep)caml_call1(fprintf(fmt),_nH_);
                caml_call1(caml_call1(pp_val_decl,fmt),x);
                return 1},
              _ap__,
              a1$8);
            caml_call1(fprintf(fmt),_nI_);
            caml_call1(fprintf(fmt),_nJ_);
            pp_attr(fmt,a2$7);
            return caml_call1(fprintf(fmt),_nK_);
           default:
            var a2$8=param[3],a1$9=param[2],a0$9=param[1];
            caml_call1(fprintf(fmt),_nL_);
            caml_call1(caml_call1(pp$1,fmt),a0$9);
            caml_call1(fprintf(fmt),_nM_);
            caml_call1(caml_call1(pp$1,fmt),a1$9);
            caml_call1(fprintf(fmt),_nN_);
            pp_attr(fmt,a2$8);
            return caml_call1(fprintf(fmt),_nO_)}});
    caml_update_dummy
     (show_stmt,function(x){return caml_call2(asprintf(_nP_),pp_stmt,x)});
    caml_update_dummy
     (pp_val_decl,
      function(fmt,param)
       {var a2=param[3],a1=param[2],a0=param[1];
        caml_call1(fprintf(fmt),_nQ_);
        pp$0(fmt,a0);
        caml_call1(fprintf(fmt),_nR_);
        caml_call1(caml_call1(pp$1,fmt),a1);
        caml_call1(fprintf(fmt),_nS_);
        pp_attr(fmt,a2);
        return caml_call1(fprintf(fmt),_nT_)});
    caml_update_dummy
     (show_val_decl,
      function(x){return caml_call2(asprintf(_nU_),pp_val_decl,x)});
    var
     equal_exp=function _ap6_(_ap4_,_ap5_){return _ap6_.fun(_ap4_,_ap5_)},
     equal_stmt=function _ap3_(_ap1_,_ap2_){return _ap3_.fun(_ap1_,_ap2_)},
     equal_val_decl=function _ap0_(_apY_,_apZ_){return _ap0_.fun(_apY_,_apZ_)};
    caml_update_dummy
     (equal_exp,
      function(lhs,match)
       {if(typeof lhs === "number")
         {if(typeof match === "number")return 1}
        else
         switch(lhs[0])
          {case 0:
            if(typeof match !== "number" && 0 === match[0])return 1;break;
           case 1:
            if(typeof match !== "number" && 1 === match[0])
             {var rhs0=match[1],lhs0=lhs[1],_apu_=lhs0 === rhs0?1:0;
              return _apu_?1:_apu_}
            break;
           case 2:
            if(typeof match !== "number" && 2 === match[0])
             {var rhs0$0=match[1],lhs0$0=lhs[1],_apv_=lhs0$0 === rhs0$0?1:0;
              return _apv_?1:_apv_}
            break;
           case 3:
            if(typeof match !== "number" && 3 === match[0])
             {var rhs0$1=match[1],lhs0$1=lhs[1],_apw_=lhs0$1 == rhs0$1?1:0;
              return _apw_?1:_apw_}
            break;
           case 4:
            if(typeof match !== "number" && 4 === match[0])
             {var
               rhs0$2=match[1],
               lhs0$2=lhs[1],
               _apx_=caml_string_equal(lhs0$2,rhs0$2);
              return _apx_?1:_apx_}
            break;
           case 5:
            if(typeof match !== "number" && 5 === match[0])
             {var
               rhs0$3=match[1],
               lhs0$3=lhs[1],
               _apy_=caml_call1(caml_call1(equal,lhs0$3),rhs0$3);
              return _apy_?1:_apy_}
            break;
           case 6:
            if(typeof match !== "number" && 6 === match[0])
             {var
               rhs0$4=match[1],
               lhs0$4=lhs[1],
               _apD_=lhs0$4.length - 1 === rhs0$4.length - 1?1:0;
              if(_apD_)
               {var i=0;
                for(;;)
                 {var _apz_=i === lhs0$4.length - 1?1:0;
                  if(_apz_)
                   var _apA_=_apz_;
                  else
                   {var
                     _apB_=caml_check_bound(rhs0$4,i)[i + 1],
                     x=caml_check_bound(lhs0$4,i)[i + 1],
                     _apC_=caml_call1(caml_call1(equal_exp,x),_apB_);
                    if(_apC_){var i$0=i + 1 | 0,i=i$0;continue}
                    var _apA_=_apC_}
                  var _apE_=_apA_;
                  break}}
              else
               var _apE_=_apD_;
              return _apE_?1:_apE_}
            break;
           case 7:
            if(typeof match !== "number" && 7 === match[0])
             {var
               rhs1=match[2],
               rhs0$5=match[1],
               lhs1=lhs[2],
               lhs0$5=lhs[1],
               _apF_=caml_string_equal(lhs0$5,rhs0$5),
               _apG_=_apF_?caml_call1(caml_call1(equal_exp,lhs1),rhs1):_apF_;
              return _apG_?1:_apG_}
            break;
           case 8:
            if(typeof match !== "number" && 8 === match[0])
             {var
               rhs1$0=match[2],
               rhs0$6=match[1],
               lhs1$0=lhs[2],
               lhs0$6=lhs[1],
               _apH_=caml_string_equal(lhs0$6,rhs0$6);
              if(_apH_)
               {var x$0=lhs1$0,y=rhs1$0;
                for(;;)
                 {if(x$0)
                   if(y)
                    {var
                      y$0=y[2],
                      b=y[1],
                      x$1=x$0[2],
                      a=x$0[1],
                      _apI_=caml_call1(caml_call1(equal_exp,a),b);
                     if(_apI_){var x$0=x$1,y=y$0;continue}
                     var _apJ_=_apI_,switch$0=1}
                   else
                    var switch$0=0;
                  else
                   if(y)var switch$0=0;else var _apJ_=1,switch$0=1;
                  if(!switch$0)var _apJ_=0;
                  var _apK_=_apJ_;
                  break}}
              else
               var _apK_=_apH_;
              return _apK_?1:_apK_}
            break;
           case 9:
            if(typeof match !== "number" && 9 === match[0])
             {var
               rhs2=match[3],
               rhs1$1=match[2],
               rhs0$7=match[1],
               lhs2=lhs[3],
               lhs1$1=lhs[2],
               lhs0$7=lhs[1];
              if(lhs0$7)
               if(rhs0$7)
                var
                 b$0=rhs0$7[1],
                 a$0=lhs0$7[1],
                 _apL_=caml_call1(caml_call1(equal,a$0),b$0),
                 switch$1=1;
               else
                var switch$1=0;
              else
               if(rhs0$7)var switch$1=0;else var _apL_=1,switch$1=1;
              if(!switch$1)var _apL_=0;
              var
               _apM_=
                _apL_?caml_call1(caml_call1(equal,lhs1$1),rhs1$1):_apL_;
              if(_apM_)
               {var x$2=lhs2,y$1=rhs2;
                for(;;)
                 {if(x$2)
                   if(y$1)
                    {var
                      y$2=y$1[2],
                      b$1=y$1[1],
                      x$3=x$2[2],
                      a$1=x$2[1],
                      _apN_=caml_call1(caml_call1(equal_exp,a$1),b$1);
                     if(_apN_){var x$2=x$3,y$1=y$2;continue}
                     var _apO_=_apN_,switch$2=1}
                   else
                    var switch$2=0;
                  else
                   if(y$1)var switch$2=0;else var _apO_=1,switch$2=1;
                  if(!switch$2)var _apO_=0;
                  var _apP_=_apO_;
                  break}}
              else
               var _apP_=_apM_;
              return _apP_?1:_apP_}
            break;
           case 10:
            if(typeof match !== "number" && 10 === match[0])
             {var
               rhs2$0=match[3],
               rhs1$2=match[2],
               rhs0$8=match[1],
               lhs2$0=lhs[3],
               lhs1$2=lhs[2],
               lhs0$8=lhs[1],
               _apQ_=caml_call1(caml_call1(equal_exp,lhs0$8),rhs0$8),
               _apR_=
                _apQ_?caml_call1(caml_call1(equal_exp,lhs1$2),rhs1$2):_apQ_,
               _apS_=
                _apR_?caml_call1(caml_call1(equal_exp,lhs2$0),rhs2$0):_apR_;
              return _apS_?1:_apS_}
            break;
           case 11:
            if(typeof match !== "number" && 11 === match[0])
             {var
               rhs0$9=match[1],
               lhs0$9=lhs[1],
               _apT_=caml_call1(caml_call1(equal_exp,lhs0$9),rhs0$9);
              return _apT_?1:_apT_}
            break;
           case 12:
            if(typeof match !== "number" && 12 === match[0])
             {var rhs0$10=match[1],lhs0$10=lhs[1],x$4=lhs0$10,y$3=rhs0$10;
              for(;;)
               {if(x$4)
                 if(y$3)
                  {var
                    y$4=y$3[2],
                    b$2=y$3[1],
                    x$5=x$4[2],
                    a$2=x$4[1],
                    _apU_=caml_call1(caml_call1(equal_exp,a$2),b$2);
                   if(_apU_){var x$4=x$5,y$3=y$4;continue}
                   var _apV_=_apU_,switch$3=1}
                 else
                  var switch$3=0;
                else
                 if(y$3)var switch$3=0;else var _apV_=1,switch$3=1;
                if(!switch$3)var _apV_=0;
                return _apV_?1:_apV_}}
            break;
           default:
            if(typeof match !== "number" && 13 === match[0])
             {var
               rhs1$3=match[2],
               rhs0$11=match[1],
               lhs1$3=lhs[2],
               lhs0$11=lhs[1];
              if(lhs0$11)
               if(rhs0$11)
                var
                 b$3=rhs0$11[1],
                 a$3=lhs0$11[1],
                 _apW_=caml_call1(caml_call1(equal,a$3),b$3),
                 switch$4=1;
               else
                var switch$4=0;
              else
               if(rhs0$11)var switch$4=0;else var _apW_=1,switch$4=1;
              if(!switch$4)var _apW_=0;
              var
               _apX_=
                _apW_?caml_call1(caml_call1(equal_stmt,lhs1$3),rhs1$3):_apW_;
              return _apX_?1:_apX_}}
        return 0});
    caml_update_dummy
     (equal_stmt,
      function(lhs,match)
       {if(typeof lhs === "number")
         {if(typeof match === "number")return 1}
        else
         switch(lhs[0])
          {case 0:
            if(typeof match !== "number" && 0 === match[0])
             {var
               rhs1=match[2],
               rhs0=match[1],
               lhs1=lhs[2],
               lhs0=lhs[1],
               _aoT_=caml_call1(caml_call1(equal_lhs_exp,lhs0),rhs0);
              if(_aoT_)
               {if(lhs1)
                 if(rhs1)
                  var
                   b=rhs1[1],
                   a=lhs1[1],
                   _aoU_=caml_call1(caml_call1(equal_exp,a),b),
                   switch$0=1;
                 else
                  var switch$0=0;
                else
                 if(rhs1)var switch$0=0;else var _aoU_=1,switch$0=1;
                if(!switch$0)var _aoU_=0;
                var _aoV_=_aoU_}
              else
               var _aoV_=_aoT_;
              return _aoV_?1:_aoV_}
            break;
           case 1:
            if(typeof match !== "number" && 1 === match[0])
             {var
               rhs1$0=match[2],
               rhs0$0=match[1],
               lhs1$0=lhs[2],
               lhs0$0=lhs[1],
               _aoW_=caml_call1(caml_call1(equal_lhs_exp,lhs0$0),rhs0$0);
              if(_aoW_)
               {if(lhs1$0)
                 if(rhs1$0)
                  var
                   b$0=rhs1$0[1],
                   a$0=lhs1$0[1],
                   _aoX_=caml_call1(caml_call1(equal_exp,a$0),b$0),
                   switch$1=1;
                 else
                  var switch$1=0;
                else
                 if(rhs1$0)var switch$1=0;else var _aoX_=1,switch$1=1;
                if(!switch$1)var _aoX_=0;
                var _aoY_=_aoX_}
              else
               var _aoY_=_aoW_;
              return _aoY_?1:_aoY_}
            break;
           case 2:
            if(typeof match !== "number" && 2 === match[0])
             {var
               rhs1$1=match[2],
               rhs0$1=match[1],
               lhs1$1=lhs[2],
               lhs0$1=lhs[1],
               _aoZ_=caml_call1(caml_call1(equal_exp,lhs0$1),rhs0$1),
               _ao0_=
                _aoZ_?caml_call1(caml_call1(equal_stmt,lhs1$1),rhs1$1):_aoZ_;
              return _ao0_?1:_ao0_}
            break;
           case 3:
            if(typeof match !== "number" && 3 === match[0])
             {var
               rhs0$2=match[1],
               lhs0$2=lhs[1],
               _ao1_=caml_call1(caml_call1(equal_exp,lhs0$2),rhs0$2);
              return _ao1_?1:_ao1_}
            break;
           case 4:
            if(typeof match !== "number" && 4 === match[0])
             {var
               rhs2=match[3],
               rhs1$2=match[2],
               rhs0$3=match[1],
               lhs2=lhs[3],
               lhs1$2=lhs[2],
               lhs0$3=lhs[1],
               _ao2_=caml_call1(caml_call1(equal_exp,lhs0$3),rhs0$3),
               _ao3_=
                _ao2_?caml_call1(caml_call1(equal_stmt,lhs1$2),rhs1$2):_ao2_;
              if(_ao3_)
               {if(lhs2)
                 if(rhs2)
                  var
                   b$1=rhs2[1],
                   a$1=lhs2[1],
                   _ao4_=caml_call1(caml_call1(equal_stmt,a$1),b$1),
                   switch$2=1;
                 else
                  var switch$2=0;
                else
                 if(rhs2)var switch$2=0;else var _ao4_=1,switch$2=1;
                if(!switch$2)var _ao4_=0;
                var _ao5_=_ao4_}
              else
               var _ao5_=_ao3_;
              return _ao5_?1:_ao5_}
            break;
           case 5:
            if(typeof match !== "number" && 5 === match[0])
             {var
               rhs3=match[4],
               rhs2$0=match[3],
               rhs1$3=match[2],
               rhs0$4=match[1],
               lhs3=lhs[4],
               lhs2$0=lhs[3],
               lhs1$3=lhs[2],
               lhs0$4=lhs[1],
               _ao6_=caml_call1(caml_call1(equal,lhs0$4),rhs0$4);
              if(_ao6_)
               {var x=lhs1$3,y=rhs1$3;
                for(;;)
                 {if(x)
                   if(y)
                    {var
                      y$0=y[2],
                      b$2=y[1],
                      x$0=x[2],
                      a$2=x[1],
                      _ao7_=caml_call1(caml_call1(equal_typed_id,a$2),b$2);
                     if(_ao7_){var x=x$0,y=y$0;continue}
                     var _ao8_=_ao7_,switch$3=1}
                   else
                    var switch$3=0;
                  else
                   if(y)var switch$3=0;else var _ao8_=1,switch$3=1;
                  if(!switch$3)var _ao8_=0;
                  var _ao9_=_ao8_;
                  break}}
              else
               var _ao9_=_ao6_;
              var
               _ao__=
                _ao9_?caml_call1(caml_call1(equal_stmt,lhs2$0),rhs2$0):_ao9_;
              if(_ao__)
               {if(lhs3)
                 if(rhs3)
                  var
                   b$3=rhs3[1],
                   a$3=lhs3[1],
                   _ao$_=caml_call1(caml_call1(equal$0,a$3),b$3),
                   switch$4=1;
                 else
                  var switch$4=0;
                else
                 if(rhs3)var switch$4=0;else var _ao$_=1,switch$4=1;
                if(!switch$4)var _ao$_=0;
                var _apa_=_ao$_}
              else
               var _apa_=_ao__;
              return _apa_?1:_apa_}
            break;
           case 6:
            if(typeof match !== "number" && 6 === match[0])
             {var
               rhs3$0=match[4],
               rhs2$1=match[3],
               rhs1$4=match[2],
               rhs0$5=match[1],
               lhs3$0=lhs[4],
               lhs2$1=lhs[3],
               lhs1$4=lhs[2],
               lhs0$5=lhs[1],
               _apb_=caml_call1(caml_call1(equal,lhs0$5),rhs0$5);
              if(_apb_)
               {var x$1=lhs1$4,y$1=rhs1$4;
                for(;;)
                 {if(x$1)
                   if(y$1)
                    {var
                      y$2=y$1[2],
                      b$4=y$1[1],
                      x$2=x$1[2],
                      a$4=x$1[1],
                      _apc_=caml_call1(caml_call1(equal_typed_id,a$4),b$4);
                     if(_apc_){var x$1=x$2,y$1=y$2;continue}
                     var _apd_=_apc_,switch$5=1}
                   else
                    var switch$5=0;
                  else
                   if(y$1)var switch$5=0;else var _apd_=1,switch$5=1;
                  if(!switch$5)var _apd_=0;
                  var _ape_=_apd_;
                  break}}
              else
               var _ape_=_apb_;
              var
               _apf_=
                _ape_?caml_call1(caml_call1(equal$0,lhs2$1),rhs2$1):_ape_;
              if(_apf_)
               {if(lhs3$0)
                 if(rhs3$0)
                  var
                   b$5=rhs3$0[1],
                   a$5=lhs3$0[1],
                   _apg_=caml_string_equal(a$5,b$5),
                   switch$6=1;
                 else
                  var switch$6=0;
                else
                 if(rhs3$0)var switch$6=0;else var _apg_=1,switch$6=1;
                if(!switch$6)var _apg_=0;
                var _aph_=_apg_}
              else
               var _aph_=_apf_;
              return _aph_?1:_aph_}
            break;
           case 7:
            if(typeof match !== "number" && 7 === match[0])
             {var
               rhs1$5=match[2],
               rhs0$6=match[1],
               lhs1$5=lhs[2],
               lhs0$6=lhs[1],
               _api_=caml_call1(caml_call1(equal_lhs_exp,lhs0$6),rhs0$6),
               _apj_=
                _api_?caml_call1(caml_call1(equal_exp,lhs1$5),rhs1$5):_api_;
              return _apj_?1:_apj_}
            break;
           case 8:
            if(typeof match !== "number" && 8 === match[0])
             {var rhs1$6=match[2],rhs0$7=match[1],lhs1$6=lhs[2],lhs0$7=lhs[1];
              if(lhs0$7)
               if(rhs0$7)
                var
                 b$6=rhs0$7[1],
                 a$6=lhs0$7[1],
                 _apk_=caml_call1(caml_call1(equal,a$6),b$6),
                 switch$7=1;
               else
                var switch$7=0;
              else
               if(rhs0$7)var switch$7=0;else var _apk_=1,switch$7=1;
              if(!switch$7)var _apk_=0;
              if(_apk_)
               {var x$3=lhs1$6,y$3=rhs1$6;
                for(;;)
                 {if(x$3)
                   if(y$3)
                    {var
                      y$4=y$3[2],
                      b$7=y$3[1],
                      x$4=x$3[2],
                      a$7=x$3[1],
                      _apl_=caml_call1(caml_call1(equal_stmt,a$7),b$7);
                     if(_apl_){var x$3=x$4,y$3=y$4;continue}
                     var _apm_=_apl_,switch$8=1}
                   else
                    var switch$8=0;
                  else
                   if(y$3)var switch$8=0;else var _apm_=1,switch$8=1;
                  if(!switch$8)var _apm_=0;
                  var _apn_=_apm_;
                  break}}
              else
               var _apn_=_apk_;
              return _apn_?1:_apn_}
            break;
           case 9:
            if(typeof match !== "number" && 9 === match[0])
             {var
               rhs1$7=match[2],
               rhs0$8=match[1],
               lhs1$7=lhs[2],
               lhs0$8=lhs[1],
               _apo_=caml_call1(caml_call1(equal$0,lhs0$8),rhs0$8);
              if(_apo_)
               {var x$5=lhs1$7,y$5=rhs1$7;
                for(;;)
                 {if(x$5)
                   if(y$5)
                    {var
                      y$6=y$5[2],
                      b$8=y$5[1],
                      x$6=x$5[2],
                      a$8=x$5[1],
                      _app_=caml_call1(caml_call1(equal_val_decl,a$8),b$8);
                     if(_app_){var x$5=x$6,y$5=y$6;continue}
                     var _apq_=_app_,switch$9=1}
                   else
                    var switch$9=0;
                  else
                   if(y$5)var switch$9=0;else var _apq_=1,switch$9=1;
                  if(!switch$9)var _apq_=0;
                  var _apr_=_apq_;
                  break}}
              else
               var _apr_=_apo_;
              return _apr_?1:_apr_}
            break;
           default:
            if(typeof match !== "number" && 10 === match[0])
             {var
               rhs1$8=match[2],
               rhs0$9=match[1],
               lhs1$8=lhs[2],
               lhs0$9=lhs[1],
               _aps_=caml_call1(caml_call1(equal$0,lhs0$9),rhs0$9),
               _apt_=_aps_?caml_call1(caml_call1(equal$0,lhs1$8),rhs1$8):_aps_;
              return _apt_?1:_apt_}}
        return 0});
    caml_update_dummy
     (equal_val_decl,
      function(param,_aoQ_)
       {var
         rhs1=_aoQ_[2],
         rhs0=_aoQ_[1],
         lhs1=param[2],
         lhs0=param[1],
         _aoR_=caml_call1(caml_call1(equal,lhs0),rhs0),
         _aoS_=_aoR_?caml_call1(caml_call1(equal$0,lhs1),rhs1):_aoR_;
        return _aoS_?1:_aoS_});
    var
     compare_exp=function _aoP_(_aoN_,_aoO_){return _aoP_.fun(_aoN_,_aoO_)},
     compare$11=function _aoM_(_aoK_,_aoL_){return _aoM_.fun(_aoK_,_aoL_)},
     compare_val_decl=
      function _aoJ_(_aoH_,_aoI_){return _aoJ_.fun(_aoH_,_aoI_)};
    caml_update_dummy
     (compare_exp,
      function(lhs,match)
       {if(typeof lhs === "number")
         {if(typeof match === "number")return 0}
        else
         switch(lhs[0])
          {case 0:
            if(typeof match !== "number" && 0 === match[0])return 0;break;
           case 1:
            if(typeof match !== "number" && 1 === match[0])
             {var rhs0=match[1],lhs0=lhs[1],x=caml_int_compare(lhs0,rhs0);
              return 0 === x?0:x}
            break;
           case 2:
            if(typeof match !== "number" && 2 === match[0])
             {var
               rhs0$0=match[1],
               lhs0$0=lhs[1],
               x$0=caml_int_compare(lhs0$0,rhs0$0);
              return 0 === x$0?0:x$0}
            break;
           case 3:
            if(typeof match !== "number" && 3 === match[0])
             {var
               rhs0$1=match[1],
               lhs0$1=lhs[1],
               x$1=caml_float_compare(lhs0$1,rhs0$1);
              return 0 === x$1?0:x$1}
            break;
           case 4:
            if(typeof match !== "number" && 4 === match[0])
             {var
               rhs0$2=match[1],
               lhs0$2=lhs[1],
               x$2=caml_string_compare(lhs0$2,rhs0$2);
              return 0 === x$2?0:x$2}
            break;
           case 5:
            if(typeof match !== "number" && 5 === match[0])
             {var
               rhs0$3=match[1],
               lhs0$3=lhs[1],
               x$3=caml_call1(caml_call1(compare$4,lhs0$3),rhs0$3);
              return 0 === x$3?0:x$3}
            break;
           case 6:
            if(typeof match !== "number" && 6 === match[0])
             {var
               rhs0$4=match[1],
               lhs0$4=lhs[1],
               x$6=caml_int_compare(lhs0$4.length - 1,rhs0$4.length - 1);
              if(0 === x$6)
               {var i=0;
                for(;;)
                 {if(i === lhs0$4.length - 1)
                   var x$7=0;
                  else
                   {var
                     _aoE_=caml_check_bound(rhs0$4,i)[i + 1],
                     x$4=caml_check_bound(lhs0$4,i)[i + 1],
                     x$5=caml_call1(caml_call1(compare_exp,x$4),_aoE_);
                    if(0 === x$5){var i$0=i + 1 | 0,i=i$0;continue}
                    var x$7=x$5}
                  break}}
              else
               var x$7=x$6;
              return 0 === x$7?0:x$7}
            break;
           case 7:
            if(typeof match !== "number" && 7 === match[0])
             {var
               rhs1=match[2],
               rhs0$5=match[1],
               lhs1=lhs[2],
               lhs0$5=lhs[1],
               x$8=caml_string_compare(lhs0$5,rhs0$5);
              if(0 === x$8)
               {var x$9=caml_call1(caml_call1(compare_exp,lhs1),rhs1);
                return 0 === x$9?0:x$9}
              return x$8}
            break;
           case 8:
            if(typeof match !== "number" && 8 === match[0])
             {var
               rhs1$0=match[2],
               rhs0$6=match[1],
               lhs1$0=lhs[2],
               lhs0$6=lhs[1],
               x$10=caml_string_compare(lhs0$6,rhs0$6);
              if(0 === x$10)
               {var x$11=lhs1$0,y=rhs1$0;
                for(;;)
                 {if(x$11)
                   if(y)
                    {var
                      y$0=y[2],
                      b=y[1],
                      x$12=x$11[2],
                      a=x$11[1],
                      x$13=caml_call1(caml_call1(compare_exp,a),b);
                     if(0 === x$13){var x$11=x$12,y=y$0;continue}
                     var x$14=x$13}
                   else
                    var x$14=1;
                  else
                   var x$14=y?-1:0;
                  return 0 === x$14?0:x$14}}
              return x$10}
            break;
           case 9:
            if(typeof match !== "number" && 9 === match[0])
             {var
               rhs2=match[3],
               rhs1$1=match[2],
               rhs0$7=match[1],
               lhs2=lhs[3],
               lhs1$1=lhs[2],
               lhs0$7=lhs[1];
              if(lhs0$7)
               {var _aoF_=lhs0$7[1];
                if(rhs0$7)
                 var
                  b$0=rhs0$7[1],
                  x$15=caml_call1(caml_call1(compare$4,_aoF_),b$0);
                else
                 var x$15=1}
              else
               var x$15=rhs0$7?-1:0;
              if(0 === x$15)
               {var x$16=caml_call1(caml_call1(compare$4,lhs1$1),rhs1$1);
                if(0 === x$16)
                 {var x$17=lhs2,y$1=rhs2;
                  for(;;)
                   {if(x$17)
                     if(y$1)
                      {var
                        y$2=y$1[2],
                        b$1=y$1[1],
                        x$18=x$17[2],
                        a$0=x$17[1],
                        x$19=caml_call1(caml_call1(compare_exp,a$0),b$1);
                       if(0 === x$19){var x$17=x$18,y$1=y$2;continue}
                       var x$20=x$19}
                     else
                      var x$20=1;
                    else
                     var x$20=y$1?-1:0;
                    return 0 === x$20?0:x$20}}
                return x$16}
              return x$15}
            break;
           case 10:
            if(typeof match !== "number" && 10 === match[0])
             {var
               rhs2$0=match[3],
               rhs1$2=match[2],
               rhs0$8=match[1],
               lhs2$0=lhs[3],
               lhs1$2=lhs[2],
               lhs0$8=lhs[1],
               x$21=caml_call1(caml_call1(compare_exp,lhs0$8),rhs0$8);
              if(0 === x$21)
               {var x$22=caml_call1(caml_call1(compare_exp,lhs1$2),rhs1$2);
                if(0 === x$22)
                 {var x$23=caml_call1(caml_call1(compare_exp,lhs2$0),rhs2$0);
                  return 0 === x$23?0:x$23}
                return x$22}
              return x$21}
            break;
           case 11:
            if(typeof match !== "number" && 11 === match[0])
             {var
               rhs0$9=match[1],
               lhs0$9=lhs[1],
               x$24=caml_call1(caml_call1(compare_exp,lhs0$9),rhs0$9);
              return 0 === x$24?0:x$24}
            break;
           case 12:
            if(typeof match !== "number" && 12 === match[0])
             {var rhs0$10=match[1],lhs0$10=lhs[1],x$25=lhs0$10,y$3=rhs0$10;
              for(;;)
               {if(x$25)
                 if(y$3)
                  {var
                    y$4=y$3[2],
                    b$2=y$3[1],
                    x$26=x$25[2],
                    a$1=x$25[1],
                    x$27=caml_call1(caml_call1(compare_exp,a$1),b$2);
                   if(0 === x$27){var x$25=x$26,y$3=y$4;continue}
                   var x$28=x$27}
                 else
                  var x$28=1;
                else
                 var x$28=y$3?-1:0;
                return 0 === x$28?0:x$28}}
            break;
           default:
            if(typeof match !== "number" && 13 === match[0])
             {var
               rhs1$3=match[2],
               rhs0$11=match[1],
               lhs1$3=lhs[2],
               lhs0$11=lhs[1];
              if(lhs0$11)
               {var _aoG_=lhs0$11[1];
                if(rhs0$11)
                 var
                  b$3=rhs0$11[1],
                  x$29=caml_call1(caml_call1(compare$4,_aoG_),b$3);
                else
                 var x$29=1}
              else
               var x$29=rhs0$11?-1:0;
              if(0 === x$29)
               {var x$30=caml_call1(caml_call1(compare$11,lhs1$3),rhs1$3);
                return 0 === x$30?0:x$30}
              return x$29}}
        function to_int(param)
         {if(typeof param === "number")
           return 14;
          else
           switch(param[0])
            {case 0:return 0;
             case 1:return 1;
             case 2:return 2;
             case 3:return 3;
             case 4:return 4;
             case 5:return 5;
             case 6:return 6;
             case 7:return 7;
             case 8:return 8;
             case 9:return 9;
             case 10:return 10;
             case 11:return 11;
             case 12:return 12;
             default:return 13}}
        var _aoD_=to_int(match);
        return caml_int_compare(to_int(lhs),_aoD_)});
    caml_update_dummy
     (compare$11,
      function(lhs,match)
       {if(typeof lhs === "number")
         {if(typeof match === "number")return 0}
        else
         switch(lhs[0])
          {case 0:
            if(typeof match !== "number" && 0 === match[0])
             {var
               rhs1=match[2],
               rhs0=match[1],
               lhs1=lhs[2],
               lhs0=lhs[1],
               x=caml_call1(caml_call1(compare_lhs_exp,lhs0),rhs0);
              if(0 === x)
               {if(lhs1)
                 {var _aox_=lhs1[1];
                  if(rhs1)
                   var
                    b=rhs1[1],
                    x$0=caml_call1(caml_call1(compare_exp,_aox_),b);
                  else
                   var x$0=1}
                else
                 var x$0=rhs1?-1:0;
                return 0 === x$0?0:x$0}
              return x}
            break;
           case 1:
            if(typeof match !== "number" && 1 === match[0])
             {var
               rhs1$0=match[2],
               rhs0$0=match[1],
               lhs1$0=lhs[2],
               lhs0$0=lhs[1],
               x$1=caml_call1(caml_call1(compare_lhs_exp,lhs0$0),rhs0$0);
              if(0 === x$1)
               {if(lhs1$0)
                 {var _aoy_=lhs1$0[1];
                  if(rhs1$0)
                   var
                    b$0=rhs1$0[1],
                    x$2=caml_call1(caml_call1(compare_exp,_aoy_),b$0);
                  else
                   var x$2=1}
                else
                 var x$2=rhs1$0?-1:0;
                return 0 === x$2?0:x$2}
              return x$1}
            break;
           case 2:
            if(typeof match !== "number" && 2 === match[0])
             {var
               rhs1$1=match[2],
               rhs0$1=match[1],
               lhs1$1=lhs[2],
               lhs0$1=lhs[1],
               x$3=caml_call1(caml_call1(compare_exp,lhs0$1),rhs0$1);
              if(0 === x$3)
               {var x$4=caml_call1(caml_call1(compare$11,lhs1$1),rhs1$1);
                return 0 === x$4?0:x$4}
              return x$3}
            break;
           case 3:
            if(typeof match !== "number" && 3 === match[0])
             {var
               rhs0$2=match[1],
               lhs0$2=lhs[1],
               x$5=caml_call1(caml_call1(compare_exp,lhs0$2),rhs0$2);
              return 0 === x$5?0:x$5}
            break;
           case 4:
            if(typeof match !== "number" && 4 === match[0])
             {var
               rhs2=match[3],
               rhs1$2=match[2],
               rhs0$3=match[1],
               lhs2=lhs[3],
               lhs1$2=lhs[2],
               lhs0$3=lhs[1],
               x$6=caml_call1(caml_call1(compare_exp,lhs0$3),rhs0$3);
              if(0 === x$6)
               {var x$7=caml_call1(caml_call1(compare$11,lhs1$2),rhs1$2);
                if(0 === x$7)
                 {if(lhs2)
                   {var _aoz_=lhs2[1];
                    if(rhs2)
                     var
                      b$1=rhs2[1],
                      x$8=caml_call1(caml_call1(compare$11,_aoz_),b$1);
                    else
                     var x$8=1}
                  else
                   var x$8=rhs2?-1:0;
                  return 0 === x$8?0:x$8}
                return x$7}
              return x$6}
            break;
           case 5:
            if(typeof match !== "number" && 5 === match[0])
             {var
               rhs3=match[4],
               rhs2$0=match[3],
               rhs1$3=match[2],
               rhs0$4=match[1],
               lhs3=lhs[4],
               lhs2$0=lhs[3],
               lhs1$3=lhs[2],
               lhs0$4=lhs[1],
               x$9=caml_call1(caml_call1(compare$4,lhs0$4),rhs0$4);
              if(0 === x$9)
               {var x$10=lhs1$3,y=rhs1$3;
                for(;;)
                 {if(x$10)
                   if(y)
                    {var
                      y$0=y[2],
                      b$2=y[1],
                      x$11=x$10[2],
                      a=x$10[1],
                      x$12=caml_call1(caml_call1(compare_typed_id,a),b$2);
                     if(0 === x$12){var x$10=x$11,y=y$0;continue}
                     var x$13=x$12}
                   else
                    var x$13=1;
                  else
                   var x$13=y?-1:0;
                  if(0 === x$13)
                   {var x$14=caml_call1(caml_call1(compare$11,lhs2$0),rhs2$0);
                    if(0 === x$14)
                     {if(lhs3)
                       {var _aoA_=lhs3[1];
                        if(rhs3)
                         var b$3=rhs3[1],x$15=compare$6(_aoA_,b$3);
                        else
                         var x$15=1}
                      else
                       var x$15=rhs3?-1:0;
                      return 0 === x$15?0:x$15}
                    return x$14}
                  return x$13}}
              return x$9}
            break;
           case 6:
            if(typeof match !== "number" && 6 === match[0])
             {var
               rhs3$0=match[4],
               rhs2$1=match[3],
               rhs1$4=match[2],
               rhs0$5=match[1],
               lhs3$0=lhs[4],
               lhs2$1=lhs[3],
               lhs1$4=lhs[2],
               lhs0$5=lhs[1],
               x$16=caml_call1(caml_call1(compare$4,lhs0$5),rhs0$5);
              if(0 === x$16)
               {var x$17=lhs1$4,y$1=rhs1$4;
                for(;;)
                 {if(x$17)
                   if(y$1)
                    {var
                      y$2=y$1[2],
                      b$4=y$1[1],
                      x$18=x$17[2],
                      a$0=x$17[1],
                      x$19=caml_call1(caml_call1(compare_typed_id,a$0),b$4);
                     if(0 === x$19){var x$17=x$18,y$1=y$2;continue}
                     var x$20=x$19}
                   else
                    var x$20=1;
                  else
                   var x$20=y$1?-1:0;
                  if(0 === x$20)
                   {var x$33=compare$6(lhs2$1,rhs2$1);
                    if(0 === x$33)
                     {if(lhs3$0)
                       {var _aoB_=lhs3$0[1];
                        if(rhs3$0)
                         var b$5=rhs3$0[1],x$21=caml_string_compare(_aoB_,b$5);
                        else
                         var x$21=1}
                      else
                       var x$21=rhs3$0?-1:0;
                      return 0 === x$21?0:x$21}
                    return x$33}
                  return x$20}}
              return x$16}
            break;
           case 7:
            if(typeof match !== "number" && 7 === match[0])
             {var
               rhs1$5=match[2],
               rhs0$6=match[1],
               lhs1$5=lhs[2],
               lhs0$6=lhs[1],
               x$22=caml_call1(caml_call1(compare_lhs_exp,lhs0$6),rhs0$6);
              if(0 === x$22)
               {var x$23=caml_call1(caml_call1(compare_exp,lhs1$5),rhs1$5);
                return 0 === x$23?0:x$23}
              return x$22}
            break;
           case 8:
            if(typeof match !== "number" && 8 === match[0])
             {var rhs1$6=match[2],rhs0$7=match[1],lhs1$6=lhs[2],lhs0$7=lhs[1];
              if(lhs0$7)
               {var _aoC_=lhs0$7[1];
                if(rhs0$7)
                 var
                  b$6=rhs0$7[1],
                  x$24=caml_call1(caml_call1(compare$4,_aoC_),b$6);
                else
                 var x$24=1}
              else
               var x$24=rhs0$7?-1:0;
              if(0 === x$24)
               {var x$25=lhs1$6,y$3=rhs1$6;
                for(;;)
                 {if(x$25)
                   if(y$3)
                    {var
                      y$4=y$3[2],
                      b$7=y$3[1],
                      x$26=x$25[2],
                      a$1=x$25[1],
                      x$27=caml_call1(caml_call1(compare$11,a$1),b$7);
                     if(0 === x$27){var x$25=x$26,y$3=y$4;continue}
                     var x$28=x$27}
                   else
                    var x$28=1;
                  else
                   var x$28=y$3?-1:0;
                  return 0 === x$28?0:x$28}}
              return x$24}
            break;
           case 9:
            if(typeof match !== "number" && 9 === match[0])
             {var
               rhs1$7=match[2],
               rhs0$8=match[1],
               lhs1$7=lhs[2],
               lhs0$8=lhs[1],
               x$34=compare$6(lhs0$8,rhs0$8);
              if(0 === x$34)
               {var x$29=lhs1$7,y$5=rhs1$7;
                for(;;)
                 {if(x$29)
                   if(y$5)
                    {var
                      y$6=y$5[2],
                      b$8=y$5[1],
                      x$30=x$29[2],
                      a$2=x$29[1],
                      x$31=caml_call1(caml_call1(compare_val_decl,a$2),b$8);
                     if(0 === x$31){var x$29=x$30,y$5=y$6;continue}
                     var x$32=x$31}
                   else
                    var x$32=1;
                  else
                   var x$32=y$5?-1:0;
                  return 0 === x$32?0:x$32}}
              return x$34}
            break;
           default:
            if(typeof match !== "number" && 10 === match[0])
             {var
               rhs1$8=match[2],
               rhs0$9=match[1],
               lhs1$8=lhs[2],
               lhs0$9=lhs[1],
               x$35=compare$6(lhs0$9,rhs0$9);
              if(0 === x$35)
               {var x$36=compare$6(lhs1$8,rhs1$8);return 0 === x$36?0:x$36}
              return x$35}}
        function to_int(param)
         {if(typeof param === "number")
           return 11;
          else
           switch(param[0])
            {case 0:return 0;
             case 1:return 1;
             case 2:return 2;
             case 3:return 3;
             case 4:return 4;
             case 5:return 5;
             case 6:return 6;
             case 7:return 7;
             case 8:return 8;
             case 9:return 9;
             default:return 10}}
        var _aow_=to_int(match);
        return caml_int_compare(to_int(lhs),_aow_)});
    caml_update_dummy
     (compare_val_decl,
      function(param,_aov_)
       {var
         rhs1=_aov_[2],
         rhs0=_aov_[1],
         lhs1=param[2],
         lhs0=param[1],
         x=caml_call1(caml_call1(compare$4,lhs0),rhs0);
        if(0 === x){var x$0=compare$6(lhs1,rhs1);return 0 === x$0?0:x$0}
        return x});
    var
     pp_exp_list=function _aou_(_aos_,_aot_){return _aou_.fun(_aos_,_aot_)},
     show_exp_list=function _aor_(_aoq_){return _aor_.fun(_aoq_)};
    caml_update_dummy
     (pp_exp_list,
      function(fmt,x)
       {caml_call1(fprintf(fmt),_nV_);
        var _aop_=0;
        fold_left
         (function(sep,x)
           {if(sep)caml_call1(fprintf(fmt),_nW_);
            caml_call1(caml_call1(pp_exp,fmt),x);
            return 1},
          _aop_,
          x);
        return caml_call1(fprintf(fmt),_nX_)});
    caml_update_dummy
     (show_exp_list,
      function(x){return caml_call2(asprintf(_nY_),pp_exp_list,x)});
    var
     equal_exp_list=
      function _aoo_(_aom_,_aon_){return _aoo_.fun(_aom_,_aon_)};
    caml_update_dummy
     (equal_exp_list,
      function(x$1,y$1)
       {var x=x$1,y=y$1;
        for(;;)
         {if(x)
           {if(y)
             {var
               y$0=y[2],
               b=y[1],
               x$0=x[2],
               a=x[1],
               _aol_=caml_call1(caml_call1(equal_exp,a),b);
              if(_aol_){var x=x$0,y=y$0;continue}
              return _aol_}}
          else
           if(!y)return 1;
          return 0}});
    var
     compare_exp_list=
      function _aok_(_aoi_,_aoj_){return _aok_.fun(_aoi_,_aoj_)};
    caml_update_dummy
     (compare_exp_list,
      function(x$2,y$1)
       {var x=x$2,y=y$1;
        for(;;)
         {if(x)
           {if(y)
             {var
               y$0=y[2],
               b=y[1],
               x$0=x[2],
               a=x[1],
               x$1=caml_call1(caml_call1(compare_exp,a),b);
              if(0 === x$1){var x=x$0,y=y$0;continue}
              return x$1}
            return 1}
          return y?-1:0}});
    function makeAttr(loc){return [0,loc,0,0,0,0,0,0,0,0]}
    var init$0=[0,default$0,0,0,0,0,0,0,0,0];
    function moduleName(file)
     {var
       name=basename$2(file),
       i$4=caml_ml_string_length(name) - 1 | 0,
       i$1=i$4;
      for(;;)
       {if(0 <= i$1)
         if(is_dir_sep$1(name,i$1))
          var switch$0=0;
         else
          {if(46 !== caml_string_get(name,i$1))
            {var i$3=i$1 - 1 | 0,i$1=i$3;continue}
           var i$2=i$1 - 1 | 0,i=i$2;
           for(;;)
            {if(0 <= i)
              if(is_dir_sep$1(name,i))
               var switch$1=1;
              else
               {if(46 === caml_string_get(name,i))
                 {var i$0=i - 1 | 0,i=i$0;continue}
                var
                 l=caml_ml_string_length(name) - i$1 | 0,
                 switch$0=1,
                 switch$1=0}
             else
              var switch$1=1;
             if(switch$1)var l=0,switch$0=1;
             break}}
        else
         var switch$0=0;
        if(!switch$0)var l=0;
        var
         _aoh_=
          0 === l
           ?invalid_arg(_ct_)
           :k(name,0,caml_ml_string_length(name) - l | 0);
        return apply1(uppercase_ascii,_aoh_)}}
    function makePrintBuffer(param){return [0,create(100),0,_nZ_,0]}
    function newline$1(buffer)
     {add_string(buffer[1],_n0_);buffer[4] = 1;return 0}
    function indent$1(buffer)
     {buffer[2] = buffer[2] + 1 | 0;
      buffer[3] = make$0(buffer[2] * 3 | 0,32);
      return newline$1(buffer)}
    function outdent$0(buffer)
     {buffer[2] = buffer[2] - 1 | 0;
      if(buffer[2] < 0)failwith(_n1_);
      buffer[3] = make$0(buffer[2] * 3 | 0,32);
      return 0}
    function append$0(buffer,s)
     {if(buffer[4]){add_string(buffer[1],buffer[3]);buffer[4] = 0}
      return add_string(buffer[1],s)}
    function contents$0(buffer){return contents(buffer[1])}
    function printList(buffer,f,sep,l)
     {var l$0=l;
      for(;;)
       {if(l$0)
         {var _aof_=l$0[2],_aog_=l$0[1];
          if(_aof_)
           {caml_call2(f,buffer,_aog_);
            append$0(buffer,sep);
            var l$0=_aof_;
            continue}
          return caml_call2(f,buffer,_aog_)}
        return 0}}
    function identifierBuff(buffer,id)
     {return printList(buffer,append$0,_n2_,id)}
    function commentedId(buffer,id)
     {if(id)
       {var ids=id[1];
        append$0(buffer,_n3_);
        identifierBuff(buffer,ids);
        append$0(buffer,_n4_);
        return newline$1(buffer)}
      return 0}
    function typeExpressionBuff(buffer,tp)
     {var tp$0=tp;
      for(;;)
       {var _aoe_=tp$0[1];
        switch(_aoe_[0])
         {case 0:var name=_aoe_[1];return append$0(buffer,name);
          case 1:var id=_aoe_[1];return identifierBuff(buffer,id);
          case 2:
           var args=_aoe_[2],id$0=_aoe_[1];
           identifierBuff(buffer,id$0);
           append$0(buffer,_n5_);
           printList(buffer,typeExpressionBuff,_n$_,args);
           return append$0(buffer,_n6_);
          case 3:
           var tp$1=_aoe_[2],t1=_aoe_[1];
           typeExpressionBuff(buffer,t1);
           append$0(buffer,_n7_);
           var tp$0=tp$1;
           continue;
          case 4:var tp$2=_aoe_[1],tp$0=tp$2;continue;
          case 5:
           var expl=_aoe_[1];
           append$0(buffer,_n8_);
           printList(buffer,typeExpressionBuff,_n9_,expl);
           return append$0(buffer,_n__);
          default:
           var n=_aoe_[1];return append$0(buffer,caml_new_string("" + n))}}}
    function lhsExpressionBuff(buffer,lhs)
     {switch(lhs[0])
       {case 0:
         var _aob_=lhs[1][7];
         if(_aob_)
          {var tp=_aob_[1];
           append$0(buffer,_oa_);
           typeExpressionBuff(buffer,tp);
           return append$0(buffer,_ob_)}
         return append$0(buffer,_oc_);
        case 1:
         var _aoc_=lhs[2],_aod_=lhs[1];
         if(_aoc_)
          {var tp$0=_aoc_[1];
           append$0(buffer,_od_);
           identifierBuff(buffer,_aod_);
           append$0(buffer,_oe_);
           typeExpressionBuff(buffer,tp$0);
           return append$0(buffer,_of_)}
         return identifierBuff(buffer,_aod_);
        case 2:
         var elems=lhs[1];
         append$0(buffer,_og_);
         printList(buffer,lhsExpressionBuff,_on_,elems);
         return append$0(buffer,_oh_);
        case 3:
         var tp$1=lhs[2],e=lhs[1];
         append$0(buffer,_oi_);
         lhsExpressionBuff(buffer,e);
         append$0(buffer,_oj_);
         typeExpressionBuff(buffer,tp$1);
         return append$0(buffer,_ok_);
        default:
         var elems$0=lhs[1];
         append$0(buffer,_ol_);
         lhsExpressionBuff(buffer,elems$0);
         return append$0(buffer,_om_)}}
    function typedArgBuff(buffer,id)
     {if(0 === id[0]){var id1=id[1];return identifierBuff(buffer,id1)}
      var _aoa_=id[1];
      if(_aoa_)
       if(!caml_string_notequal(_aoa_[1],_oo_))
        if(!_aoa_[2])
         {var id_type$0=id[2];return typeExpressionBuff(buffer,id_type$0)}
      var id_type=id[2];
      identifierBuff(buffer,_aoa_);
      append$0(buffer,_op_);
      return typeExpressionBuff(buffer,id_type)}
    function f(buffer,exp)
     {if(typeof exp === "number")
       return append$0(buffer,_oq_);
      else
       switch(exp[0])
        {case 0:return append$0(buffer,_or_);
         case 1:
          return 0 === exp[1]?append$0(buffer,_os_):append$0(buffer,_ot_);
         case 2:var s=exp[1];return append$0(buffer,caml_new_string("" + s));
         case 3:var s$0=exp[1];return append$0(buffer,to_string(s$0));
         case 4:
          var s$1=exp[1];
          append$0(buffer,_ou_);
          append$0(buffer,s$1);
          return append$0(buffer,_ov_);
         case 5:var s$2=exp[1];return identifierBuff(buffer,s$2);
         case 6:
          var elems=exp[1];
          append$0(buffer,_ow_);
          var n=elems.length - 1;
          if(0 < n)
           {var i=0;
            for(;;)
             {if(i !== (n - 1 | 0))
               {var h$0=caml_check_bound(elems,i)[i + 1];
                f(buffer,h$0);
                append$0(buffer,sep);
                var i$0=i + 1 | 0,i=i$0;
                continue}
              var h=caml_check_bound(elems,i)[i + 1];
              f(buffer,h);
              break}}
          return append$0(buffer,_ox_);
         case 7:
          var e=exp[2],op=exp[1];
          append$0(buffer,_oy_);
          append$0(buffer,op);
          f(buffer,e);
          return append$0(buffer,_oz_);
         case 8:
          var args=exp[2],op$0=exp[1];
          append$0(buffer,_oA_);
          printList(buffer,f,_a_(_oC_,_a_(op$0,_oB_)),args);
          return append$0(buffer,_oD_);
         case 9:
          var args$0=exp[3],fname=exp[2],id=exp[1];
          iter$0
           (function(a){identifierBuff(buffer,a);return append$0(buffer,_oE_)},
            id);
          identifierBuff(buffer,fname);
          append$0(buffer,_oF_);
          expressionListBuff(buffer,args$0);
          return append$0(buffer,_oG_);
         case 10:
          var else_exp=exp[3],then_exp=exp[2],cond=exp[1];
          append$0(buffer,_oH_);
          f(buffer,cond);
          append$0(buffer,_oI_);
          f(buffer,then_exp);
          append$0(buffer,_oJ_);
          f(buffer,else_exp);
          return append$0(buffer,_oK_);
         case 11:
          var e1=exp[1];
          append$0(buffer,_oL_);
          f(buffer,e1);
          return append$0(buffer,_oM_);
         case 12:
          var elems$0=exp[1];
          append$0(buffer,_oN_);
          expressionListBuff(buffer,elems$0);
          return append$0(buffer,_oO_);
         default:
          var stmts=exp[2],name=exp[1];
          commentedId(buffer,name);
          append$0(buffer,_pt_);
          indent$1(buffer);
          if(typeof stmts === "number")
           var switch$0=0;
          else
           if(8 === stmts[0])
            var stmts$0=stmts[2],_an$_=stmts$0,switch$0=1;
           else
            var switch$0=0;
          if(!switch$0)var _an$_=[0,stmts,0];
          var l=_an$_;
          for(;;)
           {if(l)
             {var l$0=l[2],h$1=l[1];
              stmtBuff(buffer,h$1);
              newline$1(buffer);
              var l=l$0;
              continue}
            outdent$0(buffer);
            return append$0(buffer,_pu_)}}}
    function stmtBuff$0(counter,buffer,s)
     {var s$0=s;
      for(;;)
       if(typeof s$0 === "number")
        return 0;
       else
        switch(s$0[0])
         {case 0:
           var _an5_=s$0[2],_an6_=s$0[1];
           if(_an5_)
            {var e2=_an5_[1];
             append$0(buffer,_oP_);
             lhsExpressionBuff(buffer,_an6_);
             append$0(buffer,_oQ_);
             f(buffer,e2);
             return append$0(buffer,_oR_)}
           append$0(buffer,_oS_);
           lhsExpressionBuff(buffer,_an6_);
           return append$0(buffer,_oT_);
          case 1:
           var e3=s$0[2],e1=s$0[1];
           append$0(buffer,_oU_);
           lhsExpressionBuff(buffer,e1);
           iter$0(function(a){append$0(buffer,_oV_);return f(buffer,a)},e3);
           return append$0(buffer,_oW_);
          case 2:
           var s$1=s$0[2],cond=s$0[1];
           append$0(buffer,_oX_);
           f(buffer,cond);
           append$0(buffer,_oY_);
           var s$0=s$1;
           continue;
          case 3:
           var e=s$0[1];
           append$0(buffer,_oZ_);
           f(buffer,e);
           return append$0(buffer,_o0_);
          case 4:
           var _an7_=s$0[3],_an8_=s$0[2],_an9_=s$0[1];
           if(_an7_)
            {var false_stmt=_an7_[1];
             append$0(buffer,_o1_);
             f(buffer,_an9_);
             append$0(buffer,_o2_);
             indent$1(buffer);
             stmtBuff(buffer,_an8_);
             outdent$0(buffer);
             newline$1(buffer);
             append$0(buffer,_o3_);
             indent$1(buffer);
             stmtBuff(buffer,false_stmt);
             return outdent$0(buffer)}
           append$0(buffer,_o4_);
           f(buffer,_an9_);
           append$0(buffer,_o5_);
           indent$1(buffer);
           stmtBuff(buffer,_an8_);
           return outdent$0(buffer);
          case 5:
           var
            attr=s$0[5],
            vtype=s$0[4],
            body=s$0[3],
            args=s$0[2],
            name=s$0[1],
            _an__=attr[2]?_o6_:_pa_;
           append$0(buffer,_an__);
           identifierBuff(buffer,name);
           append$0(buffer,_o7_);
           printList(buffer,typedArgBuff,_o8_,args);
           append$0(buffer,_o9_);
           iter$0
            (function(a)
              {append$0(buffer,_o__);
               typeExpressionBuff(buffer,a);
               return append$0(buffer,_o$_)},
             vtype);
           stmtBuff(buffer,body);
           return newline$1(buffer);
          case 6:
           var link_name=s$0[4],vtype$0=s$0[3],args$0=s$0[2],name$0=s$0[1];
           append$0(buffer,_pb_);
           identifierBuff(buffer,name$0);
           append$0(buffer,_pc_);
           printList(buffer,typedArgBuff,_pd_,args$0);
           append$0(buffer,_pe_);
           typeExpressionBuff(buffer,vtype$0);
           if(link_name)
            {var s$2=link_name[1];
             append$0(buffer,_pf_);
             append$0(buffer,s$2);
             append$0(buffer,_pg_)}
           return append$0(buffer,_ph_);
          case 7:
           var e2$0=s$0[2],e1$0=s$0[1];
           lhsExpressionBuff(buffer,e1$0);
           append$0(buffer,_pi_);
           f(buffer,e2$0);
           return append$0(buffer,_pj_);
          case 8:
           var stmts=s$0[2],name$1=s$0[1];
           commentedId(buffer,name$1);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return stmtListBuff$0(counter$0,buffer,stmts)}
           return caml_trampoline_return(stmtListBuff$0,[0,buffer,stmts]);
          case 9:
           var decl_list=s$0[2],type_name=s$0[1];
           append$0(buffer,_pk_);
           typeExpressionBuff(buffer,type_name);
           append$0(buffer,_pl_);
           indent$1(buffer);
           iter
            (function(val_decl)
              {var e=val_decl[2],id=val_decl[1];
               append$0(buffer,_pv_);
               identifierBuff(buffer,id);
               append$0(buffer,_pw_);
               typeExpressionBuff(buffer,e);
               append$0(buffer,_px_);
               return newline$1(buffer)},
             decl_list);
           outdent$0(buffer);
           append$0(buffer,_pm_);
           return newline$1(buffer);
          default:
           var alias=s$0[2],type_name$0=s$0[1];
           append$0(buffer,_pn_);
           typeExpressionBuff(buffer,type_name$0);
           append$0(buffer,_po_);
           typeExpressionBuff(buffer,alias);
           return append$0(buffer,_pp_)}}
    function stmtListBuff$0(counter,buffer,expl)
     {if(expl)
       if(!expl[2])
        {var h$0=expl[1];
         if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return stmtBuff$0(counter$0,buffer,h$0)}
         return caml_trampoline_return(stmtBuff$0,[0,buffer,h$0])}
      append$0(buffer,_pr_);
      indent$1(buffer);
      var l=expl;
      for(;;)
       {if(l)
         {var l$0=l[2],h=l[1];
          stmtBuff(buffer,h);
          newline$1(buffer);
          var l=l$0;
          continue}
        outdent$0(buffer);
        return append$0(buffer,_ps_)}}
    function stmtBuff(buffer,s)
     {return caml_trampoline(stmtBuff$0(0,buffer,s))}
    function stmtListBuff(buffer,expl)
     {return caml_trampoline(stmtListBuff$0(0,buffer,expl))}
    function expressionListBuff(buffer,expl)
     {return printList(buffer,f,_pq_,expl)}
    function idStr(id)
     {var print_buffer=makePrintBuffer(0);
      identifierBuff(print_buffer,id);
      return contents$0(print_buffer)}
    function typeStr(e)
     {var print_buffer=makePrintBuffer(0);
      typeExpressionBuff(print_buffer,e);
      return contents$0(print_buffer)}
    function has(attr,id)
     {var attr$0=attr;
      for(;;)
       {if(attr$0)
         {var _an4_=attr$0[1];
          switch(_an4_[0])
           {case 0:var name=_an4_[1];if(caml_equal(id,name))return 1;break;
            case 1:var name$0=_an4_[1];if(caml_equal(id,name$0))return 1;break
            }
          var attr$1=attr$0[2],attr$0=attr$1;
          continue}
        return 0}}
    function getTypeLiteral(t)
     {switch(t)
       {case 0:return _pD_;
        case 1:return _pE_;
        case 2:return _pF_;
        default:return _pG_}}
    function getTableParams(fname,params$0,msg$2,attr)
     {var attr$0=attr;
      for(;;)
       {if(attr$0)
         {var _an2_=attr$0[1];
          if(1 === _an2_[0])
           {var loc$9=_an2_[3],args$0=_an2_[2],name$1=_an2_[1];
            if(caml_equal(name$1,[0,fname,0]))
             {var remaning=args$0,found=0,params=params$0;
              b:
              for(;;)
               {if(params)
                 {var
                   t$0=params[2],
                   h$0=params[1],
                   typ=h$0[2],
                   id=h$0[1],
                   lattr=
                    function(loc)
                     {return [0,
                              loc,
                              init$0[2],
                              init$0[3],
                              init$0[4],
                              init$0[5],
                              init$0[6],
                              init$0[7],
                              init$0[8],
                              init$0[9]]},
                   remaining=0,
                   args=remaning;
                  for(;;)
                   {if(args)
                     {var t=args[2],h=args[1],value=h[2],name=h[1];
                      if(!caml_equal(name,[0,id,0]))
                       {var
                         remaining$0=[0,h,remaining],
                         remaining=remaining$0,
                         args=t;
                        continue}
                      var _anP_=[0,joinErrors(remaining,t),[0,value]]}
                    else
                     var _anP_=[0,remaining,0];
                    var _anQ_=_anP_[2],_anR_=_anP_[1];
                    if(_anQ_)
                     {var _anS_=_anQ_[1];
                      switch(_anS_[0])
                       {case 0:
                         var loc$4=_anS_[2],value$0=_anS_[1];
                         if(2 === typ)
                          var _anX_=[0,_anR_,[0,[5,value$0,lattr(loc$4)]]],switch$0=1;
                         else
                          var switch$0=0;
                         break;
                        case 2:
                         var loc$6=_anS_[2],value$1=_anS_[1];
                         if(0 === typ)
                          var
                           _anV_=lattr(loc$6),
                           _anX_=[0,_anR_,[0,[2,caml_int_of_string(value$1),_anV_]]],
                           switch$0=1;
                         else
                          var switch$0=0;
                         break;
                        case 3:
                         var loc$7=_anS_[2],value$2=_anS_[1];
                         if(1 === typ)
                          var
                           _anW_=lattr(loc$7),
                           _anX_=[0,_anR_,[0,[3,caml_float_of_string(value$2),_anW_]]],
                           switch$0=1;
                         else
                          var switch$0=0;
                         break;
                        case 4:
                         var loc$8=_anS_[2],value$3=_anS_[1];
                         if(3 === typ)
                          var _anX_=[0,_anR_,[0,[4,value$3,lattr(loc$8)]]],switch$0=1;
                         else
                          var switch$0=0;
                         break;
                        default:var switch$0=0}
                      if(!switch$0)
                       {switch(_anS_[0])
                         {case 0:var loc=_anS_[2],loc$5=loc;break;
                          case 1:var loc$0=_anS_[3],loc$5=loc$0;break;
                          case 2:var loc$1=_anS_[2],loc$5=loc$1;break;
                          case 3:var loc$2=_anS_[2],loc$5=loc$2;break;
                          default:var loc$3=_anS_[2],loc$5=loc$3}
                        switch(_anS_[0])
                         {case 0:var _anT_=_py_;break;
                          case 1:var _anT_=_pz_;break;
                          case 2:var _anT_=_pA_;break;
                          case 3:var _anT_=_pB_;break;
                          default:var _anT_=_pC_}
                        var
                         _anU_=getTypeLiteral(typ),
                         msg=caml_call3(sprintf(_pH_),id,_anU_,_anT_),
                         _anX_=raiseError(msg,loc$5)}}
                    else
                     var _anX_=[0,_anR_,0];
                    var _anY_=_anX_[2],_anZ_=_anX_[1];
                    if(_anY_)
                     {var
                       value$4=_anY_[1],
                       found$0=[0,value$4,found],
                       remaning=_anZ_,
                       found=found$0,
                       params=t$0;
                      continue b}
                    var
                     typ$0=h$0[2],
                     name$0=h$0[1],
                     _an0_=getTypeLiteral(typ$0),
                     msg$0=caml_call2(sprintf(_pI_),name$0,_an0_),
                     match=raiseError(msg$0,loc$9);
                    break}}
                else
                 var match=[0,remaning,rev(found)];
                var found$1=match[2],remaining$1=match[1];
                if(remaining$1)
                 var
                  params_s=
                   concat$0
                    (_pJ_,
                     map
                      (function(param){var id=param[1];return idStr(id)},
                       remaining$1)),
                  msg$1=_a_(_pK_,params_s),
                  _an3_=raiseError(msg$1,loc$9);
                else
                 var
                  _an1_=length(params$0),
                  _an3_=
                   length(found$1) === _an1_?found$1:raiseError(msg$2,loc$9);
                return [0,[0,loc$9,_an3_]]}}}
          var attr$1=attr$0[2],attr$0=attr$1;
          continue}
        return 0}}
    function removeAttrFunc(fname,attr)
     {var attr$0=attr;
      for(;;)
       {if(attr$0)
         {var _anO_=attr$0[1];
          if(1 === _anO_[0])
           {var t$0=attr$0[2],name=_anO_[1];
            if(caml_equal(name,[0,fname,0])){var attr$0=t$0;continue}}
          var t=attr$0[2];
          return [0,_anO_,removeAttrFunc(fname,t)]}
        return 0}}
    var empty$0=[0,IdMap[1],IdMap[1],IdMap[1],0,0];
    function addTo(context,func,is_init)
     {try
       {var
         _anM_=caml_call2(IdMap[23],context[5],context[2]),
         current_in_ctx=_anM_}
      catch(_anN_)
       {_anN_ = caml_wrap_exception(_anN_);
        if(_anN_ !== Not_found)throw _anN_;
        var current_in_ctx=IdSet[1]}
      var
       _anG_=context[5],
       _anH_=context[4],
       _anI_=
        is_init?caml_call3(IdMap[4],context[5],func,context[3]):context[3],
       _anJ_=context[2],
       _anK_=caml_call2(IdSet[4],func,current_in_ctx),
       _anL_=caml_call3(IdMap[4],context[5],_anK_,_anJ_);
      return [0,
              caml_call3(IdMap[4],func,context[5],context[1]),
              _anL_,
              _anI_,
              _anH_,
              _anG_]}
    function getAllWithContext(context,func)
     {try
       {var
         ctx=caml_call2(IdMap[23],func,context[1]),
         all=caml_call2(IdMap[23],ctx,context[2]),
         _anC_=0,
         _anD_=function(a,s){return [0,a,s]},
         _anE_=caml_call3(IdSet[15],_anD_,all,_anC_);
        return _anE_}
      catch(_anF_)
       {_anF_ = caml_wrap_exception(_anF_);
        if(_anF_ === Not_found)return 0;
        throw _anF_}}
    function getInitFunction(context,name)
     {var ctx=caml_call2(IdMap[23],name,context[1]);
      try
       {var init_fun=caml_call2(IdMap[23],ctx,context[3])}
      catch(_anB_)
       {_anB_ = caml_wrap_exception(_anB_);
        if(_anB_ === Not_found)return 0;
        throw _anB_}
      return [0,init_fun]}
    function kindStr(kind)
     {switch(kind)
       {case 0:return _pM_;
        case 1:return _pN_;
        case 2:return _pO_;
        default:return _pP_}}
    function create$1(kind,tick)
     {return [0,
              0,
              kind,
              [0,0],
              [0,empty],
              [0,IdMap[1]],
              [0,IdMap[1]],
              [0,IdMap[1]],
              [0,IdMap[1]],
              [0,IdMap[1]],
              [0,0],
              [0,empty$0],
              [0,1],
              [0,0],
              [0,0],
              [0,default$0],
              tick,
              [0,0]]}
    function findFunction(t,name)
     {try
       {var _any_=[0,caml_call2(IdMap[23],name,t[8][1])];return _any_}
      catch(_anz_)
       {try
         {var _anx_=[0,caml_call2(IdMap[23],name,t[6][1])];return _anx_}
        catch(_anA_){return 0}}}
    function findModule(t,name)
     {try
       {var _anv_=[0,caml_call2(IdMap[23],name,t[6][1])];return _anv_}
      catch(_anw_){return 0}}
    function findMemInst(t,name)
     {try
       {var _ant_=[0,caml_call2(IdMap[23],name,t[9][1])];return _ant_}
      catch(_anu_){return 0}}
    function findType(t,name)
     {try
       {var _anq_=[0,caml_call2(IdMap[23],name,t[7][1])];return _anq_}
      catch(_anr_)
       {try
         {var _anp_=[0,caml_call2(IdMap[23],name,t[6][1])];return _anp_}
        catch(_ans_){return 0}}}
    function findOperator(t,name)
     {try
       {var _ann_=[0,caml_call2(IdMap[23],name,t[5][1])];return _ann_}
      catch(_ano_){return 0}}
    function getTable(t,kind)
     {switch(kind)
       {case 0:return t[8][1];
        case 1:return t[6][1];
        case 2:return t[5][1];
        default:return t[7][1]}}
    function setOptLoc(opt_loc,t)
     {if(opt_loc){var loc=opt_loc[1];t[15][1] = loc;return t}return t}
    function setOptType(opt_typ,t)
     {if(opt_typ){var typ=opt_typ[1];t[4][1] = typ;return t}return t}
    function findOrCreate(t,typ,loc,kind,name)
     {try
       {var _anl_=getTable(t,kind),found=caml_call2(IdMap[23],name,_anl_);
        return found}
      catch(_anm_)
       {_anm_ = caml_wrap_exception(_anm_);
        if(_anm_ === Not_found)
         {var _ank_=create$1(kind,t[16]);
          return setOptType
                  (typ,
                   setOptLoc
                    (loc,
                     [0,
                      name,
                      _ank_[2],
                      _ank_[3],
                      _ank_[4],
                      _ank_[5],
                      _ank_[6],
                      _ank_[7],
                      _ank_[8],
                      _ank_[9],
                      _ank_[10],
                      _ank_[11],
                      _ank_[12],
                      _ank_[13],
                      _ank_[14],
                      _ank_[15],
                      _ank_[16],
                      _ank_[17]]))}
        throw _anm_}}
    function exit(t)
     {var _anf_=t[3][1];
      if(_anf_)
       {var parent=_anf_[1];
        switch(t[2])
         {case 0:
           var _ang_=caml_call3(IdMap[4],t[1],t,parent[8][1]);
           parent[8][1] = _ang_;
           return parent;
          case 1:
           var _anh_=caml_call3(IdMap[4],t[1],t,parent[6][1]);
           parent[6][1] = _anh_;
           return parent;
          case 2:
           var _ani_=caml_call3(IdMap[4],t[1],t,parent[5][1]);
           parent[5][1] = _ani_;
           return parent;
          default:
           var _anj_=caml_call3(IdMap[4],t[1],t,parent[7][1]);
           parent[7][1] = _anj_;
           return parent}}
      return failwith(_pQ_)}
    function current(t)
     {function parentName(parent)
       {if(parent)
         {var parent_t=parent[1],_ane_=parentName(parent_t[3][1]);
          return [0,parent_t[1],_ane_]}
        return 0}
      var _and_=parentName(t[3][1]);
      return [0,concat(rev([0,t[1],_and_]))]}
    function enter(kind,t,name,attr)
     {var loc=[0,attr[1]],sub=findOrCreate(t,0,loc,kind,name);
      sub[3][1] = [0,t];
      return sub}
    function setCurrentType(t,typ,single)
     {t[4][1] = typ;t[12][1] = single;return t}
    function findAny(find_up,find,t,name)
     {var t$0=t,name$0=name;
      for(;;)
       {if(name$0)
         {var rest=name$0[2],h=name$0[1],match=caml_call2(find,t$0,[0,h,0]);
          if(match){var t$1=match[1],t$0=t$1,name$0=rest;continue}
          if(find_up)
           {if(t$0[3][1]){var t$2=exit(t$0),t$0=t$2;continue}return 0}
          return 0}
        return [0,t$0]}}
    function lookupVal(t,name)
     {function inner_loop(l)
       {var l$0=l;
        for(;;)
         {if(l$0)
           {var locals=l$0[2],local=l$0[1];
            try
             {var found=caml_call2(IdMap[23],name,local)}
            catch(_anc_)
             {_anc_ = caml_wrap_exception(_anc_);
              if(_anc_ === Not_found){var l$0=locals;continue}
              throw _anc_}
            return [0,found]}
          return 0}}
      return inner_loop(t[10][1])}
    function getAllWithSameContext(t)
     {var _am9_=t[3][1];
      if(_am9_)
       var parent=_am9_[1],contexts=getAllWithContext(parent[11][1],t[1]);
      else
       var contexts=0;
      var _am__=t[3][1];
      if(_am__)
       {var parent$0=_am__[1],_am$_=[0,t,0];
        return fold_left
                (function(s,a)
                  {try
                    {var _ana_=[0,caml_call2(IdMap[23],a,parent$0[8][1]),s];
                     return _ana_}
                   catch(_anb_){return s}},
                 _am$_,
                 contexts)}
      return [0,t,0]}
    function lookupMemInAllContext(t,name)
     {var ctx=getAllWithSameContext(t),ctx$0=ctx;
      for(;;)
       {if(ctx$0)
         {var tt=ctx$0[2],h=ctx$0[1],a=findMemInst(h,name);
          if(a)return a;
          var ctx$0=tt;
          continue}
        return 0}}
    function lookupVariable(t,name)
     {var a=lookupMemInAllContext(t,name);return a?a:lookupVal(t,name)}
    function lookup(kind,t,name)
     {switch(kind)
       {case 0:var match=findAny(1,findFunction,t,name);break;
        case 1:var match=findAny(1,findModule,t,name);break;
        case 2:var match=findAny(1,findOperator,t,name);break;
        default:var match=findAny(1,findType,t,name)}
      if(match)
       {var lt=match[1];
        if(lt[12][1])
         var typ=lt[4][1];
        else
         var
          _am3_=lt[4][1],
          copy=
           function(table,t)
            {try
              {var
                _am7_=
                 [0,
                  find
                    (function(param){var key=param[1];return key === t?1:0},
                     table)
                   [2],
                  table];
               return _am7_}
             catch(_am8_)
              {_am8_ = caml_wrap_exception(_am8_);
               if(_am8_ === Not_found)
                {var _am6_=t[1];
                 switch(_am6_[0])
                  {case 0:
                    var
                     loc=_am6_[3],
                     level=_am6_[2],
                     s=_am6_[1],
                     o=[0,[0,s,level,loc]];
                    return [0,o,[0,[0,t,o],table]];
                   case 1:
                    var loc$0=_am6_[2],id=_am6_[1],o$0=[0,[1,id,loc$0]];
                    return [0,o$0,[0,[0,t,o$0],table]];
                   case 2:
                    var
                     loc$1=_am6_[3],
                     elems=_am6_[2],
                     id$0=_am6_[1],
                     match=copyList(table,elems),
                     table$0=match[2],
                     elems$0=match[1],
                     o$1=[0,[2,id$0,elems$0,loc$1]];
                    return [0,o$1,[0,[0,t,o$1],table$0]];
                   case 3:
                    var
                     loc$2=_am6_[3],
                     t2=_am6_[2],
                     t1=_am6_[1],
                     match$0=copy(table,t1),
                     table$1=match$0[2],
                     t1$0=match$0[1],
                     match$1=copy(table$1,t2),
                     table$2=match$1[2],
                     t2$0=match$1[1],
                     o$2=[0,[3,t1$0,t2$0,loc$2]];
                    return [0,o$2,[0,[0,t,o$2],table$2]];
                   case 4:
                    var
                     link=_am6_[1],
                     match$2=copy(table,link),
                     table$3=match$2[2],
                     link$0=match$2[1],
                     o$3=[0,[4,link$0]];
                    return [0,o$3,[0,[0,t,o$3],table$3]];
                   case 5:
                    var
                     elems$1=_am6_[1],
                     match$3=copyList(table,elems$1),
                     table$4=match$3[2],
                     elems$2=match$3[1],
                     o$4=[0,[5,elems$2]];
                    return [0,o$4,[0,[0,t,o$4],table$4]];
                   default:
                    var loc$3=_am6_[2],n=_am6_[1],o$5=[0,[6,n,loc$3]];
                    return [0,o$5,[0,[0,t,o$5],table]]}}
               throw _am8_}},
          copyList=
           function(table,l)
            {var
              _am5_=[0,0,table],
              match=
               fold_left
                (function(param,t)
                  {var
                    table=param[2],
                    ol=param[1],
                    match=copy(table,t),
                    table$0=match[2],
                    o=match[1];
                   return [0,[0,o,ol],table$0]},
                 _am5_,
                 l),
              table$0=match[2],
              l$0=match[1];
             return [0,rev(l$0),table$0]},
          typ=copy(0,_am3_)[1];
        var
         parentPath=
          function(parent)
           {if(parent)
             {var p=parent[1],_am4_=parentPath(p[3][1]);
              return joinErrors(p[1],_am4_)}
            return 0},
         _am2_=parentPath(lt[3][1]);
        return [0,[0,[0,rev(joinErrors(lt[1],_am2_))],typ,lt]]}
      return 0}
    function isActive(t)
     {var tables=getAllWithSameContext(t);
      return exists(function(a){return a[13][1]},tables)}
    var
     _p6_=
      [0,
       [0,_p5_,0,real_type,0],
       [0,
        [0,_p4_,0,real_type,0],
        [0,[0,_p3_,0,ret$0,0],[0,[0,_p2_,0,a_a(0),0],0]]]],
     _p8_=[0,[0,_p7_,2,bool_bool_bool(0),0],_p6_],
     _p__=[0,[0,_p9_,2,bool_bool_bool(0),0],_p8_],
     _qa_=[0,[0,_p$_,0,bool_bool(0),0],_p__],
     _qc_=[0,[0,_qb_,2,num_num_bool(0),0],_qa_],
     _qe_=[0,[0,_qd_,2,num_num_bool(0),0],_qc_],
     _qg_=[0,[0,_qf_,2,a_a_bool(0),0],_qe_],
     _qi_=[0,[0,_qh_,2,a_a_bool(0),0],_qg_],
     _qk_=[0,[0,_qj_,2,num_num_bool(0),0],_qi_],
     _qm_=[0,[0,_ql_,2,num_num_bool(0),0],_qk_],
     _qo_=[0,[0,_qn_,2,num_num_num(0),0],_qm_],
     _qq_=[0,[0,_qp_,2,num_num_num(0),0],_qo_],
     _qs_=[0,[0,_qr_,2,num_num_num(0),0],_qq_],
     _qu_=[0,[0,_qt_,2,num_num_num(0),0],_qs_],
     _qw_=[0,[0,_qv_,2,num_num_num(0),0],_qu_],
     _qy_=[0,[0,_qx_,2,num_num(0),0],_qw_],
     _qA_=[0,[0,_qz_,0,num_real(0),0],_qy_],
     _qC_=[0,[0,_qB_,0,num_int(0),0],_qA_],
     _qE_=[0,[0,_qD_,0,a_a_a_a(0),0],_qC_],
     _qG_=[0,[0,_qF_,0,real_real(0),0],_qE_],
     _qI_=[0,[0,_qH_,0,real_real(0),0],_qG_],
     _qK_=[0,[0,_qJ_,0,real_real(0),0],_qI_],
     _qM_=[0,[0,_qL_,0,real_real(0),0],_qK_],
     _qO_=[0,[0,_qN_,0,real_real(0),0],_qM_],
     _qQ_=[0,[0,_qP_,0,real_real(0),0],_qO_],
     _qS_=[0,[0,_qR_,0,real_real(0),0],_qQ_],
     _qU_=[0,[0,_qT_,0,real_real(0),0],_qS_],
     _qW_=[0,[0,_qV_,0,array_make(0),0],_qU_],
     _qY_=[0,[0,_qX_,0,array_size(0),0],_qW_],
     _q0_=[0,[0,_qZ_,0,array_get(0),0],_qY_],
     _q2_=[0,[0,_q1_,0,array_set(0),0],_q0_],
     builtin_table=
      [0,
       [0,_q8_,3,type_type,1],
       [0,
        [0,_q7_,3,type_type,1],
        [0,
         [0,_q6_,3,type_type,1],
         [0,
          [0,_q5_,3,type_type,1],
          [0,[0,_q4_,3,type_type,1],[0,[0,_q3_,0,wrap_array(0),1],_q2_]]]]]],
     _q9_=map(function(param){var a=param[1];return a},builtin_table);
    caml_call1(IdSet[30],_q9_);
    function tick(state)
     {var scope=state[2],tick=scope[16][1];
      scope[16][1]++;
      return [0,tick,[0,state[1],scope]]}
    function addVar(state,name,typ,attr)
     {var _amZ_=attr[1],_am0_=state[2],match=lookupVariable(_am0_,name);
      if(match)
       {var decl=match[1];
        if(isSameLoc(_amZ_,decl[3]))
         var _am1_=_am0_;
        else
         var
          _amV_=to_string_readable(decl[3]),
          _amW_=idStr(name),
          msg=caml_call2(sprintf(_pW_),_amW_,_amV_),
          _am1_=raiseError(msg,_amZ_)}
      else
       {var new_symbol=[0,name,typ,_amZ_,0],_amX_=_am0_[10][1];
        if(_amX_)
         var t=_amX_[2],h=_amX_[1],first=h,rest=t;
        else
         var first=IdMap[1],rest=0;
        var _amY_=[0,caml_call3(IdMap[4],name,new_symbol,first),rest];
        _am0_[10][1] = _amY_;
        var _am1_=_am0_}
      return [0,state[1],_am1_]}
    function addInstance(state,name,typ,attr)
     {var
       _amU_=state[2],
       new_symbol=[0,name,typ,attr[1],1],
       _amT_=caml_call3(IdMap[4],name,new_symbol,_amU_[9][1]);
      _amU_[9][1] = _amT_;
      _amU_[13][1] = 1;
      return [0,state[1],_amU_]}
    function addFunction(state,name,attr)
     {var _amH_=state[2];
      function add_it(param)
       {var
         _amR_=create$1(0,_amH_[16]),
         new_symbol=
          [0,
           name,
           _amR_[2],
           _amR_[3],
           _amR_[4],
           _amR_[5],
           _amR_[6],
           _amR_[7],
           _amR_[8],
           _amR_[9],
           _amR_[10],
           _amR_[11],
           _amR_[12],
           _amR_[13],
           _amR_[14],
           _amR_[15],
           _amR_[16],
           _amR_[17]];
        new_symbol[15][1] = attr[1];
        new_symbol[14][1] = attr[6];
        var is_init=has(attr[8],_pX_);
        if(attr[2])
         {var _amQ_=addTo(_amH_[11][1],name,is_init);_amH_[11][1] = _amQ_}
        else
         {var _amO_=_amH_[11][1];
          if(caml_call2(IdMap[3],name,_amO_[1]))
           var _amP_=_amO_;
          else
           var
            context_name=[0,_a_(_pL_,caml_new_string("" + _amO_[4])),0],
            _amJ_=_amO_[4] + 1 | 0,
            _amK_=
             is_init?caml_call3(IdMap[4],context_name,name,_amO_[3]):_amO_[3],
            _amL_=_amO_[2],
            _amM_=caml_call1(IdSet[30],[0,name,0]),
            _amN_=caml_call3(IdMap[4],context_name,_amM_,_amL_),
            _amP_=
             [0,
              caml_call3(IdMap[4],name,context_name,_amO_[1]),
              _amN_,
              _amK_,
              _amJ_,
              context_name];
          _amH_[11][1] = _amP_}
        var _amS_=caml_call3(IdMap[4],name,new_symbol,_amH_[8][1]);
        _amH_[8][1] = _amS_;
        return _amH_}
      var match=lookup(0,_amH_,name);
      if(match)
       {var
         match$0=match[1],
         decl=match$0[3],
         path=match$0[1],
         path$0=current(_amH_),
         p=path$0[1],
         current_path=[0,joinErrors(p,name)];
        if(caml_notequal(path,current_path))
         var _amI_=add_it(0);
        else
         {if(isSameLoc(attr[1],decl[15][1]))
           if(caml_equal(current_path,path))
            var _amI_=_amH_,switch$0=1;
           else
            var switch$0=0;
          else
           var switch$0=0;
          if(!switch$0)
           var
            _amF_=to_string_readable(decl[15][1]),
            _amG_=idStr(name),
            msg=caml_call2(sprintf(_pY_),_amG_,_amF_),
            _amI_=raiseError(msg,attr[1])}}
      else
       var _amI_=add_it(0);
      return [0,state[1],_amI_]}
    function lookup$0(kind,state,name){return lookup(kind,state[2],name)}
    function lookupRaise(kind,state,name,loc)
     {var match=lookup(kind,state[2],name);
      if(match){var a=match[1];return a}
      var _amB_=idStr(name),_amC_=kindStr(kind);
      caml_call2(printf(_pR_),_amC_,_amB_);
      var _amD_=idStr(name),_amE_=kindStr(kind);
      return raiseError(caml_call2(sprintf(_pS_),_amE_,_amD_),loc)}
    function getContext(state,name)
     {var match=lookup(0,state[2],name);
      if(match)
       {var match$0=match[1],s=match$0[3],_amA_=s[3][1];
        if(_amA_)
         {var
           parent=_amA_[1],
           match$1=current(parent),
           parent_path=match$1[1],
           ctx=caml_call2(IdMap[23],s[1],parent[11][1][1]);
          return [0,joinErrors(parent_path,ctx)]}
        throw [0,Invalid_argument,_p0_]}
      throw [0,Invalid_argument,_p1_]}
    function isActive$0(state,name)
     {var match=lookup(0,state[2],name);
      if(match){var match$0=match[1],s=match$0[3];return isActive(s)}
      return 0}
    function isLocalInstanceOrMem(state,name)
     {var match=lookupMemInAllContext(state[2],name);return match?1:0}
    function currentScope(state){return current(state[2])}
    function setCurrentType$0(state,typ,single)
     {var _amz_=setCurrentType(state[2],typ,single);return [0,state[1],_amz_]}
    function enter$0(kind,state,func,attr)
     {var _amy_=enter(kind,state[2],func,attr);return [0,state[1],_amy_]}
    function exit$0(state){var _amx_=exit(state[2]);return [0,state[1],_amx_]}
    function empty$1(data)
     {var s=[0,data,create$1(1,[0,0])];
      return fold_left
              (function(s,a)
                {var
                  single=a[4],
                  typ=a[3],
                  kind=a[2],
                  name=a[1],
                  t=enter(kind,s[2],name,init$0),
                  t$0=setCurrentType(t,typ,single),
                  _amw_=exit(t$0);
                 return [0,s[1],_amw_]},
               s,
               builtin_table)}
    function set(state,data){return [0,data,state[2]]}
    function pathFromCurrent(state,path)
     {var
       match=current(state[2]),
       current$0=match[1],
       id=path[1],
       p1=current$0,
       p2=id;
      for(;;)
       {if(p1)
         if(p2)
          {var t2=p2[2],h2=p2[1],t1=p1[2],h1=p1[1];
           if(caml_equal(h1,h2)){var p1=t1,p2=t2;continue}}
        return p2}}
    function derive(state,data){return [0,data,state[2]]}
    function apply(mapper,data,kind)
     {if(mapper)
       {var _amv_=mapper[1];
        if(caml_string_notequal(_amv_[1],_q__))
         {var f=_amv_[2],match=caml_call2(f,data,kind),k=match[2],d=match[1];
          return [0,d,k]}
        var f$0=_amv_[2];
        return caml_call2(f$0,data,kind)}
      return [0,data,kind]}
    function applyExpander(mapper,data,kind)
     {if(mapper)
       {var _amu_=mapper[1];
        if(caml_string_notequal(_amu_[1],_q$_))
         {var f=_amu_[2],match=caml_call2(f,data,kind),k=match[2],d=match[1];
          return [0,d,k]}
        var f$0=_amu_[2];
        return caml_call2(f$0,data,kind)}
      return [0,data,[0,kind,0]]}
    function applyExpanderList(mapper,data,kind_list)
     {var
       _ams_=[0,data,0],
       match=
        fold_left
         (function(param,k)
           {var
             acc=param[2],
             s=param[1],
             match=applyExpander(mapper,s,k),
             kl=match[2],
             s$0=match[1];
            if(kl)
             {var _amt_=kl[1];
              if(typeof _amt_ === "number")
               var switch$1=1;
              else
               if(8 === _amt_[0])
                if(_amt_[1])
                 var switch$0=0,switch$1=0;
                else
                 if(kl[2])
                  var switch$0=0,switch$1=0;
                 else
                  var kl$1=_amt_[2],kl$0=kl$1,switch$0=1,switch$1=0;
               else
                var switch$1=1;
              if(switch$1)var switch$0=0}
            else
             var switch$0=0;
            if(!switch$0)var kl$0=kl;
            return [0,s$0,[0,kl$0,acc]]},
          _ams_,
          kind_list),
       rev_exp_list=match[2],
       state=match[1];
      return [0,state,concat(rev(rev_exp_list))]}
    function make$1(name,mapper){return [0,[0,name,mapper]]}
    function makeExpander(name,mapper){return [0,[0,name,mapper]]}
    function seqMapperFunc(a,b)
     {if(0 === a)return b;
      if(0 === b)return a;
      function mapper3(state,exp)
       {var match=apply(a,state,exp),exp$0=match[2],state$0=match[1];
        return apply(b,state$0,exp$0)}
      return [0,[0,_ra_,mapper3]]}
    function seq(b,a)
     {var _ami_=b[9],_amj_=a[9];
      if(0 === _amj_)
       var _amk_=_ami_;
      else
       if(0 === _ami_)
        var _amk_=_amj_;
       else
        var
         mapper3=
          function(state,exp)
           {var
             match=applyExpander(_amj_,state,exp),
             exp_list=match[2],
             state$0=match[1],
             match$0=applyExpanderList(_ami_,state$0,exp_list),
             exp_list$0=match$0[2],
             state$1=match$0[1];
            return [0,state$1,exp_list$0]},
         _amk_=[0,[0,_rb_,mapper3]];
      var
       _aml_=seqMapperFunc(a[8],b[8]),
       _amm_=seqMapperFunc(a[7],b[7]),
       _amn_=seqMapperFunc(a[6],b[6]),
       _amo_=seqMapperFunc(a[5],b[5]),
       _amp_=seqMapperFunc(a[4],b[4]),
       _amq_=seqMapperFunc(a[3],b[3]),
       _amr_=seqMapperFunc(a[2],b[2]);
      return [0,
              seqMapperFunc(a[1],b[1]),
              _amr_,
              _amq_,
              _amp_,
              _amo_,
              _amn_,
              _amm_,
              _aml_,
              _amk_]}
    function mapper_list(mapper_app,mapper,state,el)
     {var
       _amh_=[0,state,0],
       match=
        fold_left
         (function(param,e)
           {var
             acc=param[2],
             s=param[1],
             match=caml_call3(mapper_app,mapper,s,e),
             e$0=match[2],
             s$0=match[1];
            return [0,s$0,[0,e$0,acc]]},
          _amh_,
          el),
       rev_el=match[2],
       state$0=match[1];
      return [0,state$0,rev(rev_el)]}
    function mapper_opt(mapper_app,mapper,state,e_opt)
     {if(e_opt)
       {var
         e=e_opt[1],
         match=caml_call3(mapper_app,mapper,state,e),
         e$0=match[2],
         state$0=match[1];
        return [0,state$0,[0,e$0]]}
      return [0,state,0]}
    function map_id(mapper,state,id){return apply(mapper[8],state,id)}
    function map_attr(mapper,state,attr)
     {var
       match=mapper_opt(map_vtype,mapper,state,attr[7]),
       tp=match[2],
       state$0=match[1];
      return apply
              (mapper[7],
               state$0,
               [0,
                attr[1],
                attr[2],
                attr[3],
                attr[4],
                attr[5],
                attr[6],
                tp,
                attr[8],
                attr[9]])}
    function map_vtype(mapper,state$6,te)
     {var _amg_=te[1];
      switch(_amg_[0])
       {case 1:
         var
          loc=_amg_[2],
          id=_amg_[1],
          match=map_id(mapper,state$6,id),
          id$0=match[2],
          state=match[1],
          match$5=apply(mapper[1],state,[1,id$0,loc]);
         break;
        case 2:
         var
          loc$0=_amg_[3],
          el=_amg_[2],
          id$1=_amg_[1],
          match$0=map_id(mapper,state$6,id$1),
          id$2=match$0[2],
          state$0=match$0[1],
          match$6=mapper_list(map_vtype,mapper,state$0,el),
          el$0=match$6[2],
          state$1=match$6[1],
          match$5=apply(mapper[1],state$1,[2,id$2,el$0,loc$0]);
         break;
        case 3:
         var
          loc$1=_amg_[3],
          e2=_amg_[2],
          e1=_amg_[1],
          match$1=map_vtype(mapper,state$6,e1),
          e1$0=match$1[2],
          state$2=match$1[1],
          match$2=map_vtype(mapper,state$2,e2),
          e2$0=match$2[2],
          state$3=match$2[1],
          match$5=apply(mapper[1],state$3,[3,e1$0,e2$0,loc$1]);
         break;
        case 4:
         var
          tp=_amg_[1],
          match$3=map_vtype(mapper,state$6,tp),
          tp$0=match$3[2],
          state$4=match$3[1],
          match$5=apply(mapper[1],state$4,[4,tp$0]);
         break;
        case 5:
         var
          elems=_amg_[1],
          match$4=mapper_list(map_vtype,mapper,state$6,elems),
          elems$0=match$4[2],
          state$5=match$4[1],
          match$5=apply(mapper[1],state$5,[5,elems$0]);
         break;
        default:var match$5=[0,state$6,_amg_]}
      var tp$1=match$5[2],state$7=match$5[1];
      te[1] = tp$1;
      return [0,state$7,te]}
    function map_typed_id(mapper,state,t)
     {if(0 === t[0])
       {var
         attr=t[3],
         kind=t[2],
         id=t[1],
         match=map_id(mapper,state,id),
         id$0=match[2],
         state$0=match[1],
         match$0=map_attr(mapper,state$0,attr),
         attr$0=match$0[2],
         state$1=match$0[1];
        return apply(mapper[2],state$1,[0,id$0,kind,attr$0])}
      var
       attr$1=t[4],
       kind$0=t[3],
       tp=t[2],
       id$1=t[1],
       match$1=map_id(mapper,state,id$1),
       id$2=match$1[2],
       state$2=match$1[1],
       match$2=map_vtype(mapper,state$2,tp),
       tp$0=match$2[2],
       state$3=match$2[1],
       match$3=map_attr(mapper,state$3,attr$1),
       attr$2=match$3[2],
       state$4=match$3[1];
      return apply(mapper[2],state$4,[1,id$2,tp$0,kind$0,attr$2])}
    function map_lhs_exp(mapper,state,exp)
     {switch(exp[0])
       {case 0:
         var
          attr=exp[1],
          match=map_attr(mapper,state,attr),
          attr$0=match[2],
          state$0=match[1];
         return apply(mapper[4],state$0,[0,attr$0]);
        case 1:
         var
          attr$1=exp[3],
          tp=exp[2],
          id=exp[1],
          match$0=map_id(mapper,state,id),
          id$0=match$0[2],
          state$1=match$0[1],
          match$9=mapper_opt(map_vtype,mapper,state$1,tp),
          tp$0=match$9[2],
          state$2=match$9[1],
          match$1=map_attr(mapper,state$2,attr$1),
          attr$2=match$1[2],
          state$3=match$1[1];
         return apply(mapper[4],state$3,[1,id$0,tp$0,attr$2]);
        case 2:
         var
          attr$3=exp[2],
          elems=exp[1],
          match$8=mapper_list(map_lhs_exp,mapper,state,elems),
          elems$0=match$8[2],
          state$4=match$8[1],
          match$2=map_attr(mapper,state$4,attr$3),
          attr$4=match$2[2],
          state$5=match$2[1];
         return apply(mapper[4],state$5,[2,elems$0,attr$4]);
        case 3:
         var
          attr$5=exp[3],
          tp$1=exp[2],
          e=exp[1],
          match$3=map_lhs_exp(mapper,state,e),
          e$0=match$3[2],
          state$6=match$3[1],
          match$4=map_vtype(mapper,state$6,tp$1),
          tp$2=match$4[2],
          state$7=match$4[1],
          match$5=map_attr(mapper,state$7,attr$5),
          attr$6=match$5[2],
          state$8=match$5[1];
         return apply(mapper[4],state$8,[3,e$0,tp$2,attr$6]);
        default:
         var
          attr$7=exp[2],
          e$1=exp[1],
          match$6=map_attr(mapper,state,attr$7),
          attr$8=match$6[2],
          state$9=match$6[1],
          match$7=map_lhs_exp(mapper,state$9,e$1),
          e$2=match$7[2],
          state$10=match$7[1];
         return apply(mapper[4],state$10,[4,e$2,attr$8])}}
    function map_val_decl(mapper,state,v)
     {var
       attr=v[3],
       tp=v[2],
       id=v[1],
       match=map_id(mapper,state,id),
       id$0=match[2],
       state$0=match[1],
       match$0=map_vtype(mapper,state$0,tp),
       tp$0=match$0[2],
       state$1=match$0[1],
       match$1=map_attr(mapper,state$1,attr),
       attr$0=match$1[2],
       state$2=match$1[1];
      return [0,state$2,[0,id$0,tp$0,attr$0]]}
    function mapper_app(mapper,state$0,exp)
     {if(typeof exp === "number")
       return apply(mapper[3],state$0,exp);
      else
       switch(exp[0])
        {case 0:
          var
           attr=exp[1],
           match$0=map_attr(mapper,state$0,attr),
           attr$0=match$0[2],
           state$1=match$0[1];
          return apply(mapper[3],state$1,[0,attr$0]);
         case 1:
          var
           attr$1=exp[2],
           b=exp[1],
           match$1=map_attr(mapper,state$0,attr$1),
           attr$2=match$1[2],
           state$2=match$1[1];
          return apply(mapper[3],state$2,[1,b,attr$2]);
         case 2:
          var
           attr$3=exp[2],
           i=exp[1],
           match$2=map_attr(mapper,state$0,attr$3),
           attr$4=match$2[2],
           state$3=match$2[1];
          return apply(mapper[3],state$3,[2,i,attr$4]);
         case 3:
          var
           attr$5=exp[2],
           r=exp[1],
           match$3=map_attr(mapper,state$0,attr$5),
           attr$6=match$3[2],
           state$4=match$3[1];
          return apply(mapper[3],state$4,[3,r,attr$6]);
         case 4:
          var
           attr$7=exp[2],
           s=exp[1],
           match$4=map_attr(mapper,state$0,attr$7),
           attr$8=match$4[2],
           state$5=match$4[1];
          return apply(mapper[3],state$5,[4,s,attr$8]);
         case 5:
          var
           attr$9=exp[2],
           id=exp[1],
           match$5=map_id(mapper,state$0,id),
           id$0=match$5[2],
           state$6=match$5[1],
           match$6=map_attr(mapper,state$6,attr$9),
           attr$10=match$6[2],
           state$7=match$6[1];
          return apply(mapper[3],state$7,[5,id$0,attr$10]);
         case 6:
          var
           attr$11=exp[2],
           elems$0=exp[1],
           elems=copy$0(elems$0),
           _amf_=[0,state$0,0],
           match=
            fold_left$0
             (function(param,e)
               {var
                 i=param[2],
                 s=param[1],
                 match=mapper_app(mapper,s,e),
                 e$0=match[2],
                 s$0=match[1];
                caml_check_bound(elems,i)[i + 1] = e$0;
                return [0,s$0,i + 1 | 0]},
              _amf_,
              elems$0),
           state=match[1],
           match$7=map_attr(mapper,state,attr$11),
           attr$12=match$7[2],
           state$8=match$7[1];
          return apply(mapper[3],state$8,[6,elems,attr$12]);
         case 7:
          var
           attr$13=exp[3],
           e=exp[2],
           op=exp[1],
           match$8=mapper_app(mapper,state$0,e),
           e$0=match$8[2],
           state$9=match$8[1],
           match$9=map_attr(mapper,state$9,attr$13),
           attr$14=match$9[2],
           state$10=match$9[1];
          return apply(mapper[3],state$10,[7,op,e$0,attr$14]);
         case 8:
          var
           attr$15=exp[3],
           args=exp[2],
           op$0=exp[1],
           match$10=map_exp_list(mapper,state$0,args),
           args$0=match$10[2],
           state$11=match$10[1],
           match$11=map_attr(mapper,state$11,attr$15),
           attr$16=match$11[2],
           state$12=match$11[1];
          return apply(mapper[3],state$12,[8,op$0,args$0,attr$16]);
         case 9:
          var
           attr$17=exp[4],
           args$1=exp[3],
           name=exp[2],
           inst=exp[1],
           match$25=mapper_opt(map_id,mapper,state$0,inst),
           inst$0=match$25[2],
           state$13=match$25[1],
           match$12=map_id(mapper,state$13,name),
           name$0=match$12[2],
           state$14=match$12[1],
           match$13=map_exp_list(mapper,state$14,args$1),
           args$2=match$13[2],
           state$15=match$13[1],
           match$14=map_attr(mapper,state$15,attr$17),
           attr$18=match$14[2],
           state$16=match$14[1];
          return apply(mapper[3],state$16,[9,inst$0,name$0,args$2,attr$18]);
         case 10:
          var
           attr$19=exp[4],
           else$0=exp[3],
           then=exp[2],
           cond=exp[1],
           match$15=mapper_app(mapper,state$0,cond),
           cond$0=match$15[2],
           state$17=match$15[1],
           match$16=mapper_app(mapper,state$17,then),
           then$0=match$16[2],
           state$18=match$16[1],
           match$17=mapper_app(mapper,state$18,else$0),
           else$1=match$17[2],
           state$19=match$17[1],
           match$18=map_attr(mapper,state$19,attr$19),
           attr$20=match$18[2],
           state$20=match$18[1];
          return apply(mapper[3],state$20,[10,cond$0,then$0,else$1,attr$20]);
         case 11:
          var
           attr$21=exp[2],
           e$1=exp[1],
           match$19=mapper_app(mapper,state$0,e$1),
           e$2=match$19[2],
           state$21=match$19[1],
           match$20=map_attr(mapper,state$21,attr$21),
           attr$22=match$20[2],
           state$22=match$20[1];
          return apply(mapper[3],state$22,[11,e$2,attr$22]);
         case 12:
          var
           attr$23=exp[2],
           el=exp[1],
           match$21=map_exp_list(mapper,state$0,el),
           el$0=match$21[2],
           state$23=match$21[1],
           match$22=map_attr(mapper,state$23,attr$23),
           attr$24=match$22[2],
           state$24=match$22[1];
          return apply(mapper[3],state$24,[12,el$0,attr$24]);
         default:
          var
           attr$25=exp[3],
           stmt=exp[2],
           id$1=exp[1],
           match$26=mapper_opt(map_id,mapper,state$0,id$1),
           id$2=match$26[2],
           state$25=match$26[1],
           match$23=map_stmt(mapper,state$25,stmt),
           stmt$0=match$23[2],
           state$26=match$23[1],
           match$24=map_attr(mapper,state$26,attr$25),
           attr$26=match$24[2],
           state$27=match$24[1];
          return apply(mapper[3],state$27,[13,id$2,stmt$0,attr$26])}}
    function map_exp_list(mapper,state,exp)
     {return mapper_list(mapper_app,mapper,state,exp)}
    function map_stmt_x(mapper,param)
     {var
       stmt=param[2],
       state=param[1],
       match=applyExpander(mapper[9],state,stmt),
       stmts=match[2],
       state$0=match[1];
      if(stmts)
       {var _ame_=stmts[1];
        if(typeof _ame_ === "number")
         var switch$0=0;
        else
         if(8 === _ame_[0])
          {if(!stmts[2])return [0,state$0,_ame_];var switch$0=1}
         else
          var switch$0=0;
        if(!switch$0)if(!stmts[2])return [0,state$0,_ame_]}
      return [0,state$0,[8,0,stmts,init$0]]}
    function map_stmt(mapper,state$1,stmt)
     {if(typeof stmt === "number")
       return map_stmt_x
               (mapper,map_stmt_subs(mapper,apply(mapper[6],state$1,0)));
      else
       switch(stmt[0])
        {case 0:
          var
           attr=stmt[3],
           rhs=stmt[2],
           lhs=stmt[1],
           match=map_lhs_exp(mapper,state$1,lhs),
           lhs$0=match[2],
           state$2=match[1],
           match$30=mapper_opt(mapper_app,mapper,state$2,rhs),
           rhs$0=match$30[2],
           state$3=match$30[1],
           match$0=map_attr(mapper,state$3,attr),
           attr$0=match$0[2],
           state$4=match$0[1];
          return map_stmt_x
                  (mapper,
                   map_stmt_subs
                    (mapper,apply(mapper[6],state$4,[0,lhs$0,rhs$0,attr$0])));
         case 1:
          var
           attr$1=stmt[3],
           rhs$1=stmt[2],
           lhs$1=stmt[1],
           match$1=map_lhs_exp(mapper,state$1,lhs$1),
           lhs$2=match$1[2],
           state$5=match$1[1],
           match$31=mapper_opt(mapper_app,mapper,state$5,rhs$1),
           rhs$2=match$31[2],
           state$6=match$31[1],
           match$2=map_attr(mapper,state$6,attr$1),
           attr$2=match$2[2],
           state$7=match$2[1];
          return map_stmt_x
                  (mapper,
                   map_stmt_subs
                    (mapper,apply(mapper[6],state$7,[1,lhs$2,rhs$2,attr$2])));
         case 2:
          var
           attr$3=stmt[3],
           stmts=stmt[2],
           cond=stmt[1],
           match$3=mapper_app(mapper,state$1,cond),
           cond$0=match$3[2],
           state$8=match$3[1],
           match$4=map_attr(mapper,state$8,attr$3),
           attr$4=match$4[2],
           state$9=match$4[1];
          return map_stmt_x
                  (mapper,
                   map_stmt_subs
                    (mapper,apply(mapper[6],state$9,[2,cond$0,stmts,attr$4])));
         case 3:
          var
           attr$5=stmt[2],
           e=stmt[1],
           match$5=mapper_app(mapper,state$1,e),
           e$0=match$5[2],
           state$10=match$5[1],
           match$6=map_attr(mapper,state$10,attr$5),
           attr$6=match$6[2],
           state$11=match$6[1];
          return map_stmt_x
                  (mapper,
                   map_stmt_subs
                    (mapper,apply(mapper[6],state$11,[3,e$0,attr$6])));
         case 4:
          var _amb_=stmt[3],_amc_=stmt[2],_amd_=stmt[1];
          if(_amb_)
           {var
             attr$7=stmt[4],
             else$0=_amb_[1],
             match$7=mapper_app(mapper,state$1,_amd_),
             cond$1=match$7[2],
             state$12=match$7[1],
             _al$_=state$12[2];
            _al$_[17][1] = 1;
            var
             state=[0,state$12[1],_al$_],
             match$8=map_attr(mapper,state,attr$7),
             attr$8=match$8[2],
             state$13=match$8[1];
            return map_stmt_x
                    (mapper,
                     map_stmt_subs
                      (mapper,
                       apply(mapper[6],state$13,[4,cond$1,_amc_,[0,else$0],attr$8])))}
          var
           attr$9=stmt[4],
           match$9=mapper_app(mapper,state$1,_amd_),
           cond$2=match$9[2],
           state$14=match$9[1],
           match$10=map_attr(mapper,state$14,attr$9),
           attr$10=match$10[2],
           state$15=match$10[1],
           match$11=
            map_stmt_x
             (mapper,
              map_stmt_subs
               (mapper,apply(mapper[6],state$15,[4,cond$2,_amc_,0,attr$10]))),
           stmt$0=match$11[2],
           state$16=match$11[1],
           _ama_=state$16[2];
          _ama_[17][1] = 0;
          var state$0=[0,state$16[1],_ama_];
          return [0,state$0,stmt$0];
         case 5:
          var
           attr$11=stmt[5],
           ret=stmt[4],
           body=stmt[3],
           args=stmt[2],
           name=stmt[1],
           state$17=enter$0(0,state$1,name,init$0),
           match$12=map_id(mapper,state$17,name),
           name$0=match$12[2],
           state$18=match$12[1],
           match$33=mapper_list(map_typed_id,mapper,state$18,args),
           args$0=match$33[2],
           state$19=match$33[1],
           match$32=mapper_opt(map_vtype,mapper,state$19,ret),
           ret$0=match$32[2],
           state$20=match$32[1],
           match$13=map_attr(mapper,state$20,attr$11),
           attr$12=match$13[2],
           state$21=match$13[1],
           match$14=
            map_stmt_subs
             (mapper,
              apply(mapper[6],state$21,[5,name$0,args$0,body,ret$0,attr$12])),
           stmt$1=match$14[2],
           state$22=match$14[1],
           state$23=exit$0(state$22);
          return map_stmt_x(mapper,[0,state$23,stmt$1]);
         case 6:
          var
           attr$13=stmt[5],
           linkname=stmt[4],
           ret$1=stmt[3],
           args$1=stmt[2],
           name$1=stmt[1],
           state$24=enter$0(0,state$1,name$1,init$0),
           match$15=map_id(mapper,state$24,name$1),
           name$2=match$15[2],
           state$25=match$15[1],
           match$34=mapper_list(map_typed_id,mapper,state$25,args$1),
           args$2=match$34[2],
           state$26=match$34[1],
           match$16=map_vtype(mapper,state$26,ret$1),
           ret$2=match$16[2],
           state$27=match$16[1],
           match$17=map_attr(mapper,state$27,attr$13),
           attr$14=match$17[2],
           state$28=match$17[1],
           match$18=
            map_stmt_subs
             (mapper,
              apply
               (mapper[6],state$28,[6,name$2,args$2,ret$2,linkname,attr$14])),
           stmt$2=match$18[2],
           state$29=match$18[1],
           state$30=exit$0(state$29);
          return map_stmt_x(mapper,[0,state$30,stmt$2]);
         case 7:
          var
           attr$15=stmt[3],
           rhs$3=stmt[2],
           lhs$3=stmt[1],
           match$19=map_lhs_exp(mapper,state$1,lhs$3),
           lhs$4=match$19[2],
           state$31=match$19[1],
           match$20=mapper_app(mapper,state$31,rhs$3),
           rhs$4=match$20[2],
           state$32=match$20[1],
           match$21=map_attr(mapper,state$32,attr$15),
           attr$16=match$21[2],
           state$33=match$21[1];
          return map_stmt_x
                  (mapper,
                   map_stmt_subs
                    (mapper,apply(mapper[6],state$33,[7,lhs$4,rhs$4,attr$16])));
         case 8:
          var
           attr$17=stmt[3],
           stmts$0=stmt[2],
           name$3=stmt[1],
           match$35=mapper_opt(map_id,mapper,state$1,name$3),
           name$4=match$35[2],
           state$34=match$35[1],
           match$22=map_attr(mapper,state$34,attr$17),
           attr$18=match$22[2],
           state$35=match$22[1];
          return map_stmt_x
                  (mapper,
                   map_stmt_subs
                    (mapper,
                     apply(mapper[6],state$35,[8,name$4,stmts$0,attr$18])));
         case 9:
          var
           attr$19=stmt[3],
           members=stmt[2],
           name$5=stmt[1],
           base_name=base(name$5),
           state$36=enter$0(3,state$1,base_name,init$0),
           match$23=map_vtype(mapper,state$36,name$5),
           name$6=match$23[2],
           state$37=match$23[1],
           match$36=mapper_list(map_val_decl,mapper,state$37,members),
           members$0=match$36[2],
           state$38=match$36[1],
           match$24=map_attr(mapper,state$38,attr$19),
           attr$20=match$24[2],
           state$39=match$24[1],
           match$25=apply(mapper[6],state$39,[9,name$6,members$0,attr$20]),
           stmt$3=match$25[2],
           state$40=match$25[1],
           state$41=exit$0(state$40);
          return map_stmt_x(mapper,map_stmt_subs(mapper,[0,state$41,stmt$3]));
         default:
          var
           attr$21=stmt[3],
           tp=stmt[2],
           name$7=stmt[1],
           base_name$0=base(name$7),
           state$42=enter$0(3,state$1,base_name$0,init$0),
           match$26=map_vtype(mapper,state$42,name$7),
           name$8=match$26[2],
           state$43=match$26[1],
           match$27=map_vtype(mapper,state$43,tp),
           tp$0=match$27[2],
           state$44=match$27[1],
           match$28=map_attr(mapper,state$44,attr$21),
           attr$22=match$28[2],
           state$45=match$28[1],
           match$29=apply(mapper[6],state$45,[10,name$8,tp$0,attr$22]),
           stmt$4=match$29[2],
           state$46=match$29[1],
           state$47=exit$0(state$46);
          return map_stmt_x(mapper,map_stmt_subs(mapper,[0,state$47,stmt$4]))}}
    function map_stmt_list(mapper,state,stmts)
     {var
       match$0=mapper_list(map_stmt,mapper,state,stmts),
       stmts$0=match$0[2],
       state$0=match$0[1],
       match=applyExpanderList(mapper[9],state$0,stmts$0),
       stmts$1=match[2],
       state$1=match[1];
      return [0,state$1,stmts$1]}
    function map_stmt_subs(mapper,param)
     {var stmt=param[2],state=param[1];
      if(typeof stmt !== "number")
       switch(stmt[0])
        {case 2:
          var
           attr=stmt[3],
           stmts=stmt[2],
           cond=stmt[1],
           match=map_stmt(mapper,state,stmts),
           stmts$0=match[2],
           state$0=match[1];
          return [0,state$0,[2,cond,stmts$0,attr]];
         case 4:
          var _al8_=stmt[3],_al9_=stmt[2],_al__=stmt[1];
          if(_al8_)
           {var
             attr$0=stmt[4],
             else$0=_al8_[1],
             match$0=map_stmt(mapper,state,_al9_),
             then=match$0[2],
             state$1=match$0[1],
             match$1=map_stmt(mapper,state$1,else$0),
             else$1=match$1[2],
             state$2=match$1[1];
            return [0,state$2,[4,_al__,then,[0,else$1],attr$0]]}
          var
           attr$1=stmt[4],
           match$2=map_stmt(mapper,state,_al9_),
           then$0=match$2[2],
           state$3=match$2[1];
          return [0,state$3,[4,_al__,then$0,0,attr$1]];
         case 5:
          var
           attr$2=stmt[5],
           ret=stmt[4],
           body=stmt[3],
           args=stmt[2],
           name=stmt[1],
           match$3=map_stmt(mapper,state,body),
           body$0=match$3[2],
           state$4=match$3[1];
          return [0,state$4,[5,name,args,body$0,ret,attr$2]];
         case 8:
          var
           attr$3=stmt[3],
           stmts$1=stmt[2],
           name$0=stmt[1],
           match$4=map_stmt_list(mapper,state,stmts$1),
           stmts$2=match$4[2],
           state$5=match$4[1];
          return [0,state$5,[8,name$0,stmts$2,attr$3]]
         }
      return [0,state,stmt]}
    function map_exp_to_stmt(mapper,state,exp)
     {var match=mapper_app(mapper,state,exp),exp$0=match[2],state$0=match[1];
      return [0,state$0,exp$0]}
    var
     lhs_exp=
      make$1
       (_rc_,
        function(state,exp)
         {if(1 === exp[0])
           {var id=exp[1];
            return [0,set(state,caml_call2(IdSet[4],id,state[1])),exp]}
          return [0,state,exp]}),
     exp=
      make$1
       (_rd_,
        function(state,exp)
         {if(typeof exp !== "number" && 5 === exp[0])
           {var id=exp[1];
            return [0,set(state,caml_call2(IdSet[4],id,state[1])),exp]}
          return [0,state,exp]}),
     mapper=
      [0,
       default_mapper[1],
       default_mapper[2],
       exp,
       lhs_exp,
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       default_mapper[9]],
     state$0=empty$1(IdSet[1]),
     attr=
      make$1
       (_re_,
        function(state,attr)
         {var s=state[1];return [0,set(state,merge(s,attr[1])),attr]}),
     mapper$0=
      [0,
       default_mapper[1],
       default_mapper[2],
       default_mapper[3],
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       attr,
       default_mapper[8],
       default_mapper[9]];
    function fromExp(e)
     {var
       dummy_env=empty$1(default$0),
       match=mapper_app(mapper$0,dummy_env,e),
       s=match[1];
      return s[1]}
    function fromLhsExp(e)
     {var
       dummy_env=empty$1(default$0),
       match=map_lhs_exp(mapper$0,dummy_env,e),
       s=match[1];
      return s[1]}
    function fromExp$0(e)
     {if(typeof e === "number")
       return init$0;
      else
       switch(e[0])
        {case 0:var attr=e[1];break;
         case 9:
         case 10:var attr=e[4];break;
         case 7:
         case 8:
         case 13:var attr=e[3];break;
         default:var attr=e[2]}
      return attr}
    function fromLhsExp$0(e)
     {switch(e[0])
       {case 0:var attr=e[1];break;
        case 1:
        case 3:var attr=e[3];break;
        default:var attr=e[2]}
      return attr}
    var
     exp$0=
      make$1
       (_rf_,
        function(state,exp)
         {if(typeof exp !== "number")
           switch(exp[0])
            {case 5:
              var _al4_=exp[1];
              if(_al4_)
               {var _al5_=_al4_[2];
                if(_al5_)
                 if(!_al5_[2])
                  {var id=_al4_[1];
                   return [0,
                           set(state,caml_call2(IdSet[4],[0,id,0],state[1])),
                           exp]}}
              break;
             case 9:
              var _al6_=exp[2];
              if(_al6_)
               {var _al7_=_al6_[2];
                if(_al7_)
                 if(!_al7_[2])
                  {var id$0=_al6_[1];
                   return [0,
                           set(state,caml_call2(IdSet[4],[0,id$0,0],state[1])),
                           exp]}}
              break
             }
          return [0,state,exp]}),
     mapper$1=
      [0,
       default_mapper[1],
       default_mapper[2],
       exp$0,
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       default_mapper[9]];
    function expLoc(e){return [246,function(_al3_){return fromExp(e)}]}
    function expOptLoc(e)
     {return [246,
              function(_al2_)
               {if(e){var e$0=e[1];return fromExp(e$0)}return default$0}]}
    function unifyRaise(loc,t1,t2)
     {var _alX_=1 - p(t1,t2);
      if(_alX_)
       {var
         _alY_=typeStr(t1),
         _alZ_=typeStr(t2),
         msg=caml_call2(sprintf(_rg_),_alZ_,_alY_),
         _al0_=caml_obj_tag(loc),
         _al1_=250 === _al0_?loc[1]:246 === _al0_?force_lazy_block(loc):loc;
        return raiseError(msg,_al1_)}
      return _alX_}
    function checkType(loc,env,typ)
     {var typ$0=typ;
      for(;;)
       {var _alE_=typ$0[1];
        switch(_alE_[0])
         {case 0:return 0;
          case 1:
           var name=_alE_[1];
           try
            {lookup$0(3,env,name);var _alI_=0;return _alI_}
           catch(_alW_)
            {var
              _alF_=idStr(name),
              msg=caml_call1(sprintf(_rh_),_alF_),
              _alG_=caml_obj_tag(loc),
              _alH_=
               250 === _alG_?loc[1]:246 === _alG_?force_lazy_block(loc):loc;
             return raiseError(msg,_alH_)}
          case 2:
           var _alJ_=_alE_[1];
           if(_alJ_)
            {var _alK_=_alJ_[1];
             if(caml_string_notequal(_alK_,_ri_))
              {if(!caml_string_notequal(_alK_,_rj_))
                if(!_alJ_[2])
                 {var elems=_alE_[2];
                  return iter
                          (function(_alV_){return checkType(loc,env,_alV_)},elems)}}
             else
              if(!_alJ_[2])
               {var _alO_=_alE_[2];
                if(_alO_)
                 {var _alP_=_alO_[2];
                  if(_alP_)
                   {var _alQ_=_alO_[1];
                    if(6 === _alP_[1][1][0])
                     if(!_alP_[2]){var typ$0=_alQ_;continue}}}
                var
                 _alR_=typeStr(typ$0),
                 msg$1=caml_call1(sprintf(_rl_),_alR_),
                 _alS_=caml_obj_tag(loc),
                 _alT_=
                  250 === _alS_?loc[1]:246 === _alS_?force_lazy_block(loc):loc;
                return raiseError(msg$1,_alT_)}}
           var
            _alL_=idStr(_alJ_),
            msg$0=caml_call1(sprintf(_rk_),_alL_),
            _alM_=caml_obj_tag(loc),
            _alN_=250 === _alM_?loc[1]:246 === _alM_?force_lazy_block(loc):loc;
           return raiseError(msg$0,_alN_);
          case 3:
           var typ$1=_alE_[2],t1=_alE_[1];
           checkType(loc,env,t1);
           var typ$0=typ$1;
           continue;
          case 4:var typ$2=_alE_[1],typ$0=typ$2;continue;
          case 5:
           var elems$0=_alE_[1];
           return iter
                   (function(_alU_){return checkType(loc,env,_alU_)},elems$0);
          default:return 0}}}
    function inferLhsExp(mem_var,env,e)
     {var e$0=e;
      for(;;)
       switch(e$0[0])
        {case 0:
          var attr=e$0[1],typ=newvar(0);
          return [0,
                  [0,
                   [0,
                    attr[1],
                    attr[2],
                    attr[3],
                    attr[4],
                    attr[5],
                    attr[6],
                    [0,typ],
                    attr[8],
                    attr[9]]],
                  typ];
         case 1:
          var _alx_=e$0[2],_aly_=e$0[1];
          if(_alx_)
           {var attr$0=e$0[3],typ$0=_alx_[1];
            return [0,
                    [1,
                     _aly_,
                     [0,typ$0],
                     [0,
                      attr$0[1],
                      attr$0[2],
                      attr$0[3],
                      attr$0[4],
                      attr$0[5],
                      attr$0[6],
                      [0,typ$0],
                      attr$0[8],
                      attr$0[9]]],
                    typ$0]}
          var attr$1=e$0[3],match=lookupVariable(env[2],_aly_);
          if(match)
           var var$0=match[1],typ$1=var$0[2];
          else
           {if(3851765 === mem_var)
             var switch$0=0;
            else
             if(4298439 === mem_var)
              var switch$0=0;
             else
              var
               _alz_=idStr(_aly_),
               msg=caml_call1(sprintf(_rn_),_alz_),
               typ$1=raiseError(msg,attr$1[1]),
               switch$0=1;
            if(!switch$0)var typ$1=newvar(0)}
          return [0,
                  [1,
                   _aly_,
                   [0,typ$1],
                   [0,
                    attr$1[1],
                    attr$1[2],
                    attr$1[3],
                    attr$1[4],
                    attr$1[5],
                    attr$1[6],
                    [0,typ$1],
                    attr$1[8],
                    attr$1[9]]],
                  typ$1];
         case 2:
          var
           attr$2=e$0[2],
           elems=e$0[1],
           match$0=
            fold_left
             (function(param,a)
               {var
                 tpl=param[2],
                 elems=param[1],
                 match=inferLhsExp(mem_var,env,a),
                 typ=match[2],
                 a$0=match[1];
                return [0,[0,a$0,elems],[0,typ,tpl]]},
              _ro_,
              elems),
           tpl=match$0[2],
           elems$0=match$0[1],
           typ$2=[0,[2,_rp_,rev(tpl),0]],
           _alA_=
            [0,
             attr$2[1],
             attr$2[2],
             attr$2[3],
             attr$2[4],
             attr$2[5],
             attr$2[6],
             [0,typ$2],
             attr$2[8],
             attr$2[9]];
          return [0,[2,rev(elems$0),_alA_],typ$2];
         case 3:
          var typ$3=e$0[2],e$1=e$0[1];
          checkType([246,function(_alD_){return fromLhsExp(e$1)}],env,typ$3);
          var
           match$1=inferLhsExp(mem_var,env,e$1),
           tpi=match$1[2],
           e$2=match$1[1];
          if(p(typ$3,tpi))return [0,e$2,tpi];
          var
           _alB_=typeStr(tpi),
           _alC_=typeStr(typ$3),
           msg$0=caml_call2(sprintf(_rq_),_alC_,_alB_);
          return raiseError(msg$0,fromLhsExp(e$1));
         default:var e$3=e$0[1],e$0=e$3;continue}}
    function addLhsToEnv(mem_var,env,lhs)
     {var lhs$0=lhs;
      for(;;)
       switch(lhs$0[0])
        {case 0:return env;
         case 1:
          var _alv_=lhs$0[2],_alw_=lhs$0[1];
          if(_alv_)
           {var attr=lhs$0[3],typ=_alv_[1];
            if(3851765 === mem_var)
             {var _als_=attr[1],_alt_=env[2],match=lookupVal(_alt_,_alw_);
              if(match)
               var
                decl=match[1],
                _alp_=to_string_readable(decl[3]),
                _alq_=idStr(_alw_),
                msg=caml_call2(sprintf(_pV_),_alq_,_alp_),
                _alu_=raiseError(msg,_als_);
              else
               {var
                 new_symbol=[0,_alw_,typ,_als_,0],
                 _alr_=caml_call3(IdMap[4],_alw_,new_symbol,_alt_[9][1]);
                _alt_[9][1] = _alr_;
                _alt_[13][1] = 1;
                var _alu_=_alt_}
              return [0,env[1],_alu_]}
            return addVar(env,_alw_,typ,attr)}
          return env;
         case 2:
          var elems=lhs$0[1];
          return fold_left
                  (function(e,a){return addLhsToEnv(mem_var,e,a)},env,elems);
         case 3:var lhs$1=lhs$0[1],lhs$0=lhs$1;continue;
         default:var lhs$2=lhs$0[1],lhs$0=lhs$2;continue}}
    function addArgsToEnv(env,args)
     {if(args)
       {var _aln_=args[1];
        if(0 === _aln_[0])
         {var
           t=args[2],
           attr=_aln_[3],
           kind=_aln_[2],
           id=_aln_[1],
           typ=newvar(0),
           env$0=addVar(env,id,typ,attr),
           match=addArgsToEnv(env$0,t),
           env$1=match[3],
           inner_typ=match[2],
           inner_args=match[1];
          return [0,
                  [0,[1,id,typ,kind,attr],inner_args],
                  [0,typ,inner_typ],
                  env$1]}
        var
         t$0=args[2],
         attr$0=_aln_[4],
         kind$0=_aln_[3],
         typ$0=_aln_[2],
         id$0=_aln_[1];
        checkType([246,function(_alo_){return location(typ$0)}],env,typ$0);
        var
         env$2=addVar(env,id$0,typ$0,attr$0),
         match$0=addArgsToEnv(env$2,t$0),
         env$3=match$0[3],
         inner_typ$0=match$0[2],
         inner_args$0=match$0[1];
        return [0,
                [0,[1,id$0,typ$0,kind$0,attr$0],inner_args$0],
                [0,typ$0,inner_typ$0],
                env$3]}
      return [0,0,0,env]}
    function getReturnType(typ$0)
     {if(typeof typ$0 === "number")
       return typ;
      else
       {if(0 === typ$0[0]){var t=typ$0[1];return t}
        var t$0=typ$0[1];
        return t$0}}
    function inferApply(loc,args$1,args_typ$1,ret_type,fn_args$1,fn_ret_type)
     {var n_args=length(args_typ$1),n_fn_args=length(fn_args$1);
      if(n_args !== n_fn_args)
       {var
         msg=caml_call2(sprintf(_rt_),n_fn_args,n_args),
         _all_=caml_obj_tag(loc),
         _alm_=250 === _all_?loc[1]:246 === _all_?force_lazy_block(loc):loc;
        raiseError(msg,_alm_)}
      var args=args$1,args_typ=args_typ$1,fn_args=fn_args$1;
      for(;;)
       {if(args)
         if(args_typ)
          {if(fn_args)
            {var
              fn_args$0=fn_args[2],
              fn_arg=fn_args[1],
              args_typ$0=args_typ[2],
              arg_typ=args_typ[1],
              args$0=args[2],
              arg=args[1];
             unifyRaise(expLoc(arg),fn_arg,arg_typ);
             var args=args$0,args_typ=args_typ$0,fn_args=fn_args$0;
             continue}
           var switch$0=0}
         else
          var switch$0=0;
        else
         var switch$0=args_typ?0:fn_args?0:1;
        if(!switch$0)failwith(_ru_);
        return unifyRaise(loc,fn_ret_type,ret_type)}}
    function inferExp(env$2,e)
     {var e$0=e;
      for(;;)
       if(typeof e$0 === "number")
        return [0,0,env$2,typ];
       else
        switch(e$0[0])
         {case 0:
           var attr=e$0[1];
           return [0,
                   [0,
                    [0,
                     attr[1],
                     attr[2],
                     attr[3],
                     attr[4],
                     attr[5],
                     attr[6],
                     [0,typ],
                     attr[8],
                     attr[9]]],
                   env$2,
                   typ];
          case 1:
           var attr$0=e$0[2],v=e$0[1];
           return [0,
                   [1,
                    v,
                    [0,
                     attr$0[1],
                     attr$0[2],
                     attr$0[3],
                     attr$0[4],
                     attr$0[5],
                     attr$0[6],
                     [0,typ$0],
                     attr$0[8],
                     attr$0[9]]],
                   env$2,
                   typ$0];
          case 2:
           var attr$1=e$0[2],v$0=e$0[1];
           return [0,
                   [2,
                    v$0,
                    [0,
                     attr$1[1],
                     attr$1[2],
                     attr$1[3],
                     attr$1[4],
                     attr$1[5],
                     attr$1[6],
                     [0,ret$0],
                     attr$1[8],
                     attr$1[9]]],
                   env$2,
                   ret$0];
          case 3:
           var attr$2=e$0[2],v$1=e$0[1];
           return [0,
                   [3,
                    v$1,
                    [0,
                     attr$2[1],
                     attr$2[2],
                     attr$2[3],
                     attr$2[4],
                     attr$2[5],
                     attr$2[6],
                     [0,real_type],
                     attr$2[8],
                     attr$2[9]]],
                   env$2,
                   real_type];
          case 4:
           var attr$3=e$0[2],s=e$0[1];
           return [0,
                   [4,
                    s,
                    [0,
                     attr$3[1],
                     attr$3[2],
                     attr$3[3],
                     attr$3[4],
                     attr$3[5],
                     attr$3[6],
                     [0,typ$1],
                     attr$3[8],
                     attr$3[9]]],
                   env$2,
                   typ$1];
          case 5:
           var
            attr$4=e$0[2],
            id=e$0[1],
            _ak__=attr$4[1],
            match=lookupVariable(env$2[2],id);
           if(match)
            var a=match[1],var$0=a;
           else
            {var _ak8_=idStr(id);
             caml_call1(printf(_pT_),_ak8_);
             var
              _ak9_=idStr(id),
              var$0=raiseError(caml_call1(sprintf(_pU_),_ak9_),_ak__)}
           return [0,
                   [5,
                    id,
                    [0,
                     attr$4[1],
                     attr$4[2],
                     attr$4[3],
                     attr$4[4],
                     attr$4[5],
                     attr$4[6],
                     [0,var$0[2]],
                     attr$4[8],
                     attr$4[9]]],
                   env$2,
                   var$0[2]];
          case 6:
           var
            attr$5=e$0[2],
            elems=e$0[1],
            atype=newvar(0),
            elems$2=copy$0(elems),
            _alg_=[0,env$2,0],
            match$19=
             fold_left$0
              (function(param,a)
                {var
                  i=param[2],
                  env=param[1],
                  match=inferExp(env,a),
                  typ=match[3],
                  env$0=match[2],
                  a$0=match[1],
                  loc=expLoc(a$0);
                 if(1 - p(atype,typ))
                  {var
                    _alh_=typeStr(atype),
                    _ali_=typeStr(typ),
                    msg=caml_call2(sprintf(_rr_),_ali_,_alh_),
                    _alj_=caml_obj_tag(loc),
                    _alk_=
                     250 === _alj_?loc[1]:246 === _alj_?force_lazy_block(loc):loc;
                   raiseError(msg,_alk_)}
                 caml_check_bound(elems$2,i)[i + 1] = a$0;
                 return [0,env$0,i + 1 | 0]},
               _alg_,
               elems),
            n$1=match$19[2],
            env$13=match$19[1],
            typ$3=[0,[2,_rw_,[0,atype,[0,[0,[6,n$1,0]],0]],0]];
           return [0,
                   [6,
                    elems$2,
                    [0,
                     attr$5[1],
                     attr$5[2],
                     attr$5[3],
                     attr$5[4],
                     attr$5[5],
                     attr$5[6],
                     [0,typ$3],
                     attr$5[8],
                     attr$5[9]]],
                   env$13,
                   typ$3];
          case 7:
           var
            attr$6=e$0[3],
            arg$0=e$0[2],
            op=e$0[1],
            match$1=inferExp(env$2,arg$0),
            arg_type=match$1[3],
            env$3=match$1[2],
            arg$1=match$1[1],
            ret_type=newvar(0),
            _ak$_=attr$6[1],
            match$2=lookupRaise(2,env$2,[0,_a_(_ry_,_a_(op,_rx_)),0],_ak$_),
            fn_type=match$2[2],
            match$3=stripArrow(fn_type),
            fn_ret=match$3[2],
            fn_args=match$3[1];
           inferApply
            (expLoc(e$0),[0,arg$1,0],[0,arg_type,0],ret_type,fn_args,fn_ret);
           return [0,
                   [7,
                    op,
                    arg$1,
                    [0,
                     attr$6[1],
                     attr$6[2],
                     attr$6[3],
                     attr$6[4],
                     attr$6[5],
                     attr$6[6],
                     [0,ret_type],
                     attr$6[8],
                     attr$6[9]]],
                   env$3,
                   ret_type];
          case 8:
           var _ala_=e$0[2],_alb_=e$0[1];
           if(_ala_)
            {var _alc_=_ala_[2];
             if(_alc_)
              if(!_alc_[2])
               {var
                 attr$8=e$0[3],
                 e2=_alc_[1],
                 e1=_ala_[1],
                 match$6=inferExp(env$2,e1),
                 e1_typ=match$6[3],
                 env$5=match$6[2],
                 e1$0=match$6[1],
                 match$7=inferExp(env$5,e2),
                 e2_typ=match$7[3],
                 env$6=match$7[2],
                 e2$0=match$7[1],
                 ret_type$0=newvar(0),
                 match$8=lookupRaise(2,env$2,[0,_alb_,0],attr$8[1]),
                 fn_type$1=match$8[2],
                 match$9=stripArrow(fn_type$1),
                 fn_ret$0=match$9[2],
                 fn_args$0=match$9[1];
                inferApply
                 (expLoc(e$0),
                  [0,e1$0,[0,e2$0,0]],
                  [0,e1_typ,[0,e2_typ,0]],
                  ret_type$0,
                  fn_args$0,
                  fn_ret$0);
                return [0,
                        [8,
                         _alb_,
                         [0,e1$0,[0,e2$0,0]],
                         [0,
                          attr$8[1],
                          attr$8[2],
                          attr$8[3],
                          attr$8[4],
                          attr$8[5],
                          attr$8[6],
                          [0,ret_type$0],
                          attr$8[8],
                          attr$8[9]]],
                        env$6,
                        ret_type$0]}}
           var
            attr$7=e$0[3],
            match$4=inferExpList(env$2,_ala_),
            types$1=match$4[3],
            env$4=match$4[2],
            args$1=match$4[1],
            match$5=lookupRaise(2,env$2,[0,_alb_,0],attr$7[1]),
            fn_type$0=match$5[2],
            _ald_=stripArrow(fn_type$0),
            _ale_=_ald_[1];
           if(_ale_)
            {var _alf_=_ale_[2];
             if(_alf_)
              if(_alf_[2])
               var switch$0=0;
              else
               {var ret=_ald_[2],arg2=_alf_[1],arg1=_ale_[1];
                if(p(arg1,arg2))
                 if(p(arg2,ret))var ret$1=ret,switch$1=1;else var switch$1=0;
                else
                 var switch$1=0;
                if(!switch$1)var ret$1=failwith(_rA_);
                var common_type=ret$1,switch$0=1}
             else
              var switch$0=0}
           else
            var switch$0=0;
           if(!switch$0)var common_type=failwith(_rz_);
           var args=args$1,types=types$1;
           for(;;)
            {if(args)
              {if(types)
                {var
                  types$0=types[2],
                  typ$2=types[1],
                  args$0=args[2],
                  arg=args[1];
                 unifyRaise(expLoc(arg),typ$2,common_type);
                 var args=args$0,types=types$0;
                 continue}}
             else
              if(!types)
               return [0,
                       [8,
                        _alb_,
                        args$1,
                        [0,
                         attr$7[1],
                         attr$7[2],
                         attr$7[3],
                         attr$7[4],
                         attr$7[5],
                         attr$7[6],
                         [0,common_type],
                         attr$7[8],
                         attr$7[9]]],
                       env$4,
                       common_type];
             throw [0,Invalid_argument,_rm_]}
          case 9:
           var
            attr$9=e$0[4],
            args$2=e$0[3],
            fname=e$0[2],
            name=e$0[1],
            match$10=inferExpList(env$2,args$2),
            types$2=match$10[3],
            env$7=match$10[2],
            args$3=match$10[1],
            ret_type$1=newvar(0),
            match$11=lookupRaise(0,env$7,fname,attr$9[1]),
            ft=match$11[3],
            fn_type$2=match$11[2],
            match$12=stripArrow(fn_type$2),
            fn_ret$1=match$12[2],
            fn_args$1=match$12[1],
            isactive=isActive(ft),
            typ$4=[0,[1,fname,0]];
           if(isactive)
            if(name)
             var
              n=name[1],
              env=addInstance(env$7,n,typ$4,attr$9),
              match$13=[0,env,name];
            else
             var
              match$0=tick(env$7),
              env$0=match$0[2],
              n$0=match$0[1],
              inst_name=[0,_a_(_rv_,caml_new_string("" + n$0)),0],
              env$1=addInstance(env$0,inst_name,typ$4,attr$9),
              match$13=[0,env$1,[0,inst_name]];
           else
            var match$13=[0,env$7,0];
           var name$0=match$13[2],env$8=match$13[1];
           inferApply
            (expLoc(e$0),args$3,types$2,ret_type$1,fn_args$1,fn_ret$1);
           return [0,
                   [9,
                    name$0,
                    fname,
                    args$3,
                    [0,
                     attr$9[1],
                     attr$9[2],
                     attr$9[3],
                     attr$9[4],
                     attr$9[5],
                     attr$9[6],
                     [0,ret_type$1],
                     attr$9[8],
                     attr$9[9]]],
                   env$8,
                   ret_type$1];
          case 10:
           var
            attr$10=e$0[4],
            else$0=e$0[3],
            then=e$0[2],
            cond=e$0[1],
            match$14=inferExp(env$2,cond),
            cond_type=match$14[3],
            env$9=match$14[2],
            cond$0=match$14[1],
            match$15=inferExp(env$9,then),
            then_type=match$15[3],
            env$10=match$15[2],
            then$0=match$15[1],
            match$16=inferExp(env$10,else$0),
            else_type=match$16[3],
            env$11=match$16[2],
            else$1=match$16[1];
           unifyRaise(expLoc(cond$0),typ$0,cond_type);
           unifyRaise(expLoc(else$1),then_type,else_type);
           return [0,
                   [10,
                    cond$0,
                    then$0,
                    else$1,
                    [0,
                     attr$10[1],
                     attr$10[2],
                     attr$10[3],
                     attr$10[4],
                     attr$10[5],
                     attr$10[6],
                     [0,then_type],
                     attr$10[8],
                     attr$10[9]]],
                   env$11,
                   then_type];
          case 11:var e$1=e$0[1],e$0=e$1;continue;
          case 12:
           var
            attr$11=e$0[2],
            elems$0=e$0[1],
            match$17=inferExpList(env$2,elems$0),
            types$3=match$17[3],
            env$12=match$17[2],
            elems$1=match$17[1],
            typ$5=[0,[2,_rB_,types$3,0]];
           return [0,
                   [12,
                    elems$1,
                    [0,
                     attr$11[1],
                     attr$11[2],
                     attr$11[3],
                     attr$11[4],
                     attr$11[5],
                     attr$11[6],
                     [0,typ$5],
                     attr$11[8],
                     attr$11[9]]],
                   env$12,
                   typ$5];
          default:
           var
            attr$12=e$0[3],
            stmt=e$0[2],
            name$1=e$0[1],
            match$18=inferStmt(env$2,0,stmt),
            ret_type$2=match$18[3],
            stmt$0=match$18[1],
            typ$6=getReturnType(ret_type$2);
           return [0,
                   [13,
                    name$1,
                    stmt$0,
                    [0,
                     attr$12[1],
                     attr$12[2],
                     attr$12[3],
                     attr$12[4],
                     attr$12[5],
                     attr$12[6],
                     [0,typ$6],
                     attr$12[8],
                     attr$12[9]]],
                   env$2,
                   typ$6]}}
    function inferExpList(env,elems)
     {var
       _ak6_=[0,0,env,0],
       match=
        fold_left
         (function(param,a)
           {var
             types=param[3],
             env=param[2],
             elems=param[1],
             match=inferExp(env,a),
             typ=match[3],
             env$0=match[2],
             a$0=match[1];
            return [0,[0,a$0,elems],env$0,[0,typ,types]]},
          _ak6_,
          elems),
       types=match[3],
       env$0=match[2],
       elems$0=match[1],
       _ak7_=rev(types);
      return [0,rev(elems$0),env$0,_ak7_]}
    function inferOptExp(env,e)
     {if(e)
       {var
         e$0=e[1],
         match=inferExp(env,e$0),
         typ=match[3],
         env$0=match[2],
         e$1=match[1];
        return [0,[0,e$1],env$0,typ]}
      return [0,0,env,newvar(0)]}
    function inferStmt(env$5,ret_type,stmt)
     {if(typeof stmt === "number")
       return [0,0,env$5,ret_type];
      else
       switch(stmt[0])
        {case 0:
          var
           attr=stmt[3],
           rhs=stmt[2],
           lhs=stmt[1],
           match$1=inferLhsExp(4298439,env$5,lhs),
           lhs_typ=match$1[2],
           lhs$0=match$1[1],
           match$2=inferOptExp(env$5,rhs),
           rhs_typ=match$2[3],
           env$6=match$2[2],
           rhs$0=match$2[1];
          unifyRaise(expOptLoc(rhs),lhs_typ,rhs_typ);
          var env$7=addLhsToEnv(4298439,env$6,lhs$0);
          return [0,[0,lhs$0,rhs$0,attr],env$7,ret_type];
         case 1:
          var
           attr$0=stmt[3],
           rhs$1=stmt[2],
           lhs$1=stmt[1],
           match$3=inferLhsExp(3851765,env$5,lhs$1),
           lhs_typ$0=match$3[2],
           lhs$2=match$3[1],
           env$8=addLhsToEnv(3851765,env$5,lhs$2),
           match$4=inferOptExp(env$8,rhs$1),
           rhs_typ$0=match$4[3],
           env$9=match$4[2],
           rhs$2=match$4[1];
          unifyRaise(expOptLoc(rhs$2),lhs_typ$0,rhs_typ$0);
          return [0,[1,lhs$2,rhs$2,attr$0],env$9,ret_type];
         case 2:
          var
           attr$1=stmt[3],
           body=stmt[2],
           cond=stmt[1],
           match$5=inferExp(env$5,cond),
           cond_type=match$5[3],
           env$10=match$5[2],
           cond$0=match$5[1];
          unifyRaise(expLoc(cond$0),typ$0,cond_type);
          var
           match$6=inferStmt(env$10,ret_type,body),
           ret_type$0=match$6[3],
           env$11=match$6[2],
           body$0=match$6[1];
          return [0,[2,cond$0,body$0,attr$1],env$11,ret_type$0];
         case 3:
          var
           attr$2=stmt[2],
           e=stmt[1],
           match$7=inferExp(env$5,e),
           typ$1=match$7[3],
           env$12=match$7[2],
           e$0=match$7[1],
           match$8=[1,typ$1],
           loc$0=expLoc(e);
          if(typeof ret_type === "number")
           var ret_type$1=match$8,switch$0=2;
          else
           if(0 === ret_type[0])
            {var _akW_=ret_type[1];
             if(typeof match$8 === "number")
              var switch$0=0;
             else
              if(0 === match$8[0])
               {var gt=match$8[1];
                unifyRaise(loc$0,gt,_akW_);
                var ret_type$1=[0,_akW_],switch$0=2}
              else
               var rt=match$8[1],gt$0=_akW_,switch$0=1}
           else
            {var _akX_=ret_type[1];
             if(typeof match$8 === "number")
              var switch$0=0;
             else
              if(0 === match$8[0])
               var rt=_akX_,gt$0=match$8[1],switch$0=1;
              else
               {var gt$1=match$8[1];
                unifyRaise(loc$0,gt$1,_akX_);
                var ret_type$1=[1,_akX_],switch$0=2}}
          switch(switch$0)
           {case 0:var ret_type$1=ret_type;break;
            case 1:unifyRaise(loc$0,gt$0,rt);var ret_type$1=[1,rt];break
            }
          return [0,[3,e$0,attr$2],env$12,ret_type$1];
         case 4:
          var
           attr$3=stmt[4],
           else$0=stmt[3],
           then=stmt[2],
           cond$1=stmt[1],
           match$9=inferExp(env$5,cond$1),
           cond_type$0=match$9[3],
           env$13=match$9[2],
           cond$2=match$9[1];
          unifyRaise(expLoc(cond$2),typ$0,cond_type$0);
          var
           match$10=inferStmt(env$13,ret_type,then),
           ret_type$2=match$10[3],
           env$14=match$10[2],
           then$0=match$10[1];
          if(else$0)
           var
            s$0=else$0[1],
            match$21=inferStmt(env$14,ret_type$2,s$0),
            s_ret_type=match$21[3],
            s_type=match$21[2],
            s$1=match$21[1],
            match$11=[0,[0,s$1],s_type,s_ret_type];
          else
           var match$11=[0,0,env$14,ret_type$2];
          var ret_type$3=match$11[3],env$15=match$11[2],else$1=match$11[1];
          return [0,[4,cond$2,then$0,else$1,attr$3],env$15,ret_type$3];
         case 5:
          var
           attr$4=stmt[5],
           ret_type$4=stmt[4],
           body$1=stmt[3],
           args=stmt[2],
           name=stmt[1],
           env$16=addFunction(env$5,name,attr$4),
           env$17=enter$0(0,env$16,name,attr$4),
           match$12=addArgsToEnv(env$17,args),
           env$18=match$12[3],
           types$0=match$12[2],
           args$0=match$12[1],
           match$13=fixTypeList(0,types$0),
           table$0=match$13[2],
           types$1=match$13[1];
          if(ret_type$4)
           var
            t=ret_type$4[1],
            match=fixType(table$0,t),
            table=match[2],
            t$0=match[1],
            match$14=[0,[0,t$0],table];
          else
           var match$14=[0,0,table$0];
          var
           ret_type$5=match$14[1],
           possible_ret_type=newvar(0),
           typ$2=makeArrowType(possible_ret_type,types$1),
           env$19=setCurrentType$0(env$18,typ$2,1);
          if(ret_type$5)var s=ret_type$5[1],_ak2_=[0,s];else var _ak2_=0;
          var
           match$15=inferStmt(env$19,_ak2_,body$1),
           body_ret=match$15[3],
           env$20=match$15[2],
           body$2=match$15[1],
           last_type=getReturnType(body_ret),
           env$21=exit$0(env$20),
           loc=[246,function(_ak5_){return attr$4[1]}];
          if(ret_type$5)
           {var _akY_=ret_type$5[1];
            if(typeof body_ret === "number")
             var switch$1=0;
            else
             if(1 === body_ret[0])
              var switch$1=0;
             else
              {var rt$0=body_ret[1];
               if(0 === compare$6(_akY_,rt$0))
                {var
                  _akZ_=typeStr(_akY_),
                  msg=caml_call1(sprintf(_rs_),_akZ_),
                  _ak0_=caml_obj_tag(loc),
                  _ak1_=
                   250 === _ak0_?loc[1]:246 === _ak0_?force_lazy_block(loc):loc;
                 raiseError(msg,_ak1_);
                 var switch$1=2}
               else
                var switch$1=1}
            switch(switch$1)
             {case 0:var switch$2=0;break;
              case 1:var switch$2=0;break;
              default:var switch$2=1}}
          unifyRaise
           ([246,
             function(_ak4_)
              {var
                dummy_env=empty$1(default$0),
                match=map_stmt(mapper$0,dummy_env,stmt),
                s=match[1];
               return s[1]}],
            possible_ret_type,
            last_type);
          return [0,[5,name,args$0,body$2,[0,last_type],attr$4],env$21,0];
         case 6:
          var
           attr$5=stmt[5],
           linkname=stmt[4],
           fun_ret_type=stmt[3],
           args$1=stmt[2],
           name$0=stmt[1],
           env$22=addFunction(env$5,name$0,attr$5),
           env$23=enter$0(0,env$22,name$0,attr$5),
           match$16=addArgsToEnv(env$23,args$1),
           env$24=match$16[3],
           types$2=match$16[2],
           args$2=match$16[1],
           typ$3=makeArrowType(fun_ret_type,types$2),
           env$25=setCurrentType$0(env$24,typ$3,1),
           env$26=exit$0(env$25);
          if(has(attr$5[8],_rC_))
           var
            name$1=postfix(name$0,_rD_),
            attr$6=
             [0,
              attr$5[1],
              attr$5[2],
              attr$5[3],
              attr$5[4],
              attr$5[5],
              0,
              attr$5[7],
              attr$5[8],
              attr$5[9]],
            env$1=addFunction(env$26,name$1,attr$6),
            env$2=enter$0(0,env$1,name$1,attr$6),
            match$0=addArgsToEnv(env$2,0),
            env$3=match$0[3],
            types=match$0[2],
            typ=makeArrowType(ret$0,types),
            env$4=setCurrentType$0(env$3,typ,1),
            env$27=exit$0(env$4),
            attr$7=attr$6;
          else
           var env$27=env$26,attr$7=attr$5;
          return [0,
                  [6,name$0,args$2,fun_ret_type,linkname,attr$7],
                  env$27,
                  ret_type];
         case 7:
          var
           attr$8=stmt[3],
           rhs$3=stmt[2],
           lhs$3=stmt[1],
           match$17=inferLhsExp(870530776,env$5,lhs$3),
           lhs_typ$1=match$17[2],
           lhs$4=match$17[1],
           match$18=inferExp(env$5,rhs$3),
           rhs_typ$1=match$18[3],
           env$28=match$18[2],
           rhs$4=match$18[1];
          unifyRaise(expLoc(rhs$4),lhs_typ$1,rhs_typ$1);
          return [0,[7,lhs$4,rhs$4,attr$8],env$28,ret_type];
         case 8:
          var attr$9=stmt[3],stmts=stmt[2],name$2=stmt[1],_akU_=env$5[2];
          _akU_[10][1] = [0,IdMap[1],_akU_[10][1]];
          var env=[0,env$5[1],_akU_],_ak3_=name$2?0:1;
          if(_ak3_)
           var
            match$19=tick(env),
            env$29=match$19[2],
            n=match$19[1],
            env$30=env$29,
            name$3=[0,[0,_a_(_rE_,caml_new_string("" + n)),0]];
          else
           var env$30=env,name$3=name$2;
          var
           match$20=inferStmtList(env$30,ret_type,stmts),
           stmt_ret_type=match$20[3],
           env$31=match$20[2],
           stmts$0=match$20[1],
           _akV_=env$31[2],
           _akS_=_akV_[10][1];
          if(_akS_)var l=_akS_[2],_akT_=l;else var _akT_=failwith(_i_);
          _akV_[10][1] = _akT_;
          var env$0=[0,env$31[1],_akV_];
          return [0,[8,name$3,stmts$0,attr$9],env$0,stmt_ret_type];
         case 9:
          var attr$10=stmt[3],members=stmt[2],name$4=stmt[1];
          return [0,[9,name$4,members,attr$10],env$5,ret_type];
         default:
          var attr$11=stmt[3],alias=stmt[2],name$5=stmt[1];
          return [0,[10,name$5,alias,attr$11],env$5,ret_type]}}
    function inferStmtList(env,ret_type_in,stmts)
     {var
       _akR_=[0,0,env,ret_type_in],
       match=
        fold_left
         (function(param,stmt)
           {var
             ret_type=param[3],
             env=param[2],
             stmts=param[1],
             match=inferStmt(env,ret_type,stmt),
             ret_type$0=match[3],
             env$0=match[2],
             stmt$0=match[1];
            return [0,[0,stmt$0,stmts],env$0,ret_type$0]},
          _akR_,
          stmts),
       ret_type=match[3],
       env$0=match[2],
       stmts$0=match[1];
      return [0,rev(stmts$0),env$0,ret_type]}
    function new_t(param)
     {var
       _akN_=create$0(0,0),
       _akO_=create$0(0,0),
       _akP_=create$0(0,0),
       _akQ_=create$0(0,0);
      return [0,[0,create$0(0,0),0],_akQ_,_akP_,_akO_,_akN_]}
    function top(param){return [0,new_t(0),0]}
    function first(env){if(env){var t=env[1];return t}return failwith(_rF_)}
    function lookupFunction(env$1,id$0)
     {if(env$1)
       {var t$2=env$1[2],h=env$1[1],t=h,env=t$2,id=id$0;
        for(;;)
         {if(id)
           {var name2=id[2],name1=id[1];
            if(0 === name2)
             if(mem(t[4],[0,name1,0]))
              return [0,[0,t,find$0(t[4],[0,name1,0])]];
            if(0 !== name2)
             if(mem(t[5],[0,name1,0]))
              {var t$1=find$0(t[5],[0,name1,0]),t=t$1,id=name2;continue}
            if(env){var env$0=env[2],t$0=env[1],t=t$0,env=env$0;continue}
            return 0}
          return 0}}
      return failwith(_rG_)}
    function lookupVar(env,id)
     {var t$0=first(env);
      try
       {var value$0=find$0(t$0[2],id);return value$0}
      catch(_akL_)
       {_akL_ = caml_wrap_exception(_akL_);
        if(_akL_ === Not_found)
         {var locals=t$0[1];
          for(;;)
           {if(locals)
             {var t=locals[2],h=locals[1];
              try
               {var value=find$0(h,id);return value}
              catch(_akM_)
               {_akM_ = caml_wrap_exception(_akM_);
                if(_akM_ === Not_found){var locals=t;continue}
                throw _akM_}}
            throw Not_found}}
        throw _akL_}}
    function declareMem(env,id,value)
     {try
       {lookupVar(env,id)}
      catch(_akK_)
       {_akK_ = caml_wrap_exception(_akK_);
        if(_akK_ === Not_found){var t=first(env);return add(t[2],id,value)}
        throw _akK_}
      return 0}
    function declareVal(env,id,value)
     {try
       {lookupVar(env,id)}
      catch(_akJ_)
       {_akJ_ = caml_wrap_exception(_akJ_);
        if(_akJ_ === Not_found)
         {var t=first(env),_akI_=t[1];
          if(_akI_){var h=_akI_[1];return replace(h,id,value)}
          return failwith(_rH_)}
        throw _akJ_}
      return 0}
    function updateVar(env,id,value)
     {var t$0=first(env);
      try
       {mem(t$0[2],id)}
      catch(_akG_)
       {_akG_ = caml_wrap_exception(_akG_);
        if(_akG_ === Not_found)
         {var locals=t$0[1];
          for(;;)
           {if(locals)
             {var t=locals[2],h=locals[1];
              try
               {mem(h,id)}
              catch(_akH_)
               {_akH_ = caml_wrap_exception(_akH_);
                if(_akH_ === Not_found){var locals=t;continue}
                throw _akH_}
              return replace(h,id,value)}
            return failwith(_a_(_rI_,idStr(id)))}}
        throw _akG_}
      return replace(t$0[2],id,value)}
    function addFunction$0(env,id,stmt)
     {var t=first(env);return add(t[4],id,stmt)}
    function addModule(env,id)
     {var t=first(env),_akF_=new_t(0);return add(t[5],id,_akF_)}
    function enterModule(env,id)
     {var t=first(env);
      try
       {var module_t=find$0(t[5],id)}
      catch(_akE_)
       {_akE_ = caml_wrap_exception(_akE_);
        if(_akE_ === Not_found)return failwith(_a_(_rJ_,idStr(id)));
        throw _akE_}
      return [0,module_t,env]}
    function enterInstance(env,id)
     {var t=first(env);
      try
       {var inst$0=find$0(t[3],id)}
      catch(_akD_)
       {_akD_ = caml_wrap_exception(_akD_);
        if(_akD_ === Not_found)
         {var inst=new_t(0);add(t[3],id,inst);return [0,inst,env]}
        throw _akD_}
      return [0,inst$0,env]}
    var ret_unit=[0,init$0];
    function makeInstName(fn,attr)
     {var
       line$0=caml_new_string("" + line(attr[1])),
       col=caml_new_string("" + startColumn(attr[1]));
      if(fn)
       {var _akB_=fn[2],_akC_=fn[1];
        if(!_akB_)return [0,_a_(_akC_,_a_(_rQ_,_a_(line$0,_a_(_rP_,col)))),0];
        if(!_akB_[2])
         {var id=_akB_[1];
          return [0,
                  _a_
                   (_akC_,
                    _a_(_rO_,_a_(id,_a_(_rN_,_a_(line$0,_a_(_rM_,col)))))),
                  0]}}
      return failwith(_rL_)}
    function getInitValue(tp)
     {var tp$0=tp;
      for(;;)
       {var _aks_=tp$0[1];
        switch(_aks_[0])
         {case 1:
           var _akt_=_aks_[1];
           if(_akt_)
            {var _aku_=_akt_[1];
             if(caml_string_notequal(_aku_,_rS_))
              {if(caml_string_notequal(_aku_,_rT_))
                {if(caml_string_notequal(_aku_,_rU_))
                  {if(!caml_string_notequal(_aku_,_rV_))
                    if(!_akt_[2])return [0,init$0]}
                 else
                  if(!_akt_[2])return [3,0,init$0]}
               else
                if(!_akt_[2])return [2,0,init$0]}
             else
              if(!_akt_[2])return [1,0,init$0]}
           break;
          case 2:
           var _akv_=_aks_[1];
           if(_akv_)
            {var _akw_=_akv_[1];
             if(caml_string_notequal(_akw_,_rW_))
              {if(!caml_string_notequal(_akw_,_rX_))
                if(!_akv_[2])
                 {var types=_aks_[2],elems=map(getInitValue,types);
                  return [12,elems,init$0]}}
             else
              if(!_akv_[2])
               {var _akx_=_aks_[2];
                if(_akx_)
                 {var _aky_=_akx_[2];
                  if(_aky_)
                   {var _akA_=_aky_[1][1],_akz_=_akx_[1];
                    if(6 === _akA_[0])
                     if(!_aky_[2])
                      {var
                        size=_akA_[1],
                        sub_init=getInitValue(_akz_),
                        elems$0=init(size,function(param){return sub_init});
                       return [6,elems$0,init$0]}}}}}
           break;
          case 4:var tp$1=_aks_[1],tp$0=tp$1;continue
          }
        return failwith(_rR_)}}
    function getInitExp(lhs)
     {var _akr_=fromLhsExp$0(lhs)[7];
      if(_akr_){var typ=_akr_[1];return getInitValue(typ)}
      var print_buffer=makePrintBuffer(0);
      lhsExpressionBuff(print_buffer,lhs);
      return failwith(_a_(_rY_,contents$0(print_buffer)))}
    function evalUop(op,match)
     {if(!caml_string_notequal(op,_rZ_))
       if(typeof match !== "number")
        switch(match[0])
         {case 2:var attr=match[2],v=match[1];return [2,-v | 0,attr];
          case 3:var attr$0=match[2],v$0=match[1];return [3,-v$0,attr$0]
          }
      return [7,op,match,init$0]}
    function foldOp(op,args)
     {if(args)
       {var t=args[2],h=args[1];
        return fold_left
                (function(e1,match)
                  {var switch$0=caml_string_compare(op,_r0_);
                   if(0 <= switch$0)
                    if(0 < switch$0)
                     if(caml_string_notequal(op,_r1_))
                      if(caml_string_notequal(op,_r2_))
                       if(caml_string_notequal(op,_r3_))
                        if(caml_string_notequal(op,_r4_))
                         if(caml_string_notequal(op,_r5_))
                          {if(!caml_string_notequal(op,_r6_))
                            if(typeof e1 === "number")
                             var switch$1=0;
                            else
                             if(1 === e1[0])
                              {if(typeof match !== "number" && 1 === match[0])
                                {var v2=match[1],attr=e1[2],v1=e1[1],v1$0=v1 || v2;
                                 return [1,v1$0,attr]}
                               var switch$1=1}
                             else
                              var switch$1=0}
                         else
                          if(typeof e1 === "number")
                           var switch$2=0;
                          else
                           switch(e1[0])
                            {case 2:
                              if(typeof match !== "number" && 2 === match[0])
                               {var v2$0=match[1],attr$0=e1[2],v1$1=e1[1];
                                return [1,v2$0 <= v1$1?1:0,attr$0]}
                              var switch$2=1;
                              break;
                             case 3:
                              if(typeof match !== "number" && 3 === match[0])
                               {var v2$1=match[1],attr$1=e1[2],v1$2=e1[1];
                                return [1,v2$1 <= v1$2?1:0,attr$1]}
                              var switch$2=1;
                              break;
                             default:var switch$2=0}
                        else
                         if(typeof e1 === "number")
                          var switch$3=0;
                         else
                          switch(e1[0])
                           {case 2:
                             if(typeof match !== "number" && 2 === match[0])
                              {var v2$2=match[1],attr$2=e1[2],v1$3=e1[1];
                               return [1,v2$2 < v1$3?1:0,attr$2]}
                             var switch$3=1;
                             break;
                            case 3:
                             if(typeof match !== "number" && 3 === match[0])
                              {var v2$3=match[1],attr$3=e1[2],v1$4=e1[1];
                               return [1,v2$3 < v1$4?1:0,attr$3]}
                             var switch$3=1;
                             break;
                            default:var switch$3=0}
                       else
                        if(typeof e1 === "number")
                         var switch$4=0;
                        else
                         switch(e1[0])
                          {case 2:
                            if(typeof match !== "number" && 2 === match[0])
                             {var v2$4=match[1],attr$4=e1[2],v1$5=e1[1];
                              return [1,v1$5 === v2$4?1:0,attr$4]}
                            var switch$4=1;
                            break;
                           case 3:
                            if(typeof match !== "number" && 3 === match[0])
                             {var v2$5=match[1],attr$5=e1[2],v1$6=e1[1];
                              return [1,v1$6 == v2$5?1:0,attr$5]}
                            var switch$4=1;
                            break;
                           default:var switch$4=0}
                      else
                       if(typeof e1 === "number")
                        var switch$5=0;
                       else
                        switch(e1[0])
                         {case 2:
                           if(typeof match !== "number" && 2 === match[0])
                            {var v2$6=match[1],attr$6=e1[2],v1$7=e1[1];
                             return [1,v1$7 !== v2$6?1:0,attr$6]}
                           var switch$5=1;
                           break;
                          case 3:
                           if(typeof match !== "number" && 3 === match[0])
                            {var v2$7=match[1],attr$7=e1[2],v1$8=e1[1];
                             return [1,v1$8 != v2$7?1:0,attr$7]}
                           var switch$5=1;
                           break;
                          default:var switch$5=0}
                     else
                      if(typeof e1 === "number")
                       var switch$6=0;
                      else
                       switch(e1[0])
                        {case 2:
                          if(typeof match !== "number" && 2 === match[0])
                           {var v2$8=match[1],attr$8=e1[2],v1$9=e1[1];
                            return [1,v1$9 <= v2$8?1:0,attr$8]}
                          var switch$6=1;
                          break;
                         case 3:
                          if(typeof match !== "number" && 3 === match[0])
                           {var v2$9=match[1],attr$9=e1[2],v1$10=e1[1];
                            return [1,v1$10 <= v2$9?1:0,attr$9]}
                          var switch$6=1;
                          break;
                         default:var switch$6=0}
                    else
                     if(typeof e1 === "number")
                      var switch$7=0;
                     else
                      switch(e1[0])
                       {case 2:
                         if(typeof match !== "number" && 2 === match[0])
                          {var v2$10=match[1],attr$10=e1[2],v1$11=e1[1];
                           return [1,v1$11 < v2$10?1:0,attr$10]}
                         var switch$7=1;
                         break;
                        case 3:
                         if(typeof match !== "number" && 3 === match[0])
                          {var v2$11=match[1],attr$11=e1[2],v1$12=e1[1];
                           return [1,v1$12 < v2$11?1:0,attr$11]}
                         var switch$7=1;
                         break;
                        default:var switch$7=0}
                   else
                    if(caml_string_notequal(op,_r7_))
                     if(caml_string_notequal(op,_r8_))
                      if(caml_string_notequal(op,_r9_))
                       if(caml_string_notequal(op,_r__))
                        if(caml_string_notequal(op,_r$_))
                         {if(!caml_string_notequal(op,_sa_))
                           if(typeof e1 === "number")
                            var switch$8=0;
                           else
                            switch(e1[0])
                             {case 2:
                               if(typeof match !== "number" && 2 === match[0])
                                {var v2$12=match[1],attr$12=e1[2],v1$13=e1[1];
                                 return [2,caml_div(v1$13,v2$12),attr$12]}
                               var switch$8=1;
                               break;
                              case 3:
                               if(typeof match !== "number" && 3 === match[0])
                                {var v2$13=match[1],attr$13=e1[2],v1$14=e1[1];
                                 return [3,v1$14 / v2$13,attr$13]}
                               var switch$8=1;
                               break;
                              default:var switch$8=0}}
                        else
                         if(typeof e1 === "number")
                          var switch$9=0;
                         else
                          switch(e1[0])
                           {case 2:
                             if(typeof match !== "number" && 2 === match[0])
                              {var v2$14=match[1],attr$14=e1[2],v1$15=e1[1];
                               return [2,v1$15 - v2$14 | 0,attr$14]}
                             var switch$9=1;
                             break;
                            case 3:
                             if(typeof match !== "number" && 3 === match[0])
                              {var v2$15=match[1],attr$15=e1[2],v1$16=e1[1];
                               return [3,v1$16 - v2$15,attr$15]}
                             var switch$9=1;
                             break;
                            default:var switch$9=0}
                       else
                        if(typeof e1 === "number")
                         var switch$10=0;
                        else
                         switch(e1[0])
                          {case 2:
                            if(typeof match !== "number" && 2 === match[0])
                             {var v2$16=match[1],attr$16=e1[2],v1$17=e1[1];
                              return [2,v1$17 + v2$16 | 0,attr$16]}
                            var switch$10=1;
                            break;
                           case 3:
                            if(typeof match !== "number" && 3 === match[0])
                             {var v2$17=match[1],attr$17=e1[2],v1$18=e1[1];
                              return [3,v1$18 + v2$17,attr$17]}
                            var switch$10=1;
                            break;
                           default:var switch$10=0}
                      else
                       if(typeof e1 === "number")
                        var switch$11=0;
                       else
                        switch(e1[0])
                         {case 2:
                           if(typeof match !== "number" && 2 === match[0])
                            {var v2$18=match[1],attr$18=e1[2],v1$19=e1[1];
                             return [2,caml_mul(v1$19,v2$18),attr$18]}
                           var switch$11=1;
                           break;
                          case 3:
                           if(typeof match !== "number" && 3 === match[0])
                            {var v2$19=match[1],attr$19=e1[2],v1$20=e1[1];
                             return [3,v1$20 * v2$19,attr$19]}
                           var switch$11=1;
                           break;
                          default:var switch$11=0}
                     else
                      if(typeof e1 === "number")
                       var switch$12=0;
                      else
                       if(1 === e1[0])
                        {if(typeof match !== "number" && 1 === match[0])
                          {var
                            v2$20=match[1],
                            attr$20=e1[2],
                            v1$21=e1[1],
                            v2$21=v1$21?v2$20:v1$21;
                           return [1,v2$21,attr$20]}
                         var switch$12=1}
                       else
                        var switch$12=0;
                    else
                     if(typeof e1 === "number")
                      var switch$13=0;
                     else
                      switch(e1[0])
                       {case 2:
                         if(typeof match !== "number" && 2 === match[0])
                          {var v2$22=match[1],attr$21=e1[2],v1$22=e1[1];
                           return [2,caml_mod(v1$22,v2$22),attr$21]}
                         var switch$13=1;
                         break;
                        case 3:
                         if(typeof match !== "number" && 3 === match[0])
                          {var v2$23=match[1],attr$22=e1[2],v1$23=e1[1];
                           return [3,v1$23 % v2$23,attr$22]}
                         var switch$13=1;
                         break;
                        default:var switch$13=0}
                   return [8,op,[0,e1,[0,match,0]],init$0]},
                 h,
                 t)}
      return failwith(_sb_)}
    function builtinFunctions(env)
     {function real_real(f,args)
       {if(args)
         {var _akq_=args[1];
          if(typeof _akq_ === "number")
           var switch$0=0;
          else
           if(3 === _akq_[0])
            {if(!args[2])
              {var attr=_akq_[2],v=_akq_[1];return [3,caml_call1(f,v),attr]}
             var switch$0=1}
           else
            var switch$0=0}
        return failwith(_sc_)}
      function clip(args)
       {if(args)
         {var _akh_=args[1];
          if(typeof _akh_ === "number")
           var switch$0=0;
          else
           switch(_akh_[0])
            {case 2:
              var _aki_=args[2];
              if(_aki_)
               {var _akj_=_aki_[1];
                if(typeof _akj_ === "number")
                 var switch$1=1;
                else
                 if(2 === _akj_[0])
                  {var _akk_=_aki_[2];
                   if(_akk_)
                    {var _akl_=_akk_[1];
                     if(typeof _akl_ === "number")
                      var switch$2=1;
                     else
                      if(2 === _akl_[0])
                       {if(!_akk_[2])
                         {var ma=_akl_[1],mi=_akj_[1],attr=_akh_[2],v=_akh_[1];
                          return [2,max(mi,min(ma,v)),attr]}
                        var switch$0=1,switch$1=0,switch$2=0}
                      else
                       var switch$2=1;
                     if(switch$2)var switch$0=1,switch$1=0}
                   else
                    var switch$0=1,switch$1=0}
                 else
                  var switch$1=1;
                if(switch$1)var switch$0=1}
              else
               var switch$0=1;
              break;
             case 3:
              var _akm_=args[2];
              if(_akm_)
               {var _akn_=_akm_[1];
                if(typeof _akn_ === "number")
                 var switch$3=1;
                else
                 if(3 === _akn_[0])
                  {var _ako_=_akm_[2];
                   if(_ako_)
                    {var _akp_=_ako_[1];
                     if(typeof _akp_ === "number")
                      var switch$4=1;
                     else
                      if(3 === _akp_[0])
                       {if(!_ako_[2])
                         {var
                           ma$0=_akp_[1],
                           mi$0=_akn_[1],
                           attr$0=_akh_[2],
                           v$0=_akh_[1];
                          return [3,max(mi$0,min(ma$0,v$0)),attr$0]}
                        var switch$0=1,switch$3=0,switch$4=0}
                      else
                       var switch$4=1;
                     if(switch$4)var switch$0=1,switch$3=0}
                   else
                    var switch$0=1,switch$3=0}
                 else
                  var switch$3=1;
                if(switch$3)var switch$0=1}
              else
               var switch$0=1;
              break;
             default:var switch$0=0}}
        return failwith(_sd_)}
      function int$0(args)
       {if(args)
         {var _akf_=args[1];
          if(typeof _akf_ === "number")
           var switch$0=0;
          else
           switch(_akf_[0])
            {case 1:
              if(!args[2])
               {var attr=_akf_[2],v=_akf_[1],_akg_=v?1:0;
                return [2,_akg_,attr]}
              var switch$0=1;
              break;
             case 2:
              if(!args[2])
               {var attr$0=_akf_[2],v$0=_akf_[1];return [2,v$0,attr$0]}
              var switch$0=1;
              break;
             case 3:
              if(!args[2])
               {var attr$1=_akf_[2],v$1=_akf_[1];return [2,v$1 | 0,attr$1]}
              var switch$0=1;
              break;
             default:var switch$0=0}}
        return failwith(_se_)}
      function real(args)
       {if(args)
         {var _akd_=args[1];
          if(typeof _akd_ === "number")
           var switch$0=0;
          else
           switch(_akd_[0])
            {case 1:
              if(!args[2])
               {var attr=_akd_[2],v=_akd_[1],_ake_=v?1:0;
                return [3,_ake_,attr]}
              var switch$0=1;
              break;
             case 2:
              if(!args[2])
               {var attr$0=_akd_[2],v$0=_akd_[1];return [3,v$0,attr$0]}
              var switch$0=1;
              break;
             case 3:
              if(!args[2])
               {var attr$1=_akd_[2],v$1=_akd_[1];return [3,v$1,attr$1]}
              var switch$0=1;
              break;
             default:var switch$0=0}}
        return failwith(_sf_)}
      function not(args)
       {if(args)
         {var _akc_=args[1];
          if(typeof _akc_ === "number")
           var switch$0=0;
          else
           if(1 === _akc_[0])
            {if(!args[2]){var attr=_akc_[2],v=_akc_[1];return [1,1 - v,attr]}
             var switch$0=1}
           else
            var switch$0=0}
        return failwith(_sg_)}
      function eps(args){return args?failwith(_sh_):[3,1e-18,init$0]}
      function random(args)
       {if(args)return failwith(_si_);
        var r1=bits(s),r2=bits(s);
        return [3,(r1 / 1073741824 + r2) / 1073741824 * 1,init$0]}
      function irandom(args)
       {return args?failwith(_sj_):[2,invalid_arg(_b6_),init$0]}
      var
       _ajJ_=
        [0,
         [0,_sq_,[1,clip]],
         [0,
          [0,_sp_,[1,int$0]],
          [0,
           [0,_so_,[1,real]],
           [0,
            [0,_sn_,[1,not]],
            [0,
             [0,_sm_,[1,eps]],
             [0,[0,_sl_,[1,random]],[0,[0,_sk_,[1,irandom]],0]]]]]]];
      function _ajK_(_akb_){return Math.sqrt(_akb_)}
      var
       _ajL_=
        [0,[0,_sr_,[1,function(_aka_){return real_real(_ajK_,_aka_)}]],_ajJ_];
      function _ajM_(_aj$_){return Math.tan(_aj$_)}
      var
       _ajN_=
        [0,[0,_ss_,[1,function(_aj__){return real_real(_ajM_,_aj__)}]],_ajL_],
       _ajO_=caml_tanh_float,
       _ajP_=
        [0,[0,_st_,[1,function(_aj9_){return real_real(_ajO_,_aj9_)}]],_ajN_];
      function _ajQ_(_aj8_){return Math.floor(_aj8_)}
      var
       _ajR_=
        [0,[0,_su_,[1,function(_aj7_){return real_real(_ajQ_,_aj7_)}]],_ajP_];
      function _ajS_(_aj6_){return Math.cos(_aj6_)}
      var
       _ajT_=
        [0,[0,_sv_,[1,function(_aj5_){return real_real(_ajS_,_aj5_)}]],_ajR_];
      function _ajU_(_aj4_){return Math.sin(_aj4_)}
      var
       _ajV_=
        [0,[0,_sw_,[1,function(_aj3_){return real_real(_ajU_,_aj3_)}]],_ajT_];
      function _ajW_(_aj2_){return Math.exp(_aj2_)}
      var
       _ajX_=
        [0,[0,_sx_,[1,function(_aj1_){return real_real(_ajW_,_aj1_)}]],_ajV_];
      function _ajY_(_aj0_){return Math.abs(_aj0_)}
      var
       functions=
        [0,[0,_sy_,[1,function(_ajZ_){return real_real(_ajY_,_ajZ_)}]],_ajX_];
      return iter
              (function(param)
                {var body=param[2],name=param[1];
                 return addFunction$0(env,[0,name,0],body)},
               functions)}
    function bind(kind,env,lhs,rhs)
     {var lhs$0=lhs;
      for(;;)
       switch(lhs$0[0])
        {case 0:return 0;
         case 1:
          var _ajF_=lhs$0[1];
          if(rhs)
           {var _ajG_=rhs[1];
            switch(kind)
             {case 0:return updateVar(env,_ajF_,_ajG_);
              case 1:return declareVal(env,_ajF_,_ajG_);
              default:return declareMem(env,_ajF_,_ajG_)}}
          switch(kind)
           {case 0:
             var rhs$0=getInitExp(lhs$0);return updateVar(env,_ajF_,rhs$0);
            case 1:
             var rhs$1=getInitExp(lhs$0);return declareVal(env,_ajF_,rhs$1);
            default:
             var rhs$2=getInitExp(lhs$0);return declareMem(env,_ajF_,rhs$2)}
         case 2:
          var _ajH_=lhs$0[1];
          if(rhs)
           {var _ajI_=rhs[1];
            if(typeof _ajI_ !== "number" && 12 === _ajI_[0])
             {var rhs_elems=_ajI_[1];
              return iter2
                      (function(l,r){return bind(kind,env,l,[0,r])},
                       _ajH_,
                       rhs_elems)}
            return failwith(_sz_)}
          return iter(function(l){return bind(kind,env,l,0)},_ajH_);
         default:var lhs$1=lhs$0[1],lhs$0=lhs$1;continue}}
    function evalStmts(env,stmts)
     {var stmts$0=stmts;
      for(;;)
       {if(stmts$0)
         {var t=stmts$0[2],h=stmts$0[1],ret=evalStmt(env,h);
          if(typeof ret !== "number" && 0 === ret[0]){var stmts$0=t;continue}
          return ret}
        return ret_unit}}
    function evalExp$0(counter,env,exp)
     {var exp$0=exp;
      for(;;)
       if(typeof exp$0 === "number")
        return 0;
       else
        switch(exp$0[0])
         {case 0:return exp$0;
          case 1:return exp$0;
          case 2:return exp$0;
          case 3:return exp$0;
          case 4:return exp$0;
          case 5:
           var id=exp$0[1];
           try
            {var value=lookupVar(env,id);return value}
           catch(_ajE_)
            {_ajE_ = caml_wrap_exception(_ajE_);
             if(_ajE_ === Not_found)return exp$0;
             throw _ajE_}
          case 6:
           var
            attr=exp$0[2],
            elems=exp$0[1],
            elems$0=map$1(function(_ajD_){return evalExp(env,_ajD_)},elems);
           return [6,elems$0,attr];
          case 7:
           var exp$1=exp$0[2],op=exp$0[1],exp$2=evalExp(env,exp$1);
           return evalUop(op,exp$2);
          case 8:
           var
            elems$1=exp$0[2],
            op$0=exp$0[1],
            elems$2=map(function(_ajC_){return evalExp(env,_ajC_)},elems$1);
           return foldOp(op$0,elems$2);
          case 9:
           var _ajy_=exp$0[1];
           if(_ajy_)
            {var
              args=exp$0[3],
              name=exp$0[2],
              inst=_ajy_[1],
              args$0=map(function(_ajB_){return evalExp(env,_ajB_)},args),
              match=lookupFunction(env,name);
             if(match)
              {var
                match$0=match[1],
                fn=match$0[2],
                t=match$0[1],
                env$0=enterInstance([0,t,env],inst);
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return evalFunction(counter$1,env$0,fn,args$0)}
               return caml_trampoline_return(evalFunction,[0,env$0,fn,args$0])}
             return exp$0}
           var
            attr$0=exp$0[4],
            args$1=exp$0[3],
            name$0=exp$0[2],
            args$2=map(function(_ajA_){return evalExp(env,_ajA_)},args$1),
            match$1=lookupFunction(env,name$0);
           if(match$1)
            {var
              match$2=match$1[1],
              fn$0=match$2[2],
              t$0=match$2[1],
              inst$0=makeInstName(name$0,attr$0),
              env$1=enterInstance([0,t$0,env],inst$0);
             if(counter < 50)
              {var counter$2=counter + 1 | 0;
               return evalFunction(counter$2,env$1,fn$0,args$2)}
             return caml_trampoline_return(evalFunction,[0,env$1,fn$0,args$2])}
           return exp$0;
          case 10:
           var
            attr$1=exp$0[4],
            else$0=exp$0[3],
            then=exp$0[2],
            cond=exp$0[1],
            cond$0=evalExp(env,cond);
           if(typeof cond$0 !== "number" && 1 === cond$0[0])
            {if(0 === cond$0[1]){var exp$0=else$0;continue}
             var exp$0=then;
             continue}
           return [10,cond$0,then,else$0,attr$1];
          case 11:var exp$3=exp$0[1],exp$0=exp$3;continue;
          case 12:
           var
            attr$2=exp$0[2],
            elems$3=exp$0[1],
            elems$4=map(function(_ajz_){return evalExp(env,_ajz_)},elems$3);
           return [12,elems$4,attr$2];
          default:
           var stmt=exp$0[2];
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return evalStmt$0(counter$0,env,stmt)}
           return caml_trampoline_return(evalStmt$0,[0,env,stmt])}}
    function evalFunction(counter,env,fn,args)
     {if(0 === fn[0])
       {var _ajx_=fn[1];
        if(typeof _ajx_ !== "number" && 5 === _ajx_[0])
         {var stmt=_ajx_[3],inputs=_ajx_[2];
          iter2
           (function(lhs,match){var id=lhs[1];return updateVar(env,id,match)},
            inputs,
            args);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return evalStmt$0(counter$0,env,stmt)}
          return caml_trampoline_return(evalStmt$0,[0,env,stmt])}
        return failwith(_sA_)}
      var fn$0=fn[1];
      return caml_call1(fn$0,args)}
    function evalStmt$0(counter,env,stmt)
     {var stmt$0=stmt;
      for(;;)
       if(typeof stmt$0 === "number")
        return ret_unit;
       else
        switch(stmt$0[0])
         {case 0:
           var _ajq_=stmt$0[2],_ajr_=stmt$0[1];
           if(_ajq_)
            {var rhs=_ajq_[1],rhs$0=evalExp(env,rhs);
             bind(0,env,_ajr_,[0,rhs$0]);
             return ret_unit}
           bind(1,env,_ajr_,0);
           return ret_unit;
          case 1:
           var _ajs_=stmt$0[2],_ajt_=stmt$0[1];
           if(_ajs_)
            {var rhs$1=_ajs_[1],rhs$2=evalExp(env,rhs$1);
             bind(0,env,_ajt_,[0,rhs$2]);
             return ret_unit}
           bind(2,env,_ajt_,0);
           return ret_unit;
          case 2:
           var body=stmt$0[2],cond=stmt$0[1];
           for(;;)
            {var cond$0=evalExp(env,cond);
             if(typeof cond$0 !== "number" && 1 === cond$0[0])
              {if(0 === cond$0[1])return ret_unit;
               var ret=evalStmt(env,body);
               if(typeof ret !== "number" && 0 === ret[0])continue;
               return ret}
             return failwith(_sB_)}
          case 3:
           var e=stmt$0[1];
           if(counter < 50)
            {var counter$0=counter + 1 | 0;return evalExp$0(counter$0,env,e)}
           return caml_trampoline_return(evalExp$0,[0,env,e]);
          case 4:
           var _aju_=stmt$0[3],_ajv_=stmt$0[2],_ajw_=stmt$0[1];
           if(_aju_)
            {var else$0=_aju_[1],cond$1=evalExp(env,_ajw_);
             if(typeof cond$1 !== "number" && 1 === cond$1[0])
              {if(0 === cond$1[1]){var stmt$0=else$0;continue}
               var stmt$0=_ajv_;
               continue}
             return failwith(_sC_)}
           var cond$2=evalExp(env,_ajw_);
           if(typeof cond$2 !== "number" && 1 === cond$2[0])
            {if(0 === cond$2[1])return ret_unit;var stmt$0=_ajv_;continue}
           return failwith(_sD_);
          case 5:
           var name=stmt$0[1];
           addFunction$0(env,name,[0,stmt$0]);
           return ret_unit;
          case 6:return ret_unit;
          case 7:
           var rhs$3=stmt$0[2],lhs=stmt$0[1],rhs$4=evalExp(env,rhs$3);
           bind(0,env,lhs,[0,rhs$4]);
           return ret_unit;
          case 8:
           var stmts=stmt$0[2];
           if(env)
            {var _ajm_=env[2],_ajn_=env[1];
             if(_ajm_)
              var
               _ajo_=_ajn_[1],
               locals=[0,create$0(0,0),_ajo_],
               t=[0,locals,_ajn_[2],_ajn_[3],_ajn_[4],_ajn_[5]],
               env$0=[0,t,_ajm_];
             else
              var
               _ajp_=_ajn_[1],
               locals$0=[0,create$0(0,0),_ajp_],
               t$0=[0,locals$0,_ajn_[2],_ajn_[3],_ajn_[4],_ajn_[5]],
               env$0=[0,t$0,0]}
           else
            var env$0=failwith(_rK_);
           return evalStmts(env$0,stmts);
          case 9:return ret_unit;
          default:return ret_unit}}
    function evalExp(env,exp){return caml_trampoline(evalExp$0(0,env,exp))}
    function evalStmt(env,stmt)
     {return caml_trampoline(evalStmt$0(0,env,stmt))}
    var
     pp_type_descr=function _ajl_(_ajj_,_ajk_){return _ajl_.fun(_ajj_,_ajk_)},
     show_type_descr=function _aji_(_ajh_){return _aji_.fun(_ajh_)};
    caml_update_dummy
     (pp_type_descr,
      function(fmt,param)
       {if(0 === param[0])
         {var a0=param[1];
          caml_call1(fprintf(fmt),_sE_);
          caml_call1(caml_call1(fprintf(fmt),_sF_),a0);
          return caml_call1(fprintf(fmt),_sG_)}
        var a1=param[2],a0$0=param[1];
        caml_call1(fprintf(fmt),_sH_);
        caml_call1(caml_call1(pp_type_descr,fmt),a0$0);
        caml_call1(fprintf(fmt),_sI_);
        caml_call1(caml_call1(fprintf(fmt),_sJ_),a1);
        return caml_call1(fprintf(fmt),_sK_)});
    caml_update_dummy
     (show_type_descr,
      function(x){return caml_call2(asprintf(_sL_),pp_type_descr,x)});
    var
     equal_type_descr=
      function _ajg_(_aje_,_ajf_){return _ajg_.fun(_aje_,_ajf_)};
    caml_update_dummy
     (equal_type_descr,
      function(lhs,match)
       {if(0 === lhs[0])
         {var _aja_=lhs[1];
          if(0 === match[0])
           {var rhs0=match[1];return caml_string_equal(_aja_,rhs0)}}
        else
         {var _ajb_=lhs[2],_ajc_=lhs[1];
          if(0 !== match[0])
           {var
             rhs1=match[2],
             rhs0$0=match[1],
             _ajd_=caml_call1(caml_call1(equal_type_descr,_ajc_),rhs0$0);
            return _ajd_?_ajb_ === rhs1?1:0:_ajd_}}
        return 0});
    var
     compare_type_descr=
      function _ai$_(_ai9_,_ai__){return _ai$_.fun(_ai9_,_ai__)};
    caml_update_dummy
     (compare_type_descr,
      function(lhs,match)
       {if(0 === lhs[0])
         {var _ai5_=lhs[1];
          if(0 === match[0])
           {var rhs0=match[1];return caml_string_compare(_ai5_,rhs0)}}
        else
         {var _ai7_=lhs[2],_ai8_=lhs[1];
          if(0 !== match[0])
           {var
             rhs1=match[2],
             rhs0$0=match[1],
             x=caml_call1(caml_call1(compare_type_descr,_ai8_),rhs0$0);
            return 0 === x?caml_int_compare(_ai7_,rhs1):x}}
        function to_int(param){return 0 === param[0]?0:1}
        var _ai6_=to_int(match);
        return caml_int_compare(to_int(lhs),_ai6_)});
    var
     pp_arg_type$0=function _ai4_(_ai2_,_ai3_){return _ai4_.fun(_ai2_,_ai3_)},
     show_arg_type=function _ai1_(_ai0_){return _ai1_.fun(_ai0_)};
    caml_update_dummy
     (pp_arg_type$0,
      function(fmt,param)
       {if(0 === param[0])
         {var a0=param[1];
          caml_call1(fprintf(fmt),_sM_);
          caml_call1(caml_call1(pp_type_descr,fmt),a0);
          return caml_call1(fprintf(fmt),_sN_)}
        var a0$0=param[1];
        caml_call1(fprintf(fmt),_sO_);
        caml_call1(caml_call1(pp_type_descr,fmt),a0$0);
        return caml_call1(fprintf(fmt),_sP_)});
    caml_update_dummy
     (show_arg_type,
      function(x){return caml_call2(asprintf(_sQ_),pp_arg_type$0,x)});
    var
     equal_arg_type$0=
      function _aiZ_(_aiX_,_aiY_){return _aiZ_.fun(_aiX_,_aiY_)};
    caml_update_dummy
     (equal_arg_type$0,
      function(lhs,match)
       {if(0 === lhs[0])
         {var _aiV_=lhs[1];
          if(0 === match[0])
           {var rhs0=match[1];
            return caml_call1(caml_call1(equal_type_descr,_aiV_),rhs0)}}
        else
         {var _aiW_=lhs[1];
          if(0 !== match[0])
           {var rhs0$0=match[1];
            return caml_call1(caml_call1(equal_type_descr,_aiW_),rhs0$0)}}
        return 0});
    var
     compare_arg_type$0=
      function _aiU_(_aiS_,_aiT_){return _aiU_.fun(_aiS_,_aiT_)};
    caml_update_dummy
     (compare_arg_type$0,
      function(lhs,match)
       {if(0 === lhs[0])
         {var _aiP_=lhs[1];
          if(0 === match[0])
           {var rhs0=match[1];
            return caml_call1(caml_call1(compare_type_descr,_aiP_),rhs0)}}
        else
         {var _aiR_=lhs[1];
          if(0 !== match[0])
           {var rhs0$0=match[1];
            return caml_call1(caml_call1(compare_type_descr,_aiR_),rhs0$0)}}
        function to_int(param){return 0 === param[0]?0:1}
        var _aiQ_=to_int(match);
        return caml_int_compare(to_int(lhs),_aiQ_)});
    var
     pp_cexp=function _aiO_(_aiM_,_aiN_){return _aiO_.fun(_aiM_,_aiN_)},
     show_cexp=function _aiL_(_aiK_){return _aiL_.fun(_aiK_)};
    caml_update_dummy
     (pp_cexp,
      function(fmt,param)
       {if(typeof param === "number")
         return pp_print_string(fmt,_sR_);
        else
         switch(param[0])
          {case 0:
            var a0=param[1];
            caml_call1(fprintf(fmt),_sS_);
            caml_call1(caml_call1(fprintf(fmt),_sT_),a0);
            return caml_call1(fprintf(fmt),_sU_);
           case 1:
            var a1=param[2],a0$0=param[1];
            caml_call1(fprintf(fmt),_sV_);
            caml_call1(caml_call1(fprintf(fmt),_sW_),a0$0);
            caml_call1(fprintf(fmt),_sX_);
            caml_call1(caml_call1(fprintf(fmt),_sY_),a1);
            return caml_call1(fprintf(fmt),_sZ_);
           case 2:
            var a0$1=param[1];
            caml_call1(fprintf(fmt),_s0_);
            caml_call1(caml_call1(fprintf(fmt),_s1_),a0$1);
            return caml_call1(fprintf(fmt),_s2_);
           case 3:
            var a0$2=param[1];
            caml_call1(fprintf(fmt),_s3_);
            caml_call1(caml_call1(fprintf(fmt),_s4_),a0$2);
            return caml_call1(fprintf(fmt),_s5_);
           case 4:
            var a1$0=param[2],a0$3=param[1];
            caml_call1(fprintf(fmt),_s6_);
            caml_call1(fprintf(fmt),_s7_);
            var _aiF_=0;
            fold_left
             (function(sep,x)
               {if(sep)caml_call1(fprintf(fmt),_s8_);
                caml_call1(caml_call1(pp_cexp,fmt),x);
                return 1},
              _aiF_,
              a0$3);
            caml_call1(fprintf(fmt),_s9_);
            caml_call1(fprintf(fmt),_s__);
            caml_call1(caml_call1(pp_type_descr,fmt),a1$0);
            return caml_call1(fprintf(fmt),_s$_);
           case 5:
            var a2=param[3],a1$1=param[2],a0$4=param[1];
            caml_call1(fprintf(fmt),_ta_);
            caml_call1(caml_call1(fprintf(fmt),_tb_),a0$4);
            caml_call1(fprintf(fmt),_tc_);
            caml_call1(fprintf(fmt),_td_);
            var _aiG_=0;
            fold_left
             (function(sep,x)
               {if(sep)caml_call1(fprintf(fmt),_te_);
                caml_call1(caml_call1(pp_cexp,fmt),x);
                return 1},
              _aiG_,
              a1$1);
            caml_call1(fprintf(fmt),_tf_);
            caml_call1(fprintf(fmt),_tg_);
            caml_call1(caml_call1(pp_type_descr,fmt),a2);
            return caml_call1(fprintf(fmt),_th_);
           case 6:
            var a2$0=param[3],a1$2=param[2],a0$5=param[1];
            caml_call1(fprintf(fmt),_ti_);
            caml_call1(caml_call1(fprintf(fmt),_tj_),a0$5);
            caml_call1(fprintf(fmt),_tk_);
            caml_call1(caml_call1(pp_cexp,fmt),a1$2);
            caml_call1(fprintf(fmt),_tl_);
            caml_call1(caml_call1(pp_type_descr,fmt),a2$0);
            return caml_call1(fprintf(fmt),_tm_);
           case 7:
            var a2$1=param[3],a1$3=param[2],a0$6=param[1];
            caml_call1(fprintf(fmt),_tn_);
            caml_call1(caml_call1(fprintf(fmt),_to_),a0$6);
            caml_call1(fprintf(fmt),_tp_);
            caml_call1(fprintf(fmt),_tq_);
            var _aiH_=0;
            fold_left
             (function(sep,x)
               {if(sep)caml_call1(fprintf(fmt),_tr_);
                caml_call1(caml_call1(pp_cexp,fmt),x);
                return 1},
              _aiH_,
              a1$3);
            caml_call1(fprintf(fmt),_ts_);
            caml_call1(fprintf(fmt),_tt_);
            caml_call1(caml_call1(pp_type_descr,fmt),a2$1);
            return caml_call1(fprintf(fmt),_tu_);
           case 8:
            var a1$4=param[2],a0$7=param[1];
            caml_call1(fprintf(fmt),_tv_);
            caml_call1(fprintf(fmt),_tw_);
            var _aiI_=0;
            fold_left
             (function(sep,x)
               {if(sep)caml_call1(fprintf(fmt),_tx_);
                caml_call1(caml_call1(fprintf(fmt),_ty_),x);
                return 1},
              _aiI_,
              a0$7);
            caml_call1(fprintf(fmt),_tz_);
            caml_call1(fprintf(fmt),_tA_);
            caml_call1(caml_call1(pp_type_descr,fmt),a1$4);
            return caml_call1(fprintf(fmt),_tB_);
           case 9:
            var a3=param[4],a2$2=param[3],a1$5=param[2],a0$8=param[1];
            caml_call1(fprintf(fmt),_tC_);
            caml_call1(caml_call1(pp_cexp,fmt),a0$8);
            caml_call1(fprintf(fmt),_tD_);
            caml_call1(caml_call1(pp_cexp,fmt),a1$5);
            caml_call1(fprintf(fmt),_tE_);
            caml_call1(caml_call1(pp_cexp,fmt),a2$2);
            caml_call1(fprintf(fmt),_tF_);
            caml_call1(caml_call1(pp_type_descr,fmt),a3);
            return caml_call1(fprintf(fmt),_tG_);
           default:
            var a1$6=param[2],a0$9=param[1];
            caml_call1(fprintf(fmt),_tH_);
            caml_call1(fprintf(fmt),_tI_);
            var _aiJ_=0;
            fold_left
             (function(sep,param)
               {if(sep)caml_call1(fprintf(fmt),_tJ_);
                var a1=param[2],a0=param[1];
                caml_call1(fprintf(fmt),_tK_);
                caml_call1(caml_call1(fprintf(fmt),_tL_),a0);
                caml_call1(fprintf(fmt),_tM_);
                caml_call1(caml_call1(pp_cexp,fmt),a1);
                caml_call1(fprintf(fmt),_tN_);
                return 1},
              _aiJ_,
              a0$9);
            caml_call1(fprintf(fmt),_tO_);
            caml_call1(fprintf(fmt),_tP_);
            caml_call1(caml_call1(pp_type_descr,fmt),a1$6);
            return caml_call1(fprintf(fmt),_tQ_)}});
    caml_update_dummy
     (show_cexp,function(x){return caml_call2(asprintf(_tR_),pp_cexp,x)});
    var equal_cexp=function _aiE_(_aiC_,_aiD_){return _aiE_.fun(_aiC_,_aiD_)};
    caml_update_dummy
     (equal_cexp,
      function(lhs,match)
       {if(typeof lhs === "number")
         {if(typeof match === "number")return 1}
        else
         switch(lhs[0])
          {case 0:
            if(typeof match !== "number" && 0 === match[0])
             {var rhs0=match[1],lhs0=lhs[1];return lhs0 === rhs0?1:0}
            break;
           case 1:
            if(typeof match !== "number" && 1 === match[0])
             {var
               rhs1=match[2],
               rhs0$0=match[1],
               lhs1=lhs[2],
               lhs0$0=lhs[1],
               _aih_=caml_string_equal(lhs0$0,rhs0$0);
              return _aih_?lhs1 == rhs1?1:0:_aih_}
            break;
           case 2:
            if(typeof match !== "number" && 2 === match[0])
             {var rhs0$1=match[1],lhs0$1=lhs[1];return lhs0$1 === rhs0$1?1:0}
            break;
           case 3:
            if(typeof match !== "number" && 3 === match[0])
             {var rhs0$2=match[1],lhs0$2=lhs[1];
              return caml_string_equal(lhs0$2,rhs0$2)}
            break;
           case 4:
            if(typeof match !== "number" && 4 === match[0])
             {var
               rhs1$0=match[2],
               rhs0$3=match[1],
               lhs1$0=lhs[2],
               lhs0$3=lhs[1],
               x=lhs0$3,
               y=rhs0$3;
              for(;;)
               {if(x)
                 if(y)
                  {var
                    y$0=y[2],
                    b=y[1],
                    x$0=x[2],
                    a=x[1],
                    _aii_=caml_call1(caml_call1(equal_cexp,a),b);
                   if(_aii_){var x=x$0,y=y$0;continue}
                   var _aij_=_aii_,switch$0=1}
                 else
                  var switch$0=0;
                else
                 if(y)var switch$0=0;else var _aij_=1,switch$0=1;
                if(!switch$0)var _aij_=0;
                return _aij_
                        ?caml_call1(caml_call1(equal_type_descr,lhs1$0),rhs1$0)
                        :_aij_}}
            break;
           case 5:
            if(typeof match !== "number" && 5 === match[0])
             {var
               rhs2=match[3],
               rhs1$1=match[2],
               rhs0$4=match[1],
               lhs2=lhs[3],
               lhs1$1=lhs[2],
               lhs0$4=lhs[1],
               _aik_=caml_string_equal(lhs0$4,rhs0$4);
              if(_aik_)
               {var x$1=lhs1$1,y$1=rhs1$1;
                for(;;)
                 {if(x$1)
                   if(y$1)
                    {var
                      y$2=y$1[2],
                      b$0=y$1[1],
                      x$2=x$1[2],
                      a$0=x$1[1],
                      _ail_=caml_call1(caml_call1(equal_cexp,a$0),b$0);
                     if(_ail_){var x$1=x$2,y$1=y$2;continue}
                     var _aim_=_ail_,switch$1=1}
                   else
                    var switch$1=0;
                  else
                   if(y$1)var switch$1=0;else var _aim_=1,switch$1=1;
                  if(!switch$1)var _aim_=0;
                  var _ain_=_aim_;
                  break}}
              else
               var _ain_=_aik_;
              return _ain_
                      ?caml_call1(caml_call1(equal_type_descr,lhs2),rhs2)
                      :_ain_}
            break;
           case 6:
            if(typeof match !== "number" && 6 === match[0])
             {var
               rhs2$0=match[3],
               rhs1$2=match[2],
               rhs0$5=match[1],
               lhs2$0=lhs[3],
               lhs1$2=lhs[2],
               lhs0$5=lhs[1],
               _aio_=caml_string_equal(lhs0$5,rhs0$5),
               _aip_=
                _aio_?caml_call1(caml_call1(equal_cexp,lhs1$2),rhs1$2):_aio_;
              return _aip_
                      ?caml_call1(caml_call1(equal_type_descr,lhs2$0),rhs2$0)
                      :_aip_}
            break;
           case 7:
            if(typeof match !== "number" && 7 === match[0])
             {var
               rhs2$1=match[3],
               rhs1$3=match[2],
               rhs0$6=match[1],
               lhs2$1=lhs[3],
               lhs1$3=lhs[2],
               lhs0$6=lhs[1],
               _aiq_=caml_string_equal(lhs0$6,rhs0$6);
              if(_aiq_)
               {var x$3=lhs1$3,y$3=rhs1$3;
                for(;;)
                 {if(x$3)
                   if(y$3)
                    {var
                      y$4=y$3[2],
                      b$1=y$3[1],
                      x$4=x$3[2],
                      a$1=x$3[1],
                      _air_=caml_call1(caml_call1(equal_cexp,a$1),b$1);
                     if(_air_){var x$3=x$4,y$3=y$4;continue}
                     var _ais_=_air_,switch$2=1}
                   else
                    var switch$2=0;
                  else
                   if(y$3)var switch$2=0;else var _ais_=1,switch$2=1;
                  if(!switch$2)var _ais_=0;
                  var _ait_=_ais_;
                  break}}
              else
               var _ait_=_aiq_;
              return _ait_
                      ?caml_call1(caml_call1(equal_type_descr,lhs2$1),rhs2$1)
                      :_ait_}
            break;
           case 8:
            if(typeof match !== "number" && 8 === match[0])
             {var
               rhs1$4=match[2],
               rhs0$7=match[1],
               lhs1$4=lhs[2],
               lhs0$7=lhs[1],
               x$5=lhs0$7,
               y$5=rhs0$7;
              for(;;)
               {if(x$5)
                 if(y$5)
                  {var
                    y$6=y$5[2],
                    b$2=y$5[1],
                    x$6=x$5[2],
                    a$2=x$5[1],
                    _aiu_=caml_string_equal(a$2,b$2);
                   if(_aiu_){var x$5=x$6,y$5=y$6;continue}
                   var _aiv_=_aiu_,switch$3=1}
                 else
                  var switch$3=0;
                else
                 if(y$5)var switch$3=0;else var _aiv_=1,switch$3=1;
                if(!switch$3)var _aiv_=0;
                return _aiv_
                        ?caml_call1(caml_call1(equal_type_descr,lhs1$4),rhs1$4)
                        :_aiv_}}
            break;
           case 9:
            if(typeof match !== "number" && 9 === match[0])
             {var
               rhs3=match[4],
               rhs2$2=match[3],
               rhs1$5=match[2],
               rhs0$8=match[1],
               lhs3=lhs[4],
               lhs2$2=lhs[3],
               lhs1$5=lhs[2],
               lhs0$8=lhs[1],
               _aiw_=caml_call1(caml_call1(equal_cexp,lhs0$8),rhs0$8),
               _aix_=
                _aiw_?caml_call1(caml_call1(equal_cexp,lhs1$5),rhs1$5):_aiw_,
               _aiy_=
                _aix_?caml_call1(caml_call1(equal_cexp,lhs2$2),rhs2$2):_aix_;
              return _aiy_
                      ?caml_call1(caml_call1(equal_type_descr,lhs3),rhs3)
                      :_aiy_}
            break;
           default:
            if(typeof match !== "number" && 10 === match[0])
             {var
               rhs1$6=match[2],
               rhs0$9=match[1],
               lhs1$6=lhs[2],
               lhs0$9=lhs[1],
               x$7=lhs0$9,
               y$7=rhs0$9;
              for(;;)
               {if(x$7)
                 if(y$7)
                  {var
                    y$8=y$7[2],
                    b$3=y$7[1],
                    x$8=x$7[2],
                    a$3=x$7[1],
                    rhs1$7=b$3[2],
                    rhs0$10=b$3[1],
                    lhs1$7=a$3[2],
                    lhs0$10=a$3[1],
                    _aiz_=caml_string_equal(lhs0$10,rhs0$10),
                    _aiA_=
                     _aiz_?caml_call1(caml_call1(equal_cexp,lhs1$7),rhs1$7):_aiz_;
                   if(_aiA_){var x$7=x$8,y$7=y$8;continue}
                   var _aiB_=_aiA_,switch$4=1}
                 else
                  var switch$4=0;
                else
                 if(y$7)var switch$4=0;else var _aiB_=1,switch$4=1;
                if(!switch$4)var _aiB_=0;
                return _aiB_
                        ?caml_call1(caml_call1(equal_type_descr,lhs1$6),rhs1$6)
                        :_aiB_}}}
        return 0});
    var
     compare_cexp=
      function _aig_(_aie_,_aif_){return _aig_.fun(_aie_,_aif_)};
    caml_update_dummy
     (compare_cexp,
      function(lhs,match)
       {if(typeof lhs === "number")
         {if(typeof match === "number")return 0}
        else
         switch(lhs[0])
          {case 0:
            if(typeof match !== "number" && 0 === match[0])
             {var rhs0=match[1],lhs0=lhs[1];
              return caml_int_compare(lhs0,rhs0)}
            break;
           case 1:
            if(typeof match !== "number" && 1 === match[0])
             {var
               rhs1=match[2],
               rhs0$0=match[1],
               lhs1=lhs[2],
               lhs0$0=lhs[1],
               x=caml_string_compare(lhs0$0,rhs0$0);
              return 0 === x?caml_float_compare(lhs1,rhs1):x}
            break;
           case 2:
            if(typeof match !== "number" && 2 === match[0])
             {var rhs0$1=match[1],lhs0$1=lhs[1];
              return caml_int_compare(lhs0$1,rhs0$1)}
            break;
           case 3:
            if(typeof match !== "number" && 3 === match[0])
             {var rhs0$2=match[1],lhs0$2=lhs[1];
              return caml_string_compare(lhs0$2,rhs0$2)}
            break;
           case 4:
            if(typeof match !== "number" && 4 === match[0])
             {var
               rhs1$0=match[2],
               rhs0$3=match[1],
               lhs1$0=lhs[2],
               lhs0$3=lhs[1],
               x$0=lhs0$3,
               y=rhs0$3;
              for(;;)
               {if(x$0)
                 if(y)
                  {var
                    y$0=y[2],
                    b=y[1],
                    x$1=x$0[2],
                    a=x$0[1],
                    x$2=caml_call1(caml_call1(compare_cexp,a),b);
                   if(0 === x$2){var x$0=x$1,y=y$0;continue}
                   var x$3=x$2}
                 else
                  var x$3=1;
                else
                 var x$3=y?-1:0;
                return 0 === x$3
                        ?caml_call1(caml_call1(compare_type_descr,lhs1$0),rhs1$0)
                        :x$3}}
            break;
           case 5:
            if(typeof match !== "number" && 5 === match[0])
             {var
               rhs2=match[3],
               rhs1$1=match[2],
               rhs0$4=match[1],
               lhs2=lhs[3],
               lhs1$1=lhs[2],
               lhs0$4=lhs[1],
               x$4=caml_string_compare(lhs0$4,rhs0$4);
              if(0 === x$4)
               {var x$5=lhs1$1,y$1=rhs1$1;
                for(;;)
                 {if(x$5)
                   if(y$1)
                    {var
                      y$2=y$1[2],
                      b$0=y$1[1],
                      x$6=x$5[2],
                      a$0=x$5[1],
                      x$7=caml_call1(caml_call1(compare_cexp,a$0),b$0);
                     if(0 === x$7){var x$5=x$6,y$1=y$2;continue}
                     var x$8=x$7}
                   else
                    var x$8=1;
                  else
                   var x$8=y$1?-1:0;
                  return 0 === x$8
                          ?caml_call1(caml_call1(compare_type_descr,lhs2),rhs2)
                          :x$8}}
              return x$4}
            break;
           case 6:
            if(typeof match !== "number" && 6 === match[0])
             {var
               rhs2$0=match[3],
               rhs1$2=match[2],
               rhs0$5=match[1],
               lhs2$0=lhs[3],
               lhs1$2=lhs[2],
               lhs0$5=lhs[1],
               x$9=caml_string_compare(lhs0$5,rhs0$5);
              if(0 === x$9)
               {var x$10=caml_call1(caml_call1(compare_cexp,lhs1$2),rhs1$2);
                return 0 === x$10
                        ?caml_call1(caml_call1(compare_type_descr,lhs2$0),rhs2$0)
                        :x$10}
              return x$9}
            break;
           case 7:
            if(typeof match !== "number" && 7 === match[0])
             {var
               rhs2$1=match[3],
               rhs1$3=match[2],
               rhs0$6=match[1],
               lhs2$1=lhs[3],
               lhs1$3=lhs[2],
               lhs0$6=lhs[1],
               x$11=caml_string_compare(lhs0$6,rhs0$6);
              if(0 === x$11)
               {var x$12=lhs1$3,y$3=rhs1$3;
                for(;;)
                 {if(x$12)
                   if(y$3)
                    {var
                      y$4=y$3[2],
                      b$1=y$3[1],
                      x$13=x$12[2],
                      a$1=x$12[1],
                      x$14=caml_call1(caml_call1(compare_cexp,a$1),b$1);
                     if(0 === x$14){var x$12=x$13,y$3=y$4;continue}
                     var x$15=x$14}
                   else
                    var x$15=1;
                  else
                   var x$15=y$3?-1:0;
                  return 0 === x$15
                          ?caml_call1(caml_call1(compare_type_descr,lhs2$1),rhs2$1)
                          :x$15}}
              return x$11}
            break;
           case 8:
            if(typeof match !== "number" && 8 === match[0])
             {var
               rhs1$4=match[2],
               rhs0$7=match[1],
               lhs1$4=lhs[2],
               lhs0$7=lhs[1],
               x$16=lhs0$7,
               y$5=rhs0$7;
              for(;;)
               {if(x$16)
                 if(y$5)
                  {var
                    y$6=y$5[2],
                    b$2=y$5[1],
                    x$17=x$16[2],
                    a$2=x$16[1],
                    x$18=caml_compare(a$2,b$2);
                   if(0 === x$18){var x$16=x$17,y$5=y$6;continue}
                   var x$19=x$18}
                 else
                  var x$19=1;
                else
                 var x$19=y$5?-1:0;
                return 0 === x$19
                        ?caml_call1(caml_call1(compare_type_descr,lhs1$4),rhs1$4)
                        :x$19}}
            break;
           case 9:
            if(typeof match !== "number" && 9 === match[0])
             {var
               rhs3=match[4],
               rhs2$2=match[3],
               rhs1$5=match[2],
               rhs0$8=match[1],
               lhs3=lhs[4],
               lhs2$2=lhs[3],
               lhs1$5=lhs[2],
               lhs0$8=lhs[1],
               x$20=caml_call1(caml_call1(compare_cexp,lhs0$8),rhs0$8);
              if(0 === x$20)
               {var x$21=caml_call1(caml_call1(compare_cexp,lhs1$5),rhs1$5);
                if(0 === x$21)
                 {var x$22=caml_call1(caml_call1(compare_cexp,lhs2$2),rhs2$2);
                  return 0 === x$22
                          ?caml_call1(caml_call1(compare_type_descr,lhs3),rhs3)
                          :x$22}
                return x$21}
              return x$20}
            break;
           default:
            if(typeof match !== "number" && 10 === match[0])
             {var
               rhs1$6=match[2],
               rhs0$9=match[1],
               lhs1$6=lhs[2],
               lhs0$9=lhs[1],
               x$23=lhs0$9,
               y$7=rhs0$9;
              for(;;)
               {if(x$23)
                 if(y$7)
                  {var
                    y$8=y$7[2],
                    b$3=y$7[1],
                    x$24=x$23[2],
                    a$3=x$23[1],
                    rhs1$7=b$3[2],
                    rhs0$10=b$3[1],
                    lhs1$7=a$3[2],
                    lhs0$10=a$3[1],
                    x$25=caml_compare(lhs0$10,rhs0$10),
                    x$26=
                     0 === x$25
                      ?caml_call1(caml_call1(compare_cexp,lhs1$7),rhs1$7)
                      :x$25;
                   if(0 === x$26){var x$23=x$24,y$7=y$8;continue}
                   var x$27=x$26}
                 else
                  var x$27=1;
                else
                 var x$27=y$7?-1:0;
                return 0 === x$27
                        ?caml_call1(caml_call1(compare_type_descr,lhs1$6),rhs1$6)
                        :x$27}}}
        function to_int(param)
         {if(typeof param === "number")
           return 11;
          else
           switch(param[0])
            {case 0:return 0;
             case 1:return 1;
             case 2:return 2;
             case 3:return 3;
             case 4:return 4;
             case 5:return 5;
             case 6:return 6;
             case 7:return 7;
             case 8:return 8;
             case 9:return 9;
             default:return 10}}
        var _aid_=to_int(match);
        return caml_int_compare(to_int(lhs),_aid_)});
    var
     pp_clhsexp=function _aic_(_aia_,_aib_){return _aic_.fun(_aia_,_aib_)},
     show_clhsexp=function _ah$_(_ah__){return _ah$_.fun(_ah__)};
    caml_update_dummy
     (pp_clhsexp,
      function(fmt,param)
       {if(typeof param === "number")
         return pp_print_string(fmt,_tS_);
        else
         {if(0 === param[0])
           {var a1=param[2],a0=param[1];
            caml_call1(fprintf(fmt),_tT_);
            caml_call1(caml_call1(pp_type_descr,fmt),a0);
            caml_call1(fprintf(fmt),_tU_);
            caml_call1(fprintf(fmt),_tV_);
            var _ah8_=0;
            fold_left
             (function(sep,x)
               {if(sep)caml_call1(fprintf(fmt),_tW_);
                caml_call1(caml_call1(fprintf(fmt),_tX_),x);
                return 1},
              _ah8_,
              a1);
            caml_call1(fprintf(fmt),_tY_);
            return caml_call1(fprintf(fmt),_tZ_)}
          var a0$0=param[1];
          caml_call1(fprintf(fmt),_t0_);
          caml_call1(fprintf(fmt),_t1_);
          var _ah9_=0;
          fold_left
           (function(sep,x)
             {if(sep)caml_call1(fprintf(fmt),_t2_);
              caml_call1(caml_call1(pp_clhsexp,fmt),x);
              return 1},
            _ah9_,
            a0$0);
          caml_call1(fprintf(fmt),_t3_);
          return caml_call1(fprintf(fmt),_t4_)}});
    caml_update_dummy
     (show_clhsexp,
      function(x){return caml_call2(asprintf(_t5_),pp_clhsexp,x)});
    var
     equal_clhsexp=
      function _ah7_(_ah5_,_ah6_){return _ah7_.fun(_ah5_,_ah6_)};
    caml_update_dummy
     (equal_clhsexp,
      function(lhs,match)
       {if(typeof lhs === "number")
         {if(typeof match === "number")return 1}
        else
         if(0 === lhs[0])
          {var _ahZ_=lhs[2],_ah0_=lhs[1];
           if(typeof match !== "number" && 1 !== match[0])
            {var
              rhs1=match[2],
              rhs0=match[1],
              _ah1_=caml_call1(caml_call1(equal_type_descr,_ah0_),rhs0);
             if(_ah1_)
              {var x=_ahZ_,y=rhs1;
               for(;;)
                {if(x)
                  {if(y)
                    {var
                      y$0=y[2],
                      b=y[1],
                      x$0=x[2],
                      a=x[1],
                      _ah2_=caml_string_equal(a,b);
                     if(_ah2_){var x=x$0,y=y$0;continue}
                     return _ah2_}}
                 else
                  if(!y)return 1;
                 return 0}}
             return _ah1_}}
         else
          {var _ah3_=lhs[1];
           if(typeof match !== "number" && 0 !== match[0])
            {var rhs0$0=match[1],x$1=_ah3_,y$1=rhs0$0;
             for(;;)
              {if(x$1)
                {if(y$1)
                  {var
                    y$2=y$1[2],
                    b$0=y$1[1],
                    x$2=x$1[2],
                    a$0=x$1[1],
                    _ah4_=caml_call1(caml_call1(equal_clhsexp,a$0),b$0);
                   if(_ah4_){var x$1=x$2,y$1=y$2;continue}
                   return _ah4_}}
               else
                if(!y$1)return 1;
               return 0}}}
        return 0});
    var
     compare_clhsexp=
      function _ahY_(_ahW_,_ahX_){return _ahY_.fun(_ahW_,_ahX_)};
    caml_update_dummy
     (compare_clhsexp,
      function(lhs,match)
       {if(typeof lhs === "number")
         {if(typeof match === "number")return 0}
        else
         if(0 === lhs[0])
          {var _ahT_=lhs[2],_ahU_=lhs[1];
           if(typeof match !== "number" && 1 !== match[0])
            {var
              rhs1=match[2],
              rhs0=match[1],
              x=caml_call1(caml_call1(compare_type_descr,_ahU_),rhs0);
             if(0 === x)
              {var x$0=_ahT_,y=rhs1;
               for(;;)
                {if(x$0)
                  {if(y)
                    {var
                      y$0=y[2],
                      b=y[1],
                      x$1=x$0[2],
                      a=x$0[1],
                      x$2=caml_compare(a,b);
                     if(0 === x$2){var x$0=x$1,y=y$0;continue}
                     return x$2}
                   return 1}
                 return y?-1:0}}
             return x}}
         else
          {var _ahV_=lhs[1];
           if(typeof match !== "number" && 0 !== match[0])
            {var rhs0$0=match[1],x$3=_ahV_,y$1=rhs0$0;
             for(;;)
              {if(x$3)
                {if(y$1)
                  {var
                    y$2=y$1[2],
                    b$0=y$1[1],
                    x$4=x$3[2],
                    a$0=x$3[1],
                    x$5=caml_call1(caml_call1(compare_clhsexp,a$0),b$0);
                   if(0 === x$5){var x$3=x$4,y$1=y$2;continue}
                   return x$5}
                 return 1}
               return y$1?-1:0}}}
        function to_int(param)
         {return typeof param === "number"?0:0 === param[0]?1:2}
        var _ahS_=to_int(match);
        return caml_int_compare(to_int(lhs),_ahS_)});
    var
     pp_cstmt=function _ahR_(_ahP_,_ahQ_){return _ahR_.fun(_ahP_,_ahQ_)},
     show_cstmt=function _ahO_(_ahN_){return _ahO_.fun(_ahN_)};
    caml_update_dummy
     (pp_cstmt,
      function(fmt,param)
       {if(typeof param === "number")
         return pp_print_string(fmt,_t6_);
        else
         switch(param[0])
          {case 0:
            var a1=param[2],a0=param[1];
            caml_call1(fprintf(fmt),_t7_);
            caml_call1(caml_call1(pp_clhsexp,fmt),a0);
            caml_call1(fprintf(fmt),_t8_);
            if(a1)
             {var x=a1[1];
              pp_print_string(fmt,_t9_);
              caml_call1(caml_call1(pp_cexp,fmt),x);
              pp_print_string(fmt,_t__)}
            else
             pp_print_string(fmt,_t$_);
            return caml_call1(fprintf(fmt),_ua_);
           case 1:
            var a1$0=param[2],a0$0=param[1];
            caml_call1(fprintf(fmt),_ub_);
            caml_call1(caml_call1(pp_clhsexp,fmt),a0$0);
            caml_call1(fprintf(fmt),_uc_);
            caml_call1(caml_call1(pp_cexp,fmt),a1$0);
            return caml_call1(fprintf(fmt),_ud_);
           case 2:
            var a1$1=param[2],a0$1=param[1];
            caml_call1(fprintf(fmt),_ue_);
            caml_call1(caml_call1(pp_clhsexp,fmt),a0$1);
            caml_call1(fprintf(fmt),_uf_);
            caml_call1(caml_call1(pp_cexp,fmt),a1$1);
            return caml_call1(fprintf(fmt),_ug_);
           case 3:
            var a3=param[4],a2=param[3],a1$2=param[2],a0$2=param[1];
            caml_call1(fprintf(fmt),_uh_);
            caml_call1(caml_call1(pp_type_descr,fmt),a0$2);
            caml_call1(fprintf(fmt),_ui_);
            caml_call1(caml_call1(fprintf(fmt),_uj_),a1$2);
            caml_call1(fprintf(fmt),_uk_);
            caml_call1(fprintf(fmt),_ul_);
            var _ahJ_=0;
            fold_left
             (function(sep,param)
               {if(sep)caml_call1(fprintf(fmt),_um_);
                var a1=param[2],a0=param[1];
                caml_call1(fprintf(fmt),_un_);
                caml_call1(caml_call1(pp_arg_type$0,fmt),a0);
                caml_call1(fprintf(fmt),_uo_);
                caml_call1(caml_call1(fprintf(fmt),_up_),a1);
                caml_call1(fprintf(fmt),_uq_);
                return 1},
              _ahJ_,
              a2);
            caml_call1(fprintf(fmt),_ur_);
            caml_call1(fprintf(fmt),_us_);
            caml_call1(caml_call1(pp_cstmt,fmt),a3);
            return caml_call1(fprintf(fmt),_ut_);
           case 4:
            var a0$3=param[1];
            caml_call1(fprintf(fmt),_uu_);
            caml_call1(caml_call1(pp_cexp,fmt),a0$3);
            return caml_call1(fprintf(fmt),_uv_);
           case 5:
            var a1$3=param[2],a0$4=param[1];
            caml_call1(fprintf(fmt),_uw_);
            caml_call1(caml_call1(pp_cexp,fmt),a0$4);
            caml_call1(fprintf(fmt),_ux_);
            caml_call1(caml_call1(pp_cstmt,fmt),a1$3);
            return caml_call1(fprintf(fmt),_uy_);
           case 6:
            var a0$5=param[1];
            caml_call1(fprintf(fmt),_uz_);
            caml_call1(fprintf(fmt),_uA_);
            var _ahK_=0;
            fold_left
             (function(sep,x)
               {if(sep)caml_call1(fprintf(fmt),_uB_);
                caml_call1(caml_call1(pp_cstmt,fmt),x);
                return 1},
              _ahK_,
              a0$5);
            caml_call1(fprintf(fmt),_uC_);
            return caml_call1(fprintf(fmt),_uD_);
           case 7:
            var a2$0=param[3],a1$4=param[2],a0$6=param[1];
            caml_call1(fprintf(fmt),_uE_);
            caml_call1(caml_call1(pp_cexp,fmt),a0$6);
            caml_call1(fprintf(fmt),_uF_);
            caml_call1(caml_call1(pp_cstmt,fmt),a1$4);
            caml_call1(fprintf(fmt),_uG_);
            if(a2$0)
             {var x$0=a2$0[1];
              pp_print_string(fmt,_uH_);
              caml_call1(caml_call1(pp_cstmt,fmt),x$0);
              pp_print_string(fmt,_uI_)}
            else
             pp_print_string(fmt,_uJ_);
            return caml_call1(fprintf(fmt),_uK_);
           case 8:
            var a1$5=param[2],a0$7=param[1];
            caml_call1(fprintf(fmt),_uL_);
            caml_call1(caml_call1(fprintf(fmt),_uM_),a0$7);
            caml_call1(fprintf(fmt),_uN_);
            caml_call1(fprintf(fmt),_uO_);
            var _ahL_=0;
            fold_left
             (function(sep,param)
               {if(sep)caml_call1(fprintf(fmt),_uP_);
                var a1=param[2],a0=param[1];
                caml_call1(fprintf(fmt),_uQ_);
                caml_call1(caml_call1(pp_type_descr,fmt),a0);
                caml_call1(fprintf(fmt),_uR_);
                caml_call1(caml_call1(fprintf(fmt),_uS_),a1);
                caml_call1(fprintf(fmt),_uT_);
                return 1},
              _ahL_,
              a1$5);
            caml_call1(fprintf(fmt),_uU_);
            return caml_call1(fprintf(fmt),_uV_);
           case 9:
            var a1$6=param[2],a0$8=param[1];
            caml_call1(fprintf(fmt),_uW_);
            caml_call1(caml_call1(fprintf(fmt),_uX_),a0$8);
            caml_call1(fprintf(fmt),_uY_);
            caml_call1(caml_call1(pp_type_descr,fmt),a1$6);
            return caml_call1(fprintf(fmt),_uZ_);
           default:
            var a2$1=param[3],a1$7=param[2],a0$9=param[1];
            caml_call1(fprintf(fmt),_u0_);
            caml_call1(caml_call1(pp_type_descr,fmt),a0$9);
            caml_call1(fprintf(fmt),_u1_);
            caml_call1(caml_call1(fprintf(fmt),_u2_),a1$7);
            caml_call1(fprintf(fmt),_u3_);
            caml_call1(fprintf(fmt),_u4_);
            var _ahM_=0;
            fold_left
             (function(sep,param)
               {if(sep)caml_call1(fprintf(fmt),_u5_);
                var a1=param[2],a0=param[1];
                caml_call1(fprintf(fmt),_u6_);
                caml_call1(caml_call1(pp_arg_type$0,fmt),a0);
                caml_call1(fprintf(fmt),_u7_);
                caml_call1(caml_call1(fprintf(fmt),_u8_),a1);
                caml_call1(fprintf(fmt),_u9_);
                return 1},
              _ahM_,
              a2$1);
            caml_call1(fprintf(fmt),_u__);
            return caml_call1(fprintf(fmt),_u$_)}});
    caml_update_dummy
     (show_cstmt,function(x){return caml_call2(asprintf(_va_),pp_cstmt,x)});
    var
     equal_cstmt=
      function _ahI_(_ahG_,_ahH_){return _ahI_.fun(_ahG_,_ahH_)};
    caml_update_dummy
     (equal_cstmt,
      function(lhs,match)
       {if(typeof lhs === "number")
         {if(typeof match === "number")return 1}
        else
         switch(lhs[0])
          {case 0:
            if(typeof match !== "number" && 0 === match[0])
             {var
               rhs1=match[2],
               rhs0=match[1],
               lhs1=lhs[2],
               lhs0=lhs[1],
               _ahl_=caml_call1(caml_call1(equal_clhsexp,lhs0),rhs0);
              if(_ahl_)
               {if(lhs1)
                 {if(rhs1)
                   {var b=rhs1[1],a=lhs1[1];
                    return caml_call1(caml_call1(equal_cexp,a),b)}}
                else
                 if(!rhs1)return 1;
                return 0}
              return _ahl_}
            break;
           case 1:
            if(typeof match !== "number" && 1 === match[0])
             {var
               rhs1$0=match[2],
               rhs0$0=match[1],
               lhs1$0=lhs[2],
               lhs0$0=lhs[1],
               _ahm_=caml_call1(caml_call1(equal_clhsexp,lhs0$0),rhs0$0);
              return _ahm_
                      ?caml_call1(caml_call1(equal_cexp,lhs1$0),rhs1$0)
                      :_ahm_}
            break;
           case 2:
            if(typeof match !== "number" && 2 === match[0])
             {var
               rhs1$1=match[2],
               rhs0$1=match[1],
               lhs1$1=lhs[2],
               lhs0$1=lhs[1],
               _ahn_=caml_call1(caml_call1(equal_clhsexp,lhs0$1),rhs0$1);
              return _ahn_
                      ?caml_call1(caml_call1(equal_cexp,lhs1$1),rhs1$1)
                      :_ahn_}
            break;
           case 3:
            if(typeof match !== "number" && 3 === match[0])
             {var
               rhs3=match[4],
               rhs2=match[3],
               rhs1$2=match[2],
               rhs0$2=match[1],
               lhs3=lhs[4],
               lhs2=lhs[3],
               lhs1$2=lhs[2],
               lhs0$2=lhs[1],
               _aho_=caml_call1(caml_call1(equal_type_descr,lhs0$2),rhs0$2),
               _ahp_=_aho_?caml_string_equal(lhs1$2,rhs1$2):_aho_;
              if(_ahp_)
               {var x=lhs2,y=rhs2;
                for(;;)
                 {if(x)
                   if(y)
                    {var
                      y$0=y[2],
                      b$0=y[1],
                      x$0=x[2],
                      a$0=x[1],
                      rhs1$3=b$0[2],
                      rhs0$3=b$0[1],
                      lhs1$3=a$0[2],
                      lhs0$3=a$0[1],
                      _ahq_=caml_call1(caml_call1(equal_arg_type$0,lhs0$3),rhs0$3),
                      _ahr_=_ahq_?caml_string_equal(lhs1$3,rhs1$3):_ahq_;
                     if(_ahr_){var x=x$0,y=y$0;continue}
                     var _ahs_=_ahr_,switch$0=1}
                   else
                    var switch$0=0;
                  else
                   if(y)var switch$0=0;else var _ahs_=1,switch$0=1;
                  if(!switch$0)var _ahs_=0;
                  var _aht_=_ahs_;
                  break}}
              else
               var _aht_=_ahp_;
              return _aht_?caml_call1(caml_call1(equal_cstmt,lhs3),rhs3):_aht_}
            break;
           case 4:
            if(typeof match !== "number" && 4 === match[0])
             {var rhs0$4=match[1],lhs0$4=lhs[1];
              return caml_call1(caml_call1(equal_cexp,lhs0$4),rhs0$4)}
            break;
           case 5:
            if(typeof match !== "number" && 5 === match[0])
             {var
               rhs1$4=match[2],
               rhs0$5=match[1],
               lhs1$4=lhs[2],
               lhs0$5=lhs[1],
               _ahu_=caml_call1(caml_call1(equal_cexp,lhs0$5),rhs0$5);
              return _ahu_
                      ?caml_call1(caml_call1(equal_cstmt,lhs1$4),rhs1$4)
                      :_ahu_}
            break;
           case 6:
            if(typeof match !== "number" && 6 === match[0])
             {var rhs0$6=match[1],lhs0$6=lhs[1],x$1=lhs0$6,y$1=rhs0$6;
              for(;;)
               {if(x$1)
                 {if(y$1)
                   {var
                     y$2=y$1[2],
                     b$1=y$1[1],
                     x$2=x$1[2],
                     a$1=x$1[1],
                     _ahv_=caml_call1(caml_call1(equal_cstmt,a$1),b$1);
                    if(_ahv_){var x$1=x$2,y$1=y$2;continue}
                    return _ahv_}}
                else
                 if(!y$1)return 1;
                return 0}}
            break;
           case 7:
            if(typeof match !== "number" && 7 === match[0])
             {var
               rhs2$0=match[3],
               rhs1$5=match[2],
               rhs0$7=match[1],
               lhs2$0=lhs[3],
               lhs1$5=lhs[2],
               lhs0$7=lhs[1],
               _ahw_=caml_call1(caml_call1(equal_cexp,lhs0$7),rhs0$7),
               _ahx_=
                _ahw_?caml_call1(caml_call1(equal_cstmt,lhs1$5),rhs1$5):_ahw_;
              if(_ahx_)
               {if(lhs2$0)
                 {if(rhs2$0)
                   {var b$2=rhs2$0[1],a$2=lhs2$0[1];
                    return caml_call1(caml_call1(equal_cstmt,a$2),b$2)}}
                else
                 if(!rhs2$0)return 1;
                return 0}
              return _ahx_}
            break;
           case 8:
            if(typeof match !== "number" && 8 === match[0])
             {var
               rhs1$6=match[2],
               rhs0$8=match[1],
               lhs1$6=lhs[2],
               lhs0$8=lhs[1],
               _ahy_=caml_string_equal(lhs0$8,rhs0$8);
              if(_ahy_)
               {var x$3=lhs1$6,y$3=rhs1$6;
                for(;;)
                 {if(x$3)
                   {if(y$3)
                     {var
                       y$4=y$3[2],
                       b$3=y$3[1],
                       x$4=x$3[2],
                       a$3=x$3[1],
                       rhs1$7=b$3[2],
                       rhs0$9=b$3[1],
                       lhs1$7=a$3[2],
                       lhs0$9=a$3[1],
                       _ahz_=caml_call1(caml_call1(equal_type_descr,lhs0$9),rhs0$9),
                       _ahA_=_ahz_?caml_string_equal(lhs1$7,rhs1$7):_ahz_;
                      if(_ahA_){var x$3=x$4,y$3=y$4;continue}
                      return _ahA_}}
                  else
                   if(!y$3)return 1;
                  return 0}}
              return _ahy_}
            break;
           case 9:
            if(typeof match !== "number" && 9 === match[0])
             {var
               rhs1$8=match[2],
               rhs0$10=match[1],
               lhs1$8=lhs[2],
               lhs0$10=lhs[1],
               _ahB_=caml_string_equal(lhs0$10,rhs0$10);
              return _ahB_
                      ?caml_call1(caml_call1(equal_type_descr,lhs1$8),rhs1$8)
                      :_ahB_}
            break;
           default:
            if(typeof match !== "number" && 10 === match[0])
             {var
               rhs2$1=match[3],
               rhs1$9=match[2],
               rhs0$11=match[1],
               lhs2$1=lhs[3],
               lhs1$9=lhs[2],
               lhs0$11=lhs[1],
               _ahC_=caml_call1(caml_call1(equal_type_descr,lhs0$11),rhs0$11),
               _ahD_=_ahC_?caml_string_equal(lhs1$9,rhs1$9):_ahC_;
              if(_ahD_)
               {var x$5=lhs2$1,y$5=rhs2$1;
                for(;;)
                 {if(x$5)
                   {if(y$5)
                     {var
                       y$6=y$5[2],
                       b$4=y$5[1],
                       x$6=x$5[2],
                       a$4=x$5[1],
                       rhs1$10=b$4[2],
                       rhs0$12=b$4[1],
                       lhs1$10=a$4[2],
                       lhs0$12=a$4[1],
                       _ahE_=
                        caml_call1(caml_call1(equal_arg_type$0,lhs0$12),rhs0$12),
                       _ahF_=_ahE_?caml_string_equal(lhs1$10,rhs1$10):_ahE_;
                      if(_ahF_){var x$5=x$6,y$5=y$6;continue}
                      return _ahF_}}
                  else
                   if(!y$5)return 1;
                  return 0}}
              return _ahD_}}
        return 0});
    var
     compare_cstmt=
      function _ahk_(_ahi_,_ahj_){return _ahk_.fun(_ahi_,_ahj_)};
    caml_update_dummy
     (compare_cstmt,
      function(lhs,match)
       {if(typeof lhs === "number")
         {if(typeof match === "number")return 0}
        else
         switch(lhs[0])
          {case 0:
            if(typeof match !== "number" && 0 === match[0])
             {var
               rhs1=match[2],
               rhs0=match[1],
               lhs1=lhs[2],
               lhs0=lhs[1],
               x=caml_call1(caml_call1(compare_clhsexp,lhs0),rhs0);
              if(0 === x)
               {if(lhs1)
                 {var _ahg_=lhs1[1];
                  if(rhs1)
                   {var b=rhs1[1];
                    return caml_call1(caml_call1(compare_cexp,_ahg_),b)}
                  return 1}
                return rhs1?-1:0}
              return x}
            break;
           case 1:
            if(typeof match !== "number" && 1 === match[0])
             {var
               rhs1$0=match[2],
               rhs0$0=match[1],
               lhs1$0=lhs[2],
               lhs0$0=lhs[1],
               x$0=caml_call1(caml_call1(compare_clhsexp,lhs0$0),rhs0$0);
              return 0 === x$0
                      ?caml_call1(caml_call1(compare_cexp,lhs1$0),rhs1$0)
                      :x$0}
            break;
           case 2:
            if(typeof match !== "number" && 2 === match[0])
             {var
               rhs1$1=match[2],
               rhs0$1=match[1],
               lhs1$1=lhs[2],
               lhs0$1=lhs[1],
               x$1=caml_call1(caml_call1(compare_clhsexp,lhs0$1),rhs0$1);
              return 0 === x$1
                      ?caml_call1(caml_call1(compare_cexp,lhs1$1),rhs1$1)
                      :x$1}
            break;
           case 3:
            if(typeof match !== "number" && 3 === match[0])
             {var
               rhs3=match[4],
               rhs2=match[3],
               rhs1$2=match[2],
               rhs0$2=match[1],
               lhs3=lhs[4],
               lhs2=lhs[3],
               lhs1$2=lhs[2],
               lhs0$2=lhs[1],
               x$2=caml_call1(caml_call1(compare_type_descr,lhs0$2),rhs0$2);
              if(0 === x$2)
               {var x$3=caml_string_compare(lhs1$2,rhs1$2);
                if(0 === x$3)
                 {var x$4=lhs2,y=rhs2;
                  for(;;)
                   {if(x$4)
                     if(y)
                      {var
                        y$0=y[2],
                        b$0=y[1],
                        x$5=x$4[2],
                        a=x$4[1],
                        rhs1$3=b$0[2],
                        rhs0$3=b$0[1],
                        lhs1$3=a[2],
                        lhs0$3=a[1],
                        x$6=caml_call1(caml_call1(compare_arg_type$0,lhs0$3),rhs0$3),
                        x$7=0 === x$6?caml_compare(lhs1$3,rhs1$3):x$6;
                       if(0 === x$7){var x$4=x$5,y=y$0;continue}
                       var x$8=x$7}
                     else
                      var x$8=1;
                    else
                     var x$8=y?-1:0;
                    return 0 === x$8
                            ?caml_call1(caml_call1(compare_cstmt,lhs3),rhs3)
                            :x$8}}
                return x$3}
              return x$2}
            break;
           case 4:
            if(typeof match !== "number" && 4 === match[0])
             {var rhs0$4=match[1],lhs0$4=lhs[1];
              return caml_call1(caml_call1(compare_cexp,lhs0$4),rhs0$4)}
            break;
           case 5:
            if(typeof match !== "number" && 5 === match[0])
             {var
               rhs1$4=match[2],
               rhs0$5=match[1],
               lhs1$4=lhs[2],
               lhs0$5=lhs[1],
               x$9=caml_call1(caml_call1(compare_cexp,lhs0$5),rhs0$5);
              return 0 === x$9
                      ?caml_call1(caml_call1(compare_cstmt,lhs1$4),rhs1$4)
                      :x$9}
            break;
           case 6:
            if(typeof match !== "number" && 6 === match[0])
             {var rhs0$6=match[1],lhs0$6=lhs[1],x$10=lhs0$6,y$1=rhs0$6;
              for(;;)
               {if(x$10)
                 {if(y$1)
                   {var
                     y$2=y$1[2],
                     b$1=y$1[1],
                     x$11=x$10[2],
                     a$0=x$10[1],
                     x$12=caml_call1(caml_call1(compare_cstmt,a$0),b$1);
                    if(0 === x$12){var x$10=x$11,y$1=y$2;continue}
                    return x$12}
                  return 1}
                return y$1?-1:0}}
            break;
           case 7:
            if(typeof match !== "number" && 7 === match[0])
             {var
               rhs2$0=match[3],
               rhs1$5=match[2],
               rhs0$7=match[1],
               lhs2$0=lhs[3],
               lhs1$5=lhs[2],
               lhs0$7=lhs[1],
               x$13=caml_call1(caml_call1(compare_cexp,lhs0$7),rhs0$7);
              if(0 === x$13)
               {var x$14=caml_call1(caml_call1(compare_cstmt,lhs1$5),rhs1$5);
                if(0 === x$14)
                 {if(lhs2$0)
                   {var _ahh_=lhs2$0[1];
                    if(rhs2$0)
                     {var b$2=rhs2$0[1];
                      return caml_call1(caml_call1(compare_cstmt,_ahh_),b$2)}
                    return 1}
                  return rhs2$0?-1:0}
                return x$14}
              return x$13}
            break;
           case 8:
            if(typeof match !== "number" && 8 === match[0])
             {var
               rhs1$6=match[2],
               rhs0$8=match[1],
               lhs1$6=lhs[2],
               lhs0$8=lhs[1],
               x$15=caml_string_compare(lhs0$8,rhs0$8);
              if(0 === x$15)
               {var x$16=lhs1$6,y$3=rhs1$6;
                for(;;)
                 {if(x$16)
                   {if(y$3)
                     {var
                       y$4=y$3[2],
                       b$3=y$3[1],
                       x$17=x$16[2],
                       a$1=x$16[1],
                       rhs1$7=b$3[2],
                       rhs0$9=b$3[1],
                       lhs1$7=a$1[2],
                       lhs0$9=a$1[1],
                       x$18=
                        caml_call1(caml_call1(compare_type_descr,lhs0$9),rhs0$9),
                       x$19=0 === x$18?caml_compare(lhs1$7,rhs1$7):x$18;
                      if(0 === x$19){var x$16=x$17,y$3=y$4;continue}
                      return x$19}
                    return 1}
                  return y$3?-1:0}}
              return x$15}
            break;
           case 9:
            if(typeof match !== "number" && 9 === match[0])
             {var
               rhs1$8=match[2],
               rhs0$10=match[1],
               lhs1$8=lhs[2],
               lhs0$10=lhs[1],
               x$20=caml_string_compare(lhs0$10,rhs0$10);
              return 0 === x$20
                      ?caml_call1(caml_call1(compare_type_descr,lhs1$8),rhs1$8)
                      :x$20}
            break;
           default:
            if(typeof match !== "number" && 10 === match[0])
             {var
               rhs2$1=match[3],
               rhs1$9=match[2],
               rhs0$11=match[1],
               lhs2$1=lhs[3],
               lhs1$9=lhs[2],
               lhs0$11=lhs[1],
               x$21=caml_call1(caml_call1(compare_type_descr,lhs0$11),rhs0$11);
              if(0 === x$21)
               {var x$22=caml_string_compare(lhs1$9,rhs1$9);
                if(0 === x$22)
                 {var x$23=lhs2$1,y$5=rhs2$1;
                  for(;;)
                   {if(x$23)
                     {if(y$5)
                       {var
                         y$6=y$5[2],
                         b$4=y$5[1],
                         x$24=x$23[2],
                         a$2=x$23[1],
                         rhs1$10=b$4[2],
                         rhs0$12=b$4[1],
                         lhs1$10=a$2[2],
                         lhs0$12=a$2[1],
                         x$25=
                          caml_call1(caml_call1(compare_arg_type$0,lhs0$12),rhs0$12),
                         x$26=0 === x$25?caml_compare(lhs1$10,rhs1$10):x$25;
                        if(0 === x$26){var x$23=x$24,y$5=y$6;continue}
                        return x$26}
                      return 1}
                    return y$5?-1:0}}
                return x$22}
              return x$21}}
        function to_int(param)
         {if(typeof param === "number")
           return 11;
          else
           switch(param[0])
            {case 0:return 0;
             case 1:return 1;
             case 2:return 2;
             case 3:return 3;
             case 4:return 4;
             case 5:return 5;
             case 6:return 6;
             case 7:return 7;
             case 8:return 8;
             case 9:return 9;
             default:return 10}}
        var _ahf_=to_int(match);
        return caml_int_compare(to_int(lhs),_ahf_)});
    function castType(cast,value)
     {return caml_string_notequal(cast,_vQ_)
              ?caml_string_notequal(cast,_vR_)
                ?caml_string_notequal(cast,_vS_)
                  ?function(buffer)
                    {string(cast,buffer);
                     append(buffer,_vT_);
                     caml_call1(value,buffer);
                     append(buffer,_vU_);
                     return 0}
                  :function(buffer)
                    {append(buffer,_vV_);caml_call1(value,buffer);return 0}
                :function(buffer)
                  {append(buffer,_vW_);caml_call1(value,buffer);return 0}
              :function(buffer)
                {append(buffer,_vX_);caml_call1(value,buffer);return 0}}
    function castOutput(params,typ,value)
     {var
       current_typ=getType(params[5],typ),
       cast=getCast(params[5],current_typ,_vZ_);
      return castType(cast,value)}
    function get(params,header_code,impl_code)
     {var
       output$1=params[4],
       module_name$1=params[6],
       _agT_=params[7],
       n=length(_agT_[2]),
       _agW_=0,
       _agn_=_agT_[2],
       _ago_=
        concat
         (mapi
           (function(i,param)
             {var
               _ahd_=0,
               _ahe_=
                [0,
                 function(buffer)
                  {append(buffer,_vy_);
                   int$0(i,buffer);
                   append(buffer,_vz_);
                   return 0},
                 _ahd_];
              return [0,
                      function(buffer)
                       {append(buffer,_vA_);
                        int$0(i,buffer);
                        append(buffer,_vB_);
                        return 0},
                      _ahe_]},
            _agn_));
      function _agp_(_ahc_){return join_sep(newline$0,_ago_,_ahc_)}
      var
       _agq_=_agT_[2],
       _agr_=
        mapi
         (function(i,param,buffer)
           {append(buffer,_vC_);
            int$0(i,buffer);
            append(buffer,_vD_);
            int$0(i,buffer);
            append(buffer,_vE_);
            return 0},
          _agq_);
      function _ags_(_ahb_){return join_sep(newline$0,_agr_,_ahb_)}
      var
       _agz_=params[7][3],
       _agA_=
        map
         (function(param){return function(_aha_){return string(_vP_,_aha_)}},
          _agz_);
      function _agB_(_ag$_){return join_sep(newline$0,_agA_,_ag$_)}
      var
       _agt_=params[7][2],
       _agu_=
        mapi
         (function(i,param,buffer)
           {append(buffer,_vH_);
            int$0(i,buffer);
            append(buffer,_vI_);
            int$0(i,buffer);
            append(buffer,_vJ_);
            return 0},
          _agt_);
      function _agv_(_ag__){return join_sep(newline$0,_agu_,_ag__)}
      var
       _agw_=params[7][2],
       _agx_=
        mapi
         (function(i,param,buffer)
           {append(buffer,_vK_);
            int$0(i,buffer);
            append(buffer,_vL_);
            int$0(i,buffer);
            append(buffer,_vM_);
            int$0(i,buffer);
            append(buffer,_vN_);
            int$0(i,buffer);
            append(buffer,_vO_);
            return 0},
          _agw_);
      function _agy_(_ag9_){return join_sep(newline$0,_agx_,_ag9_)}
      var
       _agU_=params[7],
       _agK_=_agU_[2],
       inputs=
        mapi
         (function(i,param,buffer)
           {append(buffer,_wg_);
            int$0(i,buffer);
            append(buffer,_wh_);
            int$0(i,buffer);
            append(buffer,_wi_);
            return 0},
          _agK_),
       _agL_=_agU_[3],
       outputs=
        mapi
         (function(i,param,buffer)
           {append(buffer,_wj_);
            int$0(i,buffer);
            append(buffer,_wk_);
            int$0(i,buffer);
            append(buffer,_wl_);
            return 0},
          _agL_),
       _agM_=joinErrors(inputs,outputs);
      function _agN_(_ag8_){return join_sep(newline$0,_agM_,_ag8_)}
      var
       _agV_=params[7],
       _agC_=_agV_[2],
       a$2=
        mapi
         (function(i,s)
           {function value(buffer)
             {append(buffer,_v0_);
              int$0(i,buffer);
              append(buffer,_v1_);
              return 0}
            var
             current_typ=getType(params[5],s),
             cast=getCast(params[5],_vY_,current_typ);
            return castType(cast,value)},
          _agC_),
       _agD_=_agV_[8]?[0,function(_ag7_){return string(_v2_,_ag7_)},a$2]:a$2;
      if(1 < length(_agV_[3]))
       var
        _agE_=0,
        _agF_=
         joinErrors
          (_agD_,[0,function(_ag6_){return string(_v3_,_ag6_)},_agE_]);
      else
       var _agF_=_agD_;
      function underscore(_ag5_){return string(_v4_,_ag5_)}
      var _agG_=_agV_[3];
      if(_agG_)
       if(_agG_[2])
        var
         _agH_=function(_ag3_){return string(_v5_,_ag3_)},
         _agI_=function(_ag2_){return map_sep(underscore,string,_agG_,_ag2_)},
         decl=
          _cX_(_cX_(function(_ag1_){return string(_v6_,_ag1_)},_agI_),_agH_),
         _agJ_=
          mapi
           (function(i,o)
             {var
               value=
                castOutput
                 (params,
                  o,
                  function(buffer)
                   {append(buffer,_v7_);int$0(i,buffer);return 0});
              return function(buffer)
               {append(buffer,_v8_);
                int$0(i,buffer);
                append(buffer,_v9_);
                caml_call1(value,buffer);
                append(buffer,_v__);
                return 0}},
            _agG_),
         copy=function(_ag0_){return join_sep_all(newline$0,_agJ_,_ag0_)},
         ret$0=decl,
         copy$0=copy;
       else
        var
         o=_agG_[1],
         current_typ=getType(params[5],o),
         decl$0=
          function(buffer)
           {string(current_typ,buffer);append(buffer,_wc_);return 0},
         value=castOutput(params,o,function(_ag4_){return string(_wd_,_ag4_)}),
         copy$1=
          function(buffer)
           {append(buffer,_we_);
            caml_call1(value,buffer);
            append(buffer,_wf_);
            return 0},
         ret$0=decl$0,
         copy$0=copy$1;
      else
       var ret$0=ret,copy$0=ret;
      if(params[7][8])
       var
        _agO_=
         function(buffer)
          {string(module_name$1,buffer);append(buffer,_wm_);return 0},
        _agP_=
         function(buffer)
          {string(module_name$1,buffer);append(buffer,_wn_);return 0},
        match=
         [0,
          function(buffer)
           {string(module_name$1,buffer);append(buffer,_wo_);return 0},
          _agP_,
          _agO_];
      else
       var match=[0,function(_agZ_){return string(_wp_,_agZ_)},ret,ret];
      var
       default_call=match[3],
       init_call=match[2],
       main_type=match[1],
       output=params[4],
       module_name=params[6],
       _agQ_=params[7][8]?[0,_wq_,a]:a,
       _agR_=params[7][8]?[0,_wr_,a$0]:a$0;
      function off_args(_agY_){return map_sep(comma,string,_agR_,_agY_)}
      var
       output$0=params[4],
       module_name$0=params[6],
       _agS_=params[7][8]?[0,_wJ_,a$1]:a$1,
       _agX_=
        [0,
         [0,
          function(buffer)
           {newline(buffer);
            append(buffer,_wR_);
            newline(buffer);
            append(buffer,_wS_);
            string(output$1,buffer);
            append(buffer,_wT_);
            newline(buffer);
            newline(buffer);
            caml_call1(impl_code,buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_wU_);
            newline(buffer);
            newline(buffer);
            append(buffer,_wV_);
            string(output$1,buffer);
            append(buffer,_wW_);
            newline(buffer);
            newline(buffer);
            append(buffer,_wX_);
            string(output$1,buffer);
            append(buffer,_wY_);
            newline(buffer);
            append(buffer,_wZ_);
            newline(buffer);
            append(buffer,_w0_);
            newline(buffer);
            append(buffer,_w1_);
            indent$0(_agp_,buffer);
            newline(buffer);
            append(buffer,_w2_);
            main_type(buffer);
            append(buffer,_w3_);
            newline(buffer);
            append(buffer,_w4_);
            string(output$1,buffer);
            append(buffer,_w5_);
            newline(buffer);
            newline(buffer);
            append(buffer,_w6_);
            string(output$1,buffer);
            append(buffer,_w7_);
            string(output$1,buffer);
            append(buffer,_w8_);
            newline(buffer);
            append(buffer,_w9_);
            newline(buffer);
            indent$0(_agN_,buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_w__);
            newline(buffer);
            append(buffer,_w$_);
            newline(buffer);
            append(buffer,_xa_);
            indent$0(_agy_,buffer);
            newline(buffer);
            append(buffer,_xb_);
            indent(buffer);
            caml_call1(ret$0,buffer);
            append(buffer,_v$_);
            string(module_name$1,buffer);
            append(buffer,_wa_);
            join_sep(comma,_agF_,buffer);
            append(buffer,_wb_);
            newline(buffer);
            copy$0(buffer);
            outdent(buffer);
            newline(buffer);
            append(buffer,_xc_);
            newline(buffer);
            append(buffer,_xd_);
            newline(buffer);
            newline(buffer);
            append(buffer,_xe_);
            string(output$1,buffer);
            append(buffer,_xf_);
            string(output$1,buffer);
            append(buffer,_xg_);
            newline(buffer);
            append(buffer,_xh_);
            newline(buffer);
            append(buffer,_xi_);
            indent$0(_ags_,buffer);
            newline(buffer);
            append(buffer,_xj_);
            string(output$1,buffer);
            append(buffer,_xk_);
            newline(buffer);
            append(buffer,_xl_);
            newline(buffer);
            newline(buffer);
            append(buffer,_xm_);
            string(output$1,buffer);
            append(buffer,_xn_);
            newline(buffer);
            append(buffer,_xo_);
            newline(buffer);
            append(buffer,_xp_);
            string(output$1,buffer);
            append(buffer,_xq_);
            string(output$1,buffer);
            append(buffer,_xr_);
            string(output$1,buffer);
            append(buffer,_xs_);
            newline(buffer);
            newline(buffer);
            append(buffer,_xt_);
            init_call(buffer);
            newline(buffer);
            append(buffer,_xu_);
            default_call(buffer);
            newline(buffer);
            append(buffer,_vF_);
            int$0(n,buffer);
            append(buffer,_vG_);
            newline(buffer);
            indent$0(_agB_,buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_xv_);
            newline(buffer);
            append(buffer,_xw_);
            newline(buffer);
            newline(buffer);
            append(buffer,_xx_);
            string(output$1,buffer);
            append(buffer,_xy_);
            string(output$1,buffer);
            append(buffer,_xz_);
            newline(buffer);
            newline(buffer);
            append(buffer,_xA_);
            newline(buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_wz_);
            string(output,buffer);
            append(buffer,_wA_);
            string(output,buffer);
            append(buffer,_wB_);
            newline(buffer);
            append(buffer,_wC_);
            string(module_name,buffer);
            append(buffer,_wD_);
            map_sep(comma,string,_agQ_,buffer);
            append(buffer,_wE_);
            newline(buffer);
            append(buffer,_wF_);
            string(module_name,buffer);
            append(buffer,_wG_);
            off_args(buffer);
            append(buffer,_wH_);
            newline(buffer);
            append(buffer,_wI_);
            newline(buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_ws_);
            string(output,buffer);
            append(buffer,_wt_);
            string(output,buffer);
            append(buffer,_wu_);
            newline(buffer);
            append(buffer,_wv_);
            string(module_name,buffer);
            append(buffer,_ww_);
            off_args(buffer);
            append(buffer,_wx_);
            newline(buffer);
            append(buffer,_wy_);
            newline(buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_wK_);
            string(output$0,buffer);
            append(buffer,_wL_);
            string(output$0,buffer);
            append(buffer,_wM_);
            newline(buffer);
            append(buffer,_wN_);
            string(module_name$0,buffer);
            append(buffer,_wO_);
            map_sep(comma,string,_agS_,buffer);
            append(buffer,_wP_);
            newline(buffer);
            append(buffer,_wQ_);
            newline(buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_xB_);
            string(output$1,buffer);
            append(buffer,_xC_);
            string(output$1,buffer);
            append(buffer,_xD_);
            newline(buffer);
            append(buffer,_xE_);
            newline(buffer);
            append(buffer,_xF_);
            indent$0(_agv_,buffer);
            newline(buffer);
            append(buffer,_xG_);
            newline(buffer);
            newline(buffer);
            append(buffer,_xH_);
            newline(buffer);
            append(buffer,_xI_);
            string(output$1,buffer);
            append(buffer,_xJ_);
            string(output$1,buffer);
            append(buffer,_xK_);
            newline(buffer);
            append(buffer,_xL_);
            string(output$1,buffer);
            append(buffer,_xM_);
            newline(buffer);
            append(buffer,_xN_);
            string(output$1,buffer);
            append(buffer,_xO_);
            newline(buffer);
            append(buffer,_xP_);
            string(output$1,buffer);
            append(buffer,_xQ_);
            newline(buffer);
            append(buffer,_xR_);
            newline(buffer);
            newline(buffer);
            append(buffer,_xS_);
            string(output$1,buffer);
            append(buffer,_xT_);
            string(output$1,buffer);
            append(buffer,_xU_);
            newline(buffer);
            newline(buffer);
            append(buffer,_xV_);
            string(output$1,buffer);
            append(buffer,_xW_);
            string(output$1,buffer);
            append(buffer,_xX_);
            newline(buffer);
            append(buffer,_xY_);
            string(output$1,buffer);
            append(buffer,_xZ_);
            string(output$1,buffer);
            append(buffer,_x0_);
            newline(buffer);
            append(buffer,_x1_);
            string(output$1,buffer);
            append(buffer,_x2_);
            string(output$1,buffer);
            append(buffer,_x3_);
            newline(buffer);
            append(buffer,_x4_);
            string(output$1,buffer);
            append(buffer,_x5_);
            string(output$1,buffer);
            append(buffer,_x6_);
            newline(buffer);
            newline(buffer);
            append(buffer,_x7_);
            string(output$1,buffer);
            append(buffer,_x8_);
            newline(buffer);
            append(buffer,_x9_);
            string(output$1,buffer);
            append(buffer,_x__);
            newline(buffer);
            append(buffer,_x$_);
            newline(buffer);
            newline(buffer);
            append(buffer,_ya_);
            newline(buffer);
            return 0},
          _yb_],
         _agW_],
       file=uppercase_ascii$0(params[4]);
      return [0,
              [0,
               function(buffer)
                {newline(buffer);
                 append(buffer,_vb_);
                 newline(buffer);
                 append(buffer,_vc_);
                 string(file,buffer);
                 append(buffer,_vd_);
                 newline(buffer);
                 append(buffer,_ve_);
                 string(file,buffer);
                 append(buffer,_vf_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_vg_);
                 newline(buffer);
                 append(buffer,_vh_);
                 newline(buffer);
                 append(buffer,_vi_);
                 newline(buffer);
                 append(buffer,_vj_);
                 newline(buffer);
                 append(buffer,_vk_);
                 newline(buffer);
                 append(buffer,_vl_);
                 newline(buffer);
                 newline(buffer);
                 caml_call1(header_code,buffer);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_vm_);
                 newline(buffer);
                 append(buffer,_vn_);
                 newline(buffer);
                 append(buffer,_vo_);
                 newline(buffer);
                 append(buffer,_vp_);
                 newline(buffer);
                 append(buffer,_vq_);
                 newline(buffer);
                 append(buffer,_vr_);
                 newline(buffer);
                 append(buffer,_vs_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_vt_);
                 newline(buffer);
                 append(buffer,_vu_);
                 newline(buffer);
                 append(buffer,_vv_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_vw_);
                 string(file,buffer);
                 append(buffer,_vx_);
                 newline(buffer);
                 return 0},
               _yc_],
              _agX_]}
    function modelicaType(m)
     {return caml_string_notequal(m,_yd_)
              ?caml_string_notequal(m,_ye_)
                ?caml_string_notequal(m,_yf_)?failwith(_yg_):_yh_
                :_yi_
              :_yj_}
    function processArgs(config)
     {var _agd_=config[3];
      if(_agd_)
       if(_agd_[2])
        var
         _age_=map(modelicaType,config[3]),
         outputs=
          mapi
           (function(i,typ,buffer)
             {string(typ,buffer);append(buffer,_yk_);int$0(i,buffer);return 0},
            _age_),
         return_type=function(_agk_){return string(_yl_,_agk_)},
         outputs$0=outputs;
       else
        var
         typ=_agd_[1],
         outputs$1=0,
         _agh_=modelicaType(typ),
         return_type=function(_agl_){return string(_agh_,_agl_)},
         outputs$0=outputs$1;
      else
       var
        outputs$2=0,
        return_type$0=function(_agm_){return string(_yo_,_agm_)},
        return_type=return_type$0,
        outputs$0=outputs$2;
      var
       _agf_=map(modelicaType,config[2]),
       inputs=
        mapi
         (function(i,typ,buffer)
           {string(typ,buffer);append(buffer,_ym_);int$0(i,buffer);return 0},
          _agf_);
      function obj(_agj_){return string(_yn_,_agj_)}
      var _agg_=joinErrors([0,obj,inputs],outputs$0);
      function args(_agi_){return join_sep(commaspace,_agg_,_agi_)}
      return [0,return_type,args]}
    function castType$0(cast,value)
     {return caml_string_notequal(cast,_y1_)
              ?caml_string_notequal(cast,_y2_)
                ?caml_string_notequal(cast,_y3_)
                  ?function(buffer)
                    {string(cast,buffer);
                     append(buffer,_y4_);
                     caml_call1(value,buffer);
                     append(buffer,_y5_);
                     return 0}
                  :function(buffer)
                    {append(buffer,_y6_);caml_call1(value,buffer);return 0}
                :function(buffer)
                  {append(buffer,_y7_);caml_call1(value,buffer);return 0}
              :function(buffer)
                {append(buffer,_y8_);caml_call1(value,buffer);return 0}}
    function castOutput$0(params,typ,value)
     {var
       current_typ=getType(params[5],typ),
       cast=getCast(params[5],current_typ,_y__);
      return castType$0(cast,value)}
    function process_input_output_decl(kind,names,types)
     {var
       _agb_=
        map2
         (function(name,typ)
           {var
             motype=
              caml_string_notequal(typ,_AK_)
               ?caml_string_notequal(typ,_AL_)
                 ?caml_string_notequal(typ,_AM_)
                   ?caml_string_notequal(typ,_AN_)?failwith(_a_(_AO_,typ)):_AP_
                   :_AQ_
                 :_AR_
               :_AS_;
            return function(buffer)
             {string(kind,buffer);
              append(buffer,_AT_);
              string(motype,buffer);
              append(buffer,_AU_);
              string(name,buffer);
              append(buffer,_AV_);
              return 0}},
          names,
          types);
      return function(_agc_){return join_sep(newline$0,_agb_,_agc_)}}
    function get$0(params,header_code,impl_code)
     {var
       output$4=params[4],
       _afX_=0,
       _afO_=params[7][2],
       input_names=
        mapi
         (function(i,param){return _a_(_AW_,caml_new_string("" + i))},_afO_),
       _afP_=params[7][3],
       output_names=
        mapi
         (function(i,param){return _a_(_AX_,caml_new_string("" + i))},_afP_),
       _afQ_=params[7][2],
       input_array_names=
        mapi
         (function(i,param)
           {return _a_(_AZ_,_a_(caml_new_string("" + (i + 1 | 0)),_AY_))},
          _afQ_),
       _afR_=params[7][3],
       output_array_names=
        mapi
         (function(i,param)
           {return _a_(_A1_,_a_(caml_new_string("" + (i + 1 | 0)),_A0_))},
          _afR_),
       nin=length(params[7][2]),
       nout=length(params[7][3]),
       _afS_=[0,_A2_,input_names];
      function process_ext_call_inputs(_aga_)
       {return map_sep(commaspace,string,_afS_,_aga_)}
      var
       process_input_decl=
        process_input_output_decl(_A3_,input_names,params[7][2]),
       process_output_decl=
        process_input_output_decl(_A4_,output_names,params[7][3]),
       _afT_=[0,_A5_,input_array_names];
      function _afU_(_af$_)
       {return map_sep(commaspace,string,output_array_names,_af$_)}
      if(0 === nout)
       var
        ext_calls=
         function(buffer)
          {string(output$4,buffer);
           append(buffer,_A6_);
           process_ext_call_inputs(buffer);
           append(buffer,_A7_);
           return 0};
      else
       if(1 === nout)
        var
         ext_calls=
          function(buffer)
           {append(buffer,_B0_);
            string(output$4,buffer);
            append(buffer,_B1_);
            process_ext_call_inputs(buffer);
            append(buffer,_B2_);
            return 0};
       else
        var
         _afW_=joinErrors([0,_B3_,input_names],output_names),
         ext_calls=
          function(buffer)
           {string(output$4,buffer);
            append(buffer,_B4_);
            map_sep(commaspace,string,_afW_,buffer);
            append(buffer,_B5_);
            return 0};
      var
       _afV_=[1,_a_(params[4],_A8_)],
       _afY_=
        [0,
         [0,
          function(buffer)
           {newline(buffer);
            append(buffer,_A9_);
            string(output$4,buffer);
            newline(buffer);
            append(buffer,_A__);
            newline(buffer);
            append(buffer,_A$_);
            newline(buffer);
            append(buffer,_Ba_);
            int$0(nin,buffer);
            append(buffer,_Bb_);
            int$0(nout,buffer);
            append(buffer,_Bc_);
            newline(buffer);
            append(buffer,_Bd_);
            string(output$4,buffer);
            append(buffer,_Be_);
            string(output$4,buffer);
            append(buffer,_Bf_);
            newline(buffer);
            append(buffer,_Bg_);
            newline(buffer);
            append(buffer,_Bh_);
            newline(buffer);
            append(buffer,_Bi_);
            parenthesize(_afU_,buffer);
            append(buffer,_Bj_);
            map_sep(commaspace,string,_afT_,buffer);
            append(buffer,_Bk_);
            newline(buffer);
            append(buffer,_Bl_);
            newline(buffer);
            append(buffer,_Bm_);
            newline(buffer);
            newline(buffer);
            append(buffer,_Bn_);
            newline(buffer);
            append(buffer,_Bo_);
            string(output$4,buffer);
            append(buffer,_Bp_);
            newline(buffer);
            append(buffer,_Bq_);
            newline(buffer);
            newline(buffer);
            append(buffer,_Br_);
            newline(buffer);
            append(buffer,_Bs_);
            string(output$4,buffer);
            append(buffer,_Bt_);
            newline(buffer);
            append(buffer,_Bu_);
            string(output$4,buffer);
            append(buffer,_Bv_);
            string(output$4,buffer);
            append(buffer,_Bw_);
            string(output$4,buffer);
            append(buffer,_Bx_);
            string(output$4,buffer);
            append(buffer,_By_);
            string(output$4,buffer);
            append(buffer,_Bz_);
            newline(buffer);
            append(buffer,_BA_);
            newline(buffer);
            newline(buffer);
            append(buffer,_BB_);
            newline(buffer);
            append(buffer,_BC_);
            string(output$4,buffer);
            append(buffer,_BD_);
            newline(buffer);
            append(buffer,_BE_);
            string(output$4,buffer);
            append(buffer,_BF_);
            string(output$4,buffer);
            append(buffer,_BG_);
            string(output$4,buffer);
            append(buffer,_BH_);
            string(output$4,buffer);
            append(buffer,_BI_);
            string(output$4,buffer);
            append(buffer,_BJ_);
            newline(buffer);
            append(buffer,_BK_);
            newline(buffer);
            append(buffer,_BL_);
            string(output$4,buffer);
            append(buffer,_BM_);
            newline(buffer);
            newline(buffer);
            append(buffer,_BN_);
            newline(buffer);
            append(buffer,_BO_);
            string(output$4,buffer);
            append(buffer,_BP_);
            newline(buffer);
            caml_call1(process_input_decl,buffer);
            newline(buffer);
            caml_call1(process_output_decl,buffer);
            newline(buffer);
            append(buffer,_BQ_);
            ext_calls(buffer);
            append(buffer,_BR_);
            string(output$4,buffer);
            append(buffer,_BS_);
            string(output$4,buffer);
            append(buffer,_BT_);
            string(output$4,buffer);
            append(buffer,_BU_);
            string(output$4,buffer);
            append(buffer,_BV_);
            newline(buffer);
            append(buffer,_BW_);
            newline(buffer);
            append(buffer,_BX_);
            newline(buffer);
            append(buffer,_BY_);
            string(output$4,buffer);
            append(buffer,_BZ_);
            newline(buffer);
            return 0},
          _afV_],
         _afX_],
       output$3=params[4],
       _afZ_=
        [0,
         [0,
          function(buffer)
           {newline(buffer);
            append(buffer,_Ay_);
            newline(buffer);
            append(buffer,_Az_);
            newline(buffer);
            newline(buffer);
            append(buffer,_AA_);
            newline(buffer);
            newline(buffer);
            append(buffer,_AB_);
            string(output$3,buffer);
            append(buffer,_AC_);
            string(output$3,buffer);
            append(buffer,_AD_);
            newline(buffer);
            newline(buffer);
            append(buffer,_AE_);
            string(output$3,buffer);
            append(buffer,_AF_);
            newline(buffer);
            newline(buffer);
            append(buffer,_AG_);
            string(output$3,buffer);
            append(buffer,_AH_);
            newline(buffer);
            append(buffer,_AI_);
            string(output$3,buffer);
            append(buffer,_AJ_);
            newline(buffer);
            return 0},
          _Ax_],
         _afY_],
       output$2=params[4],
       module_name$1=params[6],
       _afN_=params[7],
       _afA_=_afN_[2],
       a=
        mapi
         (function(i,s)
           {function value(buffer)
             {append(buffer,_y$_);int$0(i,buffer);return 0}
            var
             current_typ=getType(params[5],s),
             cast=getCast(params[5],_y9_,current_typ);
            return castType$0(cast,value)},
          _afA_),
       _afB_=_afN_[8]?[0,function(_af__){return string(_za_,_af__)},a]:a;
      if(1 < length(_afN_[3]))
       var
        _afC_=0,
        _afD_=
         joinErrors
          (_afB_,[0,function(_af9_){return string(_zb_,_af9_)},_afC_]);
      else
       var _afD_=_afB_;
      function underscore(_af8_){return string(_zc_,_af8_)}
      var _afE_=_afN_[3];
      if(_afE_)
       if(_afE_[2])
        var
         _afF_=function(_af6_){return string(_zd_,_af6_)},
         _afG_=function(_af5_){return map_sep(underscore,string,_afE_,_af5_)},
         decl=
          _cX_(_cX_(function(_af4_){return string(_ze_,_af4_)},_afG_),_afF_),
         _afH_=
          mapi
           (function(i,o)
             {var
               value=
                castOutput$0
                 (params,
                  o,
                  function(buffer)
                   {append(buffer,_zf_);int$0(i,buffer);return 0});
              return function(buffer)
               {append(buffer,_zg_);
                int$0(i,buffer);
                append(buffer,_zh_);
                caml_call1(value,buffer);
                append(buffer,_zi_);
                return 0}},
            _afE_),
         copy=function(_af3_){return join_sep_all(newline$0,_afH_,_af3_)},
         ret$1=decl,
         copy$0=copy;
       else
        var
         o=_afE_[1],
         current_typ=getType(params[5],o),
         decl$0=
          function(buffer)
           {string(current_typ,buffer);append(buffer,_zm_);return 0},
         value=
          castOutput$0(params,o,function(_af7_){return string(_zn_,_af7_)}),
         copy$1=
          function(buffer)
           {append(buffer,_zo_);
            caml_call1(value,buffer);
            append(buffer,_zp_);
            return 0},
         ret$1=decl$0,
         copy$0=copy$1;
      else
       var ret$1=ret,copy$0=ret;
      if(params[7][8])
       var
        _afI_=
         function(buffer)
          {string(module_name$1,buffer);append(buffer,_zq_);return 0},
        _afJ_=
         function(buffer)
          {string(module_name$1,buffer);append(buffer,_zr_);return 0},
        match$0=
         [0,
          function(buffer)
           {string(module_name$1,buffer);append(buffer,_zs_);return 0},
          _afJ_,
          _afI_];
      else
       var match$0=[0,function(_af2_){return string(_zt_,_af2_)},ret,ret];
      var
       default_call=match$0[3],
       init_call=match$0[2],
       main_type=match$0[1],
       output$0=params[4],
       module_name=params[6],
       _afK_=params[7][8]?[0,_zu_,a$2]:a$2,
       _afL_=params[7][8]?[0,_zv_,a$3]:a$3;
      function off_args(_af1_){return map_sep(comma,string,_afL_,_af1_)}
      var
       output$1=params[4],
       module_name$0=params[6],
       _afM_=params[7][8]?[0,_zR_,a$4]:a$4,
       match$1=processArgs(params[7]),
       args$0=match$1[2],
       ret$2=match$1[1],
       _af0_=
        [0,
         [0,
          function(buffer)
           {newline(buffer);
            append(buffer,_z1_);
            newline(buffer);
            append(buffer,_z2_);
            string(output$2,buffer);
            append(buffer,_z3_);
            newline(buffer);
            newline(buffer);
            caml_call1(impl_code,buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_z4_);
            newline(buffer);
            newline(buffer);
            append(buffer,_z5_);
            string(output$2,buffer);
            append(buffer,_z6_);
            newline(buffer);
            append(buffer,_z7_);
            newline(buffer);
            append(buffer,_z8_);
            main_type(buffer);
            append(buffer,_z9_);
            main_type(buffer);
            append(buffer,_z__);
            main_type(buffer);
            append(buffer,_z$_);
            newline(buffer);
            append(buffer,_Aa_);
            init_call(buffer);
            newline(buffer);
            append(buffer,_Ab_);
            default_call(buffer);
            newline(buffer);
            append(buffer,_Ac_);
            newline(buffer);
            append(buffer,_Ad_);
            newline(buffer);
            newline(buffer);
            append(buffer,_Ae_);
            string(output$2,buffer);
            append(buffer,_Af_);
            newline(buffer);
            append(buffer,_Ag_);
            newline(buffer);
            append(buffer,_Ah_);
            main_type(buffer);
            append(buffer,_Ai_);
            main_type(buffer);
            append(buffer,_Aj_);
            newline(buffer);
            append(buffer,_Ak_);
            newline(buffer);
            append(buffer,_Al_);
            newline(buffer);
            newline(buffer);
            append(buffer,_Am_);
            caml_call1(ret$2,buffer);
            append(buffer,_An_);
            string(output$2,buffer);
            append(buffer,_Ao_);
            caml_call1(args$0,buffer);
            append(buffer,_Ap_);
            newline(buffer);
            append(buffer,_Aq_);
            newline(buffer);
            append(buffer,_Ar_);
            main_type(buffer);
            append(buffer,_As_);
            main_type(buffer);
            append(buffer,_At_);
            newline(buffer);
            append(buffer,_Au_);
            caml_call1(ret$1,buffer);
            append(buffer,_zj_);
            string(module_name$1,buffer);
            append(buffer,_zk_);
            join_sep(comma,_afD_,buffer);
            append(buffer,_zl_);
            newline(buffer);
            copy$0(buffer);
            newline(buffer);
            append(buffer,_Av_);
            newline(buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_zF_);
            string(output$0,buffer);
            append(buffer,_zG_);
            newline(buffer);
            append(buffer,_zH_);
            main_type(buffer);
            append(buffer,_zI_);
            main_type(buffer);
            append(buffer,_zJ_);
            newline(buffer);
            append(buffer,_zK_);
            string(module_name,buffer);
            append(buffer,_zL_);
            map_sep(comma,string,_afK_,buffer);
            append(buffer,_zM_);
            newline(buffer);
            append(buffer,_zN_);
            string(module_name,buffer);
            append(buffer,_zO_);
            off_args(buffer);
            append(buffer,_zP_);
            newline(buffer);
            append(buffer,_zQ_);
            newline(buffer);
            newline(buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_zw_);
            string(output$0,buffer);
            append(buffer,_zx_);
            newline(buffer);
            append(buffer,_zy_);
            main_type(buffer);
            append(buffer,_zz_);
            main_type(buffer);
            append(buffer,_zA_);
            newline(buffer);
            append(buffer,_zB_);
            string(module_name,buffer);
            append(buffer,_zC_);
            off_args(buffer);
            append(buffer,_zD_);
            newline(buffer);
            append(buffer,_zE_);
            newline(buffer);
            newline(buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_zS_);
            string(output$1,buffer);
            append(buffer,_zT_);
            newline(buffer);
            append(buffer,_zU_);
            main_type(buffer);
            append(buffer,_zV_);
            main_type(buffer);
            append(buffer,_zW_);
            newline(buffer);
            append(buffer,_zX_);
            string(module_name$0,buffer);
            append(buffer,_zY_);
            map_sep(comma,string,_afM_,buffer);
            append(buffer,_zZ_);
            newline(buffer);
            append(buffer,_z0_);
            newline(buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_Aw_);
            newline(buffer);
            return 0},
          _B6_],
         _afZ_],
       file=uppercase_ascii$0(params[4]),
       output=params[4],
       match=processArgs(params[7]),
       args=match[2],
       ret$0=match[1];
      return [0,
              [0,
               function(buffer)
                {newline(buffer);
                 append(buffer,_yp_);
                 newline(buffer);
                 append(buffer,_yq_);
                 string(file,buffer);
                 append(buffer,_yr_);
                 newline(buffer);
                 append(buffer,_ys_);
                 string(file,buffer);
                 append(buffer,_yt_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_yu_);
                 newline(buffer);
                 append(buffer,_yv_);
                 newline(buffer);
                 append(buffer,_yw_);
                 newline(buffer);
                 newline(buffer);
                 caml_call1(header_code,buffer);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_yx_);
                 newline(buffer);
                 append(buffer,_yy_);
                 newline(buffer);
                 append(buffer,_yz_);
                 newline(buffer);
                 append(buffer,_yA_);
                 newline(buffer);
                 append(buffer,_yB_);
                 newline(buffer);
                 append(buffer,_yC_);
                 newline(buffer);
                 append(buffer,_yD_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_yE_);
                 newline(buffer);
                 append(buffer,_yF_);
                 newline(buffer);
                 append(buffer,_yG_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_yH_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_yI_);
                 string(output,buffer);
                 append(buffer,_yJ_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_yK_);
                 string(output,buffer);
                 append(buffer,_yL_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_yM_);
                 caml_call1(ret$0,buffer);
                 append(buffer,_yN_);
                 string(output,buffer);
                 append(buffer,_yO_);
                 caml_call1(args,buffer);
                 append(buffer,_yP_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_yQ_);
                 string(output,buffer);
                 append(buffer,_yR_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_yS_);
                 string(output,buffer);
                 append(buffer,_yT_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_yU_);
                 string(output,buffer);
                 append(buffer,_yV_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_yW_);
                 newline(buffer);
                 append(buffer,_yX_);
                 newline(buffer);
                 append(buffer,_yY_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_yZ_);
                 string(file,buffer);
                 append(buffer,_y0_);
                 newline(buffer);
                 return 0},
               _B7_],
              _af0_]}
    function castType$1(cast,value)
     {return caml_string_notequal(cast,_Cx_)
              ?caml_string_notequal(cast,_Cy_)
                ?caml_string_notequal(cast,_Cz_)
                  ?function(buffer)
                    {string(cast,buffer);
                     append(buffer,_CA_);
                     caml_call1(value,buffer);
                     append(buffer,_CB_);
                     return 0}
                  :function(buffer)
                    {append(buffer,_CC_);caml_call1(value,buffer);return 0}
                :function(buffer)
                  {append(buffer,_CD_);caml_call1(value,buffer);return 0}
              :function(buffer)
                {append(buffer,_CE_);caml_call1(value,buffer);return 0}}
    function castOutput$1(params,typ,value)
     {var
       current_typ=getType(params[5],typ),
       cast=getCast(params[5],current_typ,_CG_);
      return castType$1(cast,value)}
    function get$1(params,header_code,impl_code)
     {var
       output$2=params[4],
       module_name$1=params[6],
       _aeK_=params[7][2],
       _afd_=0;
      if(_aeK_)
       {var _aeL_=_aeK_[2];
        if(_aeL_)
         var
          _aeM_=
           map
            (function(param)
              {return function(_afz_){return string(_Cs_,_afz_)}},
             _aeL_),
          _aeN_=function(_afy_){return join_sep(newline$0,_aeM_,_afy_)},
          inlets=function(_afx_){return indent$0(_aeN_,_afx_)},
          switch$0=1;
        else
         var switch$0=0}
      else
       var switch$0=0;
      if(!switch$0)var inlets=ret;
      var
       _aeO_=params[7][3],
       _aeP_=
        map
         (function(param){return function(_afw_){return string(_Ct_,_afw_)}},
          _aeO_);
      function _aeQ_(_afv_){return join_sep(newline$0,_aeP_,_afv_)}
      var
       _afa_=params[7],
       all_signals=joinErrors(_afa_[2],_afa_[3]),
       dsp_nargs=2 + length(all_signals) | 0,
       _aeR_=
        mapi
         (function(i,param,buffer)
           {append(buffer,_Cu_);int$0(i,buffer);append(buffer,_Cv_);return 0},
          all_signals);
      function _aeS_(buffer){append(buffer,_Cw_);newline(buffer);return 0}
      function _aeT_(_afu_){return join_sep_all(_aeS_,_aeR_,_afu_)}
      var _afb_=params[7];
      function decl_templ(io,index,count,buffer)
       {append(buffer,_CZ_);
        string(io,buffer);
        append(buffer,_C0_);
        int$0(index,buffer);
        append(buffer,_C1_);
        int$0(count,buffer);
        append(buffer,_C2_);
        return 0}
      var
       _ae2_=_afb_[2],
       match=
        fold_left
         (function(param,_afs_)
           {var index=param[3],count=param[2],s=param[1];
            function t(_aft_){return decl_templ(_C4_,index,count,_aft_)}
            return [0,[0,t,s],count + 1 | 0,index + 1 | 0]},
          _C3_,
          _ae2_),
       count=match[2],
       decl1=match[1],
       _ae3_=_afb_[3],
       _ae4_=[0,decl1,count,0],
       match$0=
        fold_left
         (function(param,_afq_)
           {var index=param[3],count=param[2],s=param[1];
            function t(_afr_){return decl_templ(_C5_,index,count,_afr_)}
            return [0,[0,t,s],count + 1 | 0,index + 1 | 0]},
          _ae4_,
          _ae3_),
       count$0=match$0[2],
       decl2=match$0[1];
      function n(buffer)
       {newline(buffer);
        append(buffer,_C6_);
        int$0(count$0,buffer);
        append(buffer,_C7_);
        return 0}
      var _ae5_=rev([0,n,decl2]),last_w=count$0 + 1 | 0;
      function _ae6_(_afp_){return join_sep(newline$0,_ae5_,_afp_)}
      var
       _afc_=params[7],
       _aeU_=_afc_[2],
       a=
        mapi
         (function(i,s)
           {function value(buffer)
             {append(buffer,_CH_);
              int$0(i,buffer);
              append(buffer,_CI_);
              return 0}
            var
             current_typ=getType(params[5],s),
             cast=getCast(params[5],_CF_,current_typ);
            return castType$1(cast,value)},
          _aeU_),
       _aeV_=_afc_[8]?[0,function(_afo_){return string(_CJ_,_afo_)},a]:a;
      if(1 < length(_afc_[3]))
       var
        _aeW_=0,
        _aeX_=
         joinErrors
          (_aeV_,[0,function(_afn_){return string(_CK_,_afn_)},_aeW_]);
      else
       var _aeX_=_aeV_;
      function underscore(_afm_){return string(_CL_,_afm_)}
      var _aeY_=_afc_[3];
      if(_aeY_)
       if(_aeY_[2])
        var
         _aeZ_=function(_afk_){return string(_CM_,_afk_)},
         _ae0_=function(_afj_){return map_sep(underscore,string,_aeY_,_afj_)},
         decl=
          _cX_(_cX_(function(_afi_){return string(_CN_,_afi_)},_ae0_),_aeZ_),
         _ae1_=
          mapi
           (function(i,o)
             {var
               value=
                castOutput$1
                 (params,
                  o,
                  function(buffer)
                   {append(buffer,_CO_);int$0(i,buffer);return 0});
              return function(buffer)
               {append(buffer,_CP_);
                int$0(i,buffer);
                append(buffer,_CQ_);
                caml_call1(value,buffer);
                append(buffer,_CR_);
                return 0}},
            _aeY_),
         copy=function(_afh_){return join_sep_all(newline$0,_ae1_,_afh_)},
         ret$0=decl,
         copy$0=copy;
       else
        var
         o=_aeY_[1],
         current_typ=getType(params[5],o),
         decl$0=
          function(buffer)
           {string(current_typ,buffer);append(buffer,_CV_);return 0},
         value=
          castOutput$1(params,o,function(_afl_){return string(_CW_,_afl_)}),
         copy$1=
          function(buffer)
           {append(buffer,_CX_);
            caml_call1(value,buffer);
            append(buffer,_CY_);
            return 0},
         ret$0=decl$0,
         copy$0=copy$1;
      else
       var ret$0=ret,copy$0=ret;
      if(params[7][8])
       var
        _ae7_=
         function(buffer)
          {string(module_name$1,buffer);append(buffer,_C8_);return 0},
        _ae8_=
         function(buffer)
          {string(module_name$1,buffer);append(buffer,_C9_);return 0},
        match$1=
         [0,
          function(buffer)
           {string(module_name$1,buffer);append(buffer,_C__);return 0},
          _ae8_,
          _ae7_];
      else
       var match$1=[0,function(_afg_){return string(_C$_,_afg_)},ret,ret];
      var
       default_call=match$1[3],
       init_call=match$1[2],
       main_type=match$1[1],
       output$0=params[4],
       module_name=params[6],
       _ae9_=params[7][8]?[0,_Da_,a$5]:a$5,
       _ae__=params[7][8]?[0,_Db_,a$6]:a$6;
      function off_args(_aff_){return map_sep(comma,string,_ae__,_aff_)}
      var
       output$1=params[4],
       module_name$0=params[6],
       _ae$_=params[7][8]?[0,_Dt_,a$7]:a$7,
       _afe_=
        [0,
         [0,
          function(buffer)
           {newline(buffer);
            append(buffer,_DB_);
            newline(buffer);
            append(buffer,_DC_);
            string(output$2,buffer);
            append(buffer,_DD_);
            newline(buffer);
            newline(buffer);
            caml_call1(impl_code,buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_DE_);
            newline(buffer);
            newline(buffer);
            append(buffer,_DF_);
            string(output$2,buffer);
            append(buffer,_DG_);
            newline(buffer);
            newline(buffer);
            append(buffer,_DH_);
            string(output$2,buffer);
            append(buffer,_DI_);
            newline(buffer);
            append(buffer,_DJ_);
            newline(buffer);
            append(buffer,_DK_);
            newline(buffer);
            append(buffer,_DL_);
            main_type(buffer);
            append(buffer,_DM_);
            newline(buffer);
            append(buffer,_DN_);
            string(output$2,buffer);
            append(buffer,_DO_);
            newline(buffer);
            newline(buffer);
            append(buffer,_DP_);
            string(output$2,buffer);
            append(buffer,_DQ_);
            newline(buffer);
            append(buffer,_DR_);
            newline(buffer);
            append(buffer,_DS_);
            string(output$2,buffer);
            append(buffer,_DT_);
            string(output$2,buffer);
            append(buffer,_DU_);
            newline(buffer);
            indent$0(_ae6_,buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_DV_);
            indent(buffer);
            caml_call1(ret$0,buffer);
            append(buffer,_CS_);
            string(module_name$1,buffer);
            append(buffer,_CT_);
            join_sep(comma,_aeX_,buffer);
            append(buffer,_CU_);
            newline(buffer);
            copy$0(buffer);
            outdent(buffer);
            newline(buffer);
            append(buffer,_DW_);
            newline(buffer);
            newline(buffer);
            append(buffer,_DX_);
            int$0(last_w,buffer);
            append(buffer,_DY_);
            newline(buffer);
            append(buffer,_DZ_);
            newline(buffer);
            newline(buffer);
            append(buffer,_D0_);
            string(output$2,buffer);
            append(buffer,_D1_);
            string(output$2,buffer);
            append(buffer,_D2_);
            newline(buffer);
            append(buffer,_D3_);
            newline(buffer);
            append(buffer,_D4_);
            string(output$2,buffer);
            append(buffer,_D5_);
            int$0(dsp_nargs,buffer);
            append(buffer,_D6_);
            newline(buffer);
            append(buffer,_D7_);
            indent$0(_aeT_,buffer);
            newline(buffer);
            append(buffer,_D8_);
            newline(buffer);
            append(buffer,_D9_);
            newline(buffer);
            newline(buffer);
            append(buffer,_D__);
            string(output$2,buffer);
            append(buffer,_D$_);
            newline(buffer);
            append(buffer,_Ea_);
            newline(buffer);
            append(buffer,_Eb_);
            string(output$2,buffer);
            append(buffer,_Ec_);
            string(output$2,buffer);
            append(buffer,_Ed_);
            string(output$2,buffer);
            append(buffer,_Ee_);
            newline(buffer);
            newline(buffer);
            append(buffer,_Ef_);
            init_call(buffer);
            newline(buffer);
            append(buffer,_Eg_);
            default_call(buffer);
            newline(buffer);
            inlets(buffer);
            newline(buffer);
            indent$0(_aeQ_,buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_Eh_);
            newline(buffer);
            append(buffer,_Ei_);
            newline(buffer);
            newline(buffer);
            append(buffer,_Ej_);
            string(output$2,buffer);
            append(buffer,_Ek_);
            string(output$2,buffer);
            append(buffer,_El_);
            newline(buffer);
            newline(buffer);
            append(buffer,_Em_);
            newline(buffer);
            newline(buffer);
            append(buffer,_Dj_);
            string(output$0,buffer);
            append(buffer,_Dk_);
            string(output$0,buffer);
            append(buffer,_Dl_);
            newline(buffer);
            append(buffer,_Dm_);
            string(module_name,buffer);
            append(buffer,_Dn_);
            map_sep(comma,string,_ae9_,buffer);
            append(buffer,_Do_);
            newline(buffer);
            append(buffer,_Dp_);
            string(module_name,buffer);
            append(buffer,_Dq_);
            off_args(buffer);
            append(buffer,_Dr_);
            newline(buffer);
            append(buffer,_Ds_);
            newline(buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_Dc_);
            string(output$0,buffer);
            append(buffer,_Dd_);
            string(output$0,buffer);
            append(buffer,_De_);
            newline(buffer);
            append(buffer,_Df_);
            string(module_name,buffer);
            append(buffer,_Dg_);
            off_args(buffer);
            append(buffer,_Dh_);
            newline(buffer);
            append(buffer,_Di_);
            newline(buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_Du_);
            string(output$1,buffer);
            append(buffer,_Dv_);
            string(output$1,buffer);
            append(buffer,_Dw_);
            newline(buffer);
            append(buffer,_Dx_);
            string(module_name$0,buffer);
            append(buffer,_Dy_);
            map_sep(comma,string,_ae$_,buffer);
            append(buffer,_Dz_);
            newline(buffer);
            append(buffer,_DA_);
            newline(buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_En_);
            string(output$2,buffer);
            append(buffer,_Eo_);
            newline(buffer);
            append(buffer,_Ep_);
            string(output$2,buffer);
            append(buffer,_Eq_);
            string(output$2,buffer);
            append(buffer,_Er_);
            newline(buffer);
            append(buffer,_Es_);
            string(output$2,buffer);
            append(buffer,_Et_);
            newline(buffer);
            append(buffer,_Eu_);
            string(output$2,buffer);
            append(buffer,_Ev_);
            newline(buffer);
            append(buffer,_Ew_);
            string(output$2,buffer);
            append(buffer,_Ex_);
            newline(buffer);
            append(buffer,_Ey_);
            newline(buffer);
            append(buffer,_Ez_);
            newline(buffer);
            newline(buffer);
            append(buffer,_EA_);
            string(output$2,buffer);
            append(buffer,_EB_);
            string(output$2,buffer);
            append(buffer,_EC_);
            newline(buffer);
            append(buffer,_ED_);
            string(output$2,buffer);
            append(buffer,_EE_);
            string(output$2,buffer);
            append(buffer,_EF_);
            newline(buffer);
            newline(buffer);
            append(buffer,_EG_);
            string(output$2,buffer);
            append(buffer,_EH_);
            string(output$2,buffer);
            append(buffer,_EI_);
            newline(buffer);
            append(buffer,_EJ_);
            string(output$2,buffer);
            append(buffer,_EK_);
            string(output$2,buffer);
            append(buffer,_EL_);
            newline(buffer);
            append(buffer,_EM_);
            string(output$2,buffer);
            append(buffer,_EN_);
            string(output$2,buffer);
            append(buffer,_EO_);
            newline(buffer);
            append(buffer,_EP_);
            newline(buffer);
            newline(buffer);
            append(buffer,_EQ_);
            newline(buffer);
            return 0},
          _ER_],
         _afd_],
       file=uppercase_ascii$0(params[4]),
       output=params[4];
      return [0,
              [0,
               function(buffer)
                {newline(buffer);
                 append(buffer,_B8_);
                 newline(buffer);
                 append(buffer,_B9_);
                 string(file,buffer);
                 append(buffer,_B__);
                 newline(buffer);
                 append(buffer,_B$_);
                 string(file,buffer);
                 append(buffer,_Ca_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_Cb_);
                 newline(buffer);
                 append(buffer,_Cc_);
                 newline(buffer);
                 append(buffer,_Cd_);
                 newline(buffer);
                 append(buffer,_Ce_);
                 newline(buffer);
                 newline(buffer);
                 caml_call1(header_code,buffer);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_Cf_);
                 newline(buffer);
                 append(buffer,_Cg_);
                 newline(buffer);
                 append(buffer,_Ch_);
                 newline(buffer);
                 append(buffer,_Ci_);
                 newline(buffer);
                 append(buffer,_Cj_);
                 newline(buffer);
                 append(buffer,_Ck_);
                 newline(buffer);
                 append(buffer,_Cl_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_Cm_);
                 newline(buffer);
                 append(buffer,_Cn_);
                 string(output,buffer);
                 append(buffer,_Co_);
                 newline(buffer);
                 append(buffer,_Cp_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_Cq_);
                 string(file,buffer);
                 append(buffer,_Cr_);
                 newline(buffer);
                 return 0},
               _ES_],
              _afe_]}
    function get$2(params,header_code,impl_code)
     {var
       output$0=params[4],
       module_name$0=params[6],
       _aeI_=0,
       _aeJ_=
        [0,
         [0,
          function(buffer)
           {newline(buffer);
            append(buffer,_FC_);
            string(output$0,buffer);
            append(buffer,_FD_);
            newline(buffer);
            newline(buffer);
            caml_call1(impl_code,buffer);
            newline(buffer);
            newline(buffer);
            append(buffer,_FE_);
            string(output$0,buffer);
            append(buffer,_FF_);
            newline(buffer);
            append(buffer,_FG_);
            newline(buffer);
            append(buffer,_FH_);
            newline(buffer);
            append(buffer,_FI_);
            newline(buffer);
            newline(buffer);
            append(buffer,_FJ_);
            newline(buffer);
            append(buffer,_FK_);
            newline(buffer);
            append(buffer,_FL_);
            newline(buffer);
            append(buffer,_FM_);
            newline(buffer);
            append(buffer,_FN_);
            string(module_name$0,buffer);
            append(buffer,_FO_);
            newline(buffer);
            append(buffer,_FP_);
            newline(buffer);
            append(buffer,_FQ_);
            newline(buffer);
            newline(buffer);
            append(buffer,_FR_);
            newline(buffer);
            append(buffer,_FS_);
            newline(buffer);
            append(buffer,_FT_);
            newline(buffer);
            append(buffer,_FU_);
            newline(buffer);
            newline(buffer);
            return 0},
          _FV_],
         _aeI_],
       file=uppercase_ascii$0(params[4]),
       output=params[4],
       module_name=params[6];
      return [0,
              [0,
               function(buffer)
                {newline(buffer);
                 append(buffer,_ET_);
                 string(file,buffer);
                 append(buffer,_EU_);
                 newline(buffer);
                 append(buffer,_EV_);
                 string(file,buffer);
                 append(buffer,_EW_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_EX_);
                 newline(buffer);
                 append(buffer,_EY_);
                 newline(buffer);
                 append(buffer,_EZ_);
                 newline(buffer);
                 append(buffer,_E0_);
                 newline(buffer);
                 newline(buffer);
                 caml_call1(header_code,buffer);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_E1_);
                 string(output,buffer);
                 append(buffer,_E2_);
                 newline(buffer);
                 append(buffer,_E3_);
                 newline(buffer);
                 append(buffer,_E4_);
                 newline(buffer);
                 append(buffer,_E5_);
                 string(output,buffer);
                 append(buffer,_E6_);
                 newline(buffer);
                 append(buffer,_E7_);
                 newline(buffer);
                 append(buffer,_E8_);
                 string(module_name,buffer);
                 append(buffer,_E9_);
                 newline(buffer);
                 append(buffer,_E__);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_E$_);
                 newline(buffer);
                 append(buffer,_Fa_);
                 string(module_name,buffer);
                 append(buffer,_Fb_);
                 newline(buffer);
                 append(buffer,_Fc_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_Fd_);
                 newline(buffer);
                 append(buffer,_Fe_);
                 newline(buffer);
                 append(buffer,_Ff_);
                 newline(buffer);
                 append(buffer,_Fg_);
                 string(module_name,buffer);
                 append(buffer,_Fh_);
                 newline(buffer);
                 append(buffer,_Fi_);
                 string(module_name,buffer);
                 append(buffer,_Fj_);
                 newline(buffer);
                 append(buffer,_Fk_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_Fl_);
                 newline(buffer);
                 append(buffer,_Fm_);
                 newline(buffer);
                 append(buffer,_Fn_);
                 string(module_name,buffer);
                 append(buffer,_Fo_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_Fp_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_Fq_);
                 newline(buffer);
                 append(buffer,_Fr_);
                 newline(buffer);
                 append(buffer,_Fs_);
                 string(module_name,buffer);
                 append(buffer,_Ft_);
                 newline(buffer);
                 append(buffer,_Fu_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_Fv_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_Fw_);
                 newline(buffer);
                 append(buffer,_Fx_);
                 string(module_name,buffer);
                 append(buffer,_Fy_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_Fz_);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_FA_);
                 string(file,buffer);
                 append(buffer,_FB_);
                 newline(buffer);
                 return 0},
               _FW_],
              _aeJ_]}
    function get$3(params,header_code,impl_code)
     {var
       output=params[4],
       _aeG_=0,
       _aeH_=
        [0,
         [0,
          function(buffer)
           {newline(buffer);
            append(buffer,_F7_);
            newline(buffer);
            append(buffer,_F8_);
            string(output,buffer);
            append(buffer,_F9_);
            newline(buffer);
            newline(buffer);
            caml_call1(impl_code,buffer);
            newline(buffer);
            return 0},
          _F__],
         _aeG_],
       file=uppercase_ascii$0(params[4]);
      return [0,
              [0,
               function(buffer)
                {newline(buffer);
                 append(buffer,_FX_);
                 newline(buffer);
                 append(buffer,_FY_);
                 string(file,buffer);
                 append(buffer,_FZ_);
                 newline(buffer);
                 append(buffer,_F0_);
                 string(file,buffer);
                 append(buffer,_F1_);
                 newline(buffer);
                 append(buffer,_F2_);
                 newline(buffer);
                 append(buffer,_F3_);
                 newline(buffer);
                 append(buffer,_F4_);
                 newline(buffer);
                 newline(buffer);
                 caml_call1(header_code,buffer);
                 newline(buffer);
                 newline(buffer);
                 append(buffer,_F5_);
                 string(file,buffer);
                 append(buffer,_F6_);
                 newline(buffer);
                 return 0},
               _F$_],
              _aeH_]}
    function _Gi_(_aeF_){return string(_Gh_,_aeF_)}
    function dot(_aeD_,_aeE_){return map_sep(_Gi_,string,_aeD_,_aeE_)}
    function isSimple(e)
     {if(typeof e !== "number")
       switch(e[0])
        {case 4:case 6:case 7:case 9:case 10:break;default:return 1}
      return 0}
    function printExp(params,e)
     {if(typeof e === "number")
       return ret;
      else
       switch(e[0])
        {case 0:
          var n=e[1];
          if(0 <= n)return function(_aeC_){return int$0(n,_aeC_)};
          var _ael_=function(_aeB_){return int$0(n,_aeB_)};
          return function(_aeA_){return parenthesize(_ael_,_aeA_)};
         case 1:
          var n$0=e[2],s=e[1];
          if(n$0 < 0)
           {var _aem_=function(_aez_){return string(s,_aez_)};
            return function(_aey_){return parenthesize(_aem_,_aey_)}}
          return function(_aex_){return string(s,_aex_)};
         case 2:
          var v=e[1],_aen_=v?1:0;
          return function(_aew_){return int$0(_aen_,_aew_)};
         case 3:
          var s$0=e[1];
          return function(buffer)
           {append(buffer,_cT_);
            append(buffer,s$0);
            return append(buffer,_cU_)};
         case 4:
          var elems=e[1],_aeo_=function(_aev_){return printExp(params,_aev_)};
          return function(buffer)
           {append(buffer,_Gj_);
            map_sep(comma,_aeo_,elems,buffer);
            append(buffer,_Gk_);
            return 0};
         case 5:
          var
           args=e[2],
           name=e[1],
           _aep_=function(_aeu_){return printExp(params,_aeu_)};
          return function(buffer)
           {string(name,buffer);
            append(buffer,_Gl_);
            map_sep(comma,_aep_,args,buffer);
            append(buffer,_Gm_);
            return 0};
         case 6:
          var e$0=e[2],op=e[1],te=printExp(params,e$0);
          return function(buffer)
           {append(buffer,_Gn_);
            string(op,buffer);
            append(buffer,_Go_);
            caml_call1(te,buffer);
            append(buffer,_Gp_);
            return 0};
         case 7:
          var
           elems$0=e[2],
           op$0=e[1],
           sop=
            function(buffer)
             {append(buffer,_Gq_);
              string(op$0,buffer);
              append(buffer,_Gr_);
              return 0},
           _aeq_=function(_aet_){return printExp(params,_aet_)};
          return function(buffer)
           {append(buffer,_Gs_);
            map_sep(sop,_aeq_,elems$0,buffer);
            append(buffer,_Gt_);
            return 0};
         case 8:
          var name$0=e[1];return function(_aes_){return dot(name$0,_aes_)};
         case 9:
          var
           else$0=e[3],
           then=e[2],
           cond=e[1],
           tcond=printExp(params,cond),
           tthen=printExp(params,then),
           telse=printExp(params,else$0);
          return function(buffer)
           {append(buffer,_Gu_);
            caml_call1(tcond,buffer);
            append(buffer,_Gv_);
            caml_call1(tthen,buffer);
            append(buffer,_Gw_);
            caml_call1(telse,buffer);
            append(buffer,_Gx_);
            return 0};
         default:
          var
           elems$1=e[1],
           _aer_=
            function(param)
             {var value=param[2],name=param[1],tval=printExp(params,value);
              return function(buffer)
               {append(buffer,_GA_);
                string(name,buffer);
                append(buffer,_GB_);
                caml_call1(tval,buffer);
                return 0}};
          return function(buffer)
           {append(buffer,_Gy_);
            map_sep(comma,_aer_,elems$1,buffer);
            append(buffer,_Gz_);
            return 0}}}
    function simplifyArray(typ)
     {if(0 === typ[0]){var name=typ[1];return [0,name,0]}
      var
       size=typ[2],
       sub=typ[1],
       match=simplifyArray(sub),
       sub_size=match[2],
       name$0=match[1];
      return [0,name$0,joinErrors(sub_size,[0,caml_new_string("" + size),0])]}
    function printTypeDescr(typ)
     {var match=simplifyArray(typ),sizes=match[2],kind=match[1];
      return sizes
              ?function(buffer)
                {string(kind,buffer);
                 append(buffer,_GC_);
                 map_sep(comma,string,sizes,buffer);
                 append(buffer,_GD_);
                 return 0}
              :function(_aek_){return string(kind,_aek_)}}
    function printTypeAndName(is_decl,typ,name)
     {var match=simplifyArray(typ),sizes=match[2],kind=match[1];
      function name$0(_aej_){return dot(name,_aej_)}
      return 0 === is_decl
              ?function(buffer){name$0(buffer);return 0}
              :sizes
                ?function(buffer)
                  {string(kind,buffer);
                   append(buffer,_GE_);
                   name$0(buffer);
                   append(buffer,_GF_);
                   map_sep(comma,string,sizes,buffer);
                   append(buffer,_GG_);
                   return 0}
                :function(buffer)
                  {string(kind,buffer);
                   append(buffer,_GH_);
                   name$0(buffer);
                   return 0}}
    function printLhsExp(is_var,e)
     {if(typeof e === "number")
       return ret;
      else
       {if(0 === e[0])
         {var _aeh_=e[1];
          if(0 === _aeh_[0])
           {var name=e[2],typ=_aeh_[1];
            return is_var
                    ?function(buffer)
                      {string(typ,buffer);
                       append(buffer,_GS_);
                       dot(name,buffer);
                       return 0}
                    :function(_aei_){return dot(name,_aei_)}}
          var name$0=e[2];
          return printTypeAndName(is_var,_aeh_,name$0)}
        return failwith(_GT_)}}
    function printFunArg(param)
     {var name=param[2],ntype=param[1];
      if(0 === ntype[0])
       {var _aeg_=ntype[1];
        if(0 === _aeg_[0])
         {var tdescr=printTypeDescr(_aeg_);
          return function(buffer)
           {caml_call1(tdescr,buffer);
            append(buffer,_GU_);
            string(name,buffer);
            return 0}}
        var size=_aeg_[2],typ=_aeg_[1],tdescr$0=printTypeDescr(typ);
        return function(buffer)
         {caml_call1(tdescr$0,buffer);
          append(buffer,_GV_);
          string(name,buffer);
          append(buffer,_GW_);
          int$0(size,buffer);
          append(buffer,_GX_);
          return 0}}
      var typ$0=ntype[1],tdescr$1=printTypeDescr(typ$0);
      return function(buffer)
       {caml_call1(tdescr$1,buffer);
        append(buffer,_GY_);
        string(name,buffer);
        return 0}}
    function printStmt(params,stmt)
     {if(typeof stmt === "number")
       return 0;
      else
       switch(stmt[0])
        {case 0:
          var _adJ_=stmt[1];
          if(typeof _adJ_ === "number")
           {if(!stmt[2])return 0}
          else
           if(0 === _adJ_[0])
            {if(!stmt[2])
              {var tlhs=printLhsExp(1,_adJ_);
               return [0,
                       function(buffer)
                        {caml_call1(tlhs,buffer);append(buffer,_G0_);return 0}]}}
           else
            if(!stmt[2])return failwith(_G1_);
          return failwith(_GZ_);
         case 1:
          var _adK_=stmt[2],_adL_=stmt[1];
          if(typeof _adK_ !== "number")
           switch(_adK_[0])
            {case 0:
             case 1:
             case 2:
             case 4:
              if(params[3])
               {var tlhs$0=printLhsExp(1,_adL_),te=printExp(params,_adK_);
                return [0,
                        function(buffer)
                         {append(buffer,_G3_);
                          caml_call1(tlhs$0,buffer);
                          append(buffer,_G4_);
                          caml_call1(te,buffer);
                          append(buffer,_G5_);
                          return 0}]}
              return 0
             }
          return failwith(_G2_);
         case 2:
          var _adM_=stmt[1];
          if(typeof _adM_ === "number")
           {var value=stmt[2],te$0=printExp(params,value);
            return [0,
                    function(buffer)
                     {caml_call1(te$0,buffer);append(buffer,_G6_);return 0}]}
          else
           {if(0 === _adM_[0])
             {var _adN_=stmt[2],_adO_=_adM_[2];
              if(typeof _adN_ !== "number" && 4 === _adN_[0])
               {var
                 elems=_adN_[1],
                 _adP_=
                  mapi
                   (function(i,e)
                     {var te=printExp(params,e);
                      return function(buffer)
                       {dot(_adO_,buffer);
                        append(buffer,_GP_);
                        int$0(i,buffer);
                        append(buffer,_GQ_);
                        caml_call1(te,buffer);
                        append(buffer,_GR_);
                        return 0}},
                    elems),
                 t=function(_aef_){return join(_adP_,_aef_)};
                return [0,t]}
              var te$1=printExp(params,_adN_);
              return [0,
                      function(buffer)
                       {dot(_adO_,buffer);
                        append(buffer,_G7_);
                        caml_call1(te$1,buffer);
                        append(buffer,_G8_);
                        return 0}]}
            var _adQ_=stmt[2],_adR_=_adM_[1];
            if(typeof _adQ_ !== "number" && 8 === _adQ_[0])
             {var
               name=_adQ_[1],
               is_var=0,
               _adS_=
                mapi
                 (function(i,e)
                   {function var$0(_aee_){return dot(name,_aee_)}
                    if(typeof e === "number")
                     return ret;
                    else
                     {if(0 === e[0])
                       {var _aed_=e[1];
                        if(0 === _aed_[0])
                         {var name$0=e[2];
                          return function(buffer)
                           {dot(name$0,buffer);
                            append(buffer,_GI_);
                            var$0(buffer);
                            append(buffer,_GJ_);
                            int$0(i,buffer);
                            append(buffer,_GK_);
                            return 0}}
                        var name$1=e[2],tdecl=printTypeAndName(is_var,_aed_,name$1);
                        return function(buffer)
                         {caml_call1(tdecl,buffer);
                          append(buffer,_GL_);
                          var$0(buffer);
                          append(buffer,_GM_);
                          int$0(i,buffer);
                          append(buffer,_GN_);
                          return 0}}
                      return failwith(_a_(_GO_,caml_call1(show_clhsexp,e)))}},
                  _adR_),
               t$0=function(_aec_){return join(_adS_,_aec_)};
              return [0,t$0]}
            return failwith(_G9_)}
         case 3:
          var _adT_=stmt[4],_adU_=stmt[3],_adV_=stmt[2],_adW_=stmt[1];
          if(typeof _adT_ !== "number" && 6 === _adT_[0])
           {var
             ret$1=printTypeDescr(_adW_),
             targs$0=
              function(_aeb_)
               {return map_sep(commaspace,printFunArg,_adU_,_aeb_)};
            if(params[3])
             return [0,
                     function(buffer)
                      {caml_call1(ret$1,buffer);
                       append(buffer,_Hf_);
                       string(_adV_,buffer);
                       append(buffer,_Hg_);
                       targs$0(buffer);
                       append(buffer,_Hh_);
                       newline(buffer);
                       return 0}];
            var match=printStmt(params,_adT_);
            if(match)
             {var tbody$0=match[1];
              return [0,
                      function(buffer)
                       {caml_call1(ret$1,buffer);
                        append(buffer,_Hi_);
                        string(_adV_,buffer);
                        append(buffer,_Hj_);
                        targs$0(buffer);
                        append(buffer,_Hk_);
                        caml_call1(tbody$0,buffer);
                        newline(buffer);
                        return 0}]}
            return [0,
                    function(buffer)
                     {caml_call1(ret$1,buffer);
                      append(buffer,_Hl_);
                      string(_adV_,buffer);
                      append(buffer,_Hm_);
                      targs$0(buffer);
                      append(buffer,_Hn_);
                      newline(buffer);
                      return 0}]}
          var
           ret$0=printTypeDescr(_adW_),
           targs=
            function(_aea_)
             {return map_sep(commaspace,printFunArg,_adU_,_aea_)};
          if(params[3])
           return [0,
                   function(buffer)
                    {caml_call1(ret$0,buffer);
                     append(buffer,_G__);
                     string(_adV_,buffer);
                     append(buffer,_G$_);
                     targs(buffer);
                     append(buffer,_Ha_);
                     newline(buffer);
                     return 0}];
          var tbody=get_or(ret,printStmt(params,_adT_));
          return [0,
                  function(buffer)
                   {caml_call1(ret$0,buffer);
                    append(buffer,_Hb_);
                    string(_adV_,buffer);
                    append(buffer,_Hc_);
                    targs(buffer);
                    append(buffer,_Hd_);
                    caml_call1(tbody,buffer);
                    append(buffer,_He_);
                    newline(buffer);
                    return 0}];
         case 4:
          var e1=stmt[1],te$2=printExp(params,e1);
          return [0,
                  function(buffer)
                   {append(buffer,_Ho_);
                    caml_call1(te$2,buffer);
                    append(buffer,_Hp_);
                    return 0}];
         case 5:
          var
           body=stmt[2],
           cond=stmt[1],
           tcond=printExp(params,cond),
           tcond$0=
            isSimple(cond)
             ?function(_ad$_){return parenthesize(tcond,_ad$_)}
             :tcond,
           tbody$1=get_or(semi,printStmt(params,body));
          return [0,
                  function(buffer)
                   {append(buffer,_Hq_);
                    caml_call1(tcond$0,buffer);
                    caml_call1(tbody$1,buffer);
                    return 0}];
         case 6:
          var elems$0=stmt[1],telems=printStmtList(params,elems$0);
          return [0,
                  function(buffer)
                   {append(buffer,_Hr_);
                    indent(buffer);
                    caml_call1(telems,buffer);
                    outdent(buffer);
                    append(buffer,_Hs_);
                    return 0}];
         case 7:
          var _adX_=stmt[3],_adY_=stmt[2],_adZ_=stmt[1];
          if(_adX_)
           {var else$0=_adX_[1],tcond$1=printExp(params,_adZ_);
            if(isSimple(_adZ_))
             var
              _ad0_=function(_ad__){return string(_Ht_,_ad__)},
              _ad1_=function(_ad9_){return string(_Hu_,_ad9_)},
              tcond$2=function(_ad8_){return wrap(_ad1_,_ad0_,tcond$1,_ad8_)};
            else
             var tcond$2=tcond$1;
            var
             tthen=get_or(semi,wrapStmtIfNotBlock(params,_adY_)),
             telse=get_or(semi,wrapStmtIfNotBlock(params,else$0));
            return [0,
                    function(buffer)
                     {append(buffer,_Hv_);
                      caml_call1(tcond$2,buffer);
                      caml_call1(tthen,buffer);
                      newline(buffer);
                      append(buffer,_Hw_);
                      newline(buffer);
                      caml_call1(telse,buffer);
                      return 0}]}
          var tcond$3=printExp(params,_adZ_);
          if(isSimple(_adZ_))
           var
            _ad2_=function(_ad7_){return string(_Hx_,_ad7_)},
            _ad3_=function(_ad6_){return string(_Hy_,_ad6_)},
            tcond$4=function(_ad5_){return wrap(_ad3_,_ad2_,tcond$3,_ad5_)};
          else
           var tcond$4=tcond$3;
          var tthen$0=get_or(semi,wrapStmtIfNotBlock(params,_adY_));
          return [0,
                  function(buffer)
                   {append(buffer,_Hz_);
                    caml_call1(tcond$4,buffer);
                    caml_call1(tthen$0,buffer);
                    return 0}];
         case 8:
          var members=stmt[2],name$0=stmt[1];
          if(params[3])
           {var
             _ad4_=
              function(param)
               {var
                 name=param[2],
                 typ=param[1],
                 tmember=printTypeAndName(1,typ,[0,name,0]);
                return function(buffer)
                 {caml_call1(tmember,buffer);append(buffer,_HA_);return 0}};
            return [0,
                    function(buffer)
                     {append(buffer,_HB_);
                      string(name$0,buffer);
                      append(buffer,_HC_);
                      indent(buffer);
                      map_sep_all(newline$0,_ad4_,members,buffer);
                      outdent(buffer);
                      append(buffer,_HD_);
                      string(name$0,buffer);
                      append(buffer,_HE_);
                      newline(buffer);
                      return 0}]}
          return 0;
         case 9:
          var t2=stmt[2],t1=stmt[1];
          if(params[3])
           {var tdescr=printTypeDescr(t2);
            return [0,
                    function(buffer)
                     {append(buffer,_HF_);
                      string(t1,buffer);
                      append(buffer,_HG_);
                      caml_call1(tdescr,buffer);
                      append(buffer,_HH_);
                      newline(buffer);
                      return 0}]}
          return 0;
         default:
          var args=stmt[3],name$1=stmt[2],ntype=stmt[1];
          if(params[3])
           {var ret$2=printTypeDescr(ntype);
            return [0,
                    function(buffer)
                     {caml_call1(ret$2,buffer);
                      append(buffer,_HI_);
                      string(name$1,buffer);
                      append(buffer,_HJ_);
                      map_sep(commaspace,printFunArg,args,buffer);
                      append(buffer,_HK_);
                      return 0}]}
          return 0}}
    function printStmtList(params,stmts)
     {var
       tstmts=
        filter_map(function(_adI_){return printStmt(params,_adI_)},stmts);
      function _adG_(a){return a}
      return function(_adH_){return map_sep_all(newline$0,_adG_,tstmts,_adH_)}}
    function wrapStmtIfNotBlock(params,stmt)
     {if(typeof stmt !== "number" && 6 === stmt[0])
       return printStmt(params,stmt);
      var match=printStmt(params,stmt);
      if(match)
       {var
         t=match[1],
         _adB_=function(_adF_){return string(_HL_,_adF_)},
         _adC_=function(_adE_){return string(_HM_,_adE_)};
        return [0,function(_adD_){return wrap(_adC_,_adB_,t,_adD_)}]}
      return 0}
    function _IP_(_adA_){return string(_IO_,_adA_)}
    function dot$0(_ady_,_adz_){return map_sep(_IP_,string,_ady_,_adz_)}
    function runtime(_adx_){return string(_IQ_,_adx_)}
    function common(function_decl,module_name,code)
     {function return$0(buffer)
       {caml_call1(function_decl,buffer);
        append(buffer,_IR_);
        newline(buffer);
        append(buffer,_IS_);
        runtime(buffer);
        newline(buffer);
        append(buffer,_IT_);
        string(module_name,buffer);
        append(buffer,_IU_);
        newline(buffer);
        append(buffer,_IV_);
        string(module_name,buffer);
        append(buffer,_IW_);
        newline(buffer);
        append(buffer,_IX_);
        caml_call1(code,buffer);
        newline(buffer);
        append(buffer,_IY_);
        string(module_name,buffer);
        append(buffer,_IZ_);
        string(module_name,buffer);
        append(buffer,_I0_);
        newline(buffer);
        append(buffer,_I1_);
        string(module_name,buffer);
        append(buffer,_I2_);
        string(module_name,buffer);
        append(buffer,_I3_);
        newline(buffer);
        append(buffer,_I4_);
        string(module_name,buffer);
        append(buffer,_I5_);
        string(module_name,buffer);
        append(buffer,_I6_);
        newline(buffer);
        append(buffer,_I7_);
        string(module_name,buffer);
        append(buffer,_I8_);
        string(module_name,buffer);
        append(buffer,_I9_);
        newline(buffer);
        append(buffer,_I__);
        string(module_name,buffer);
        append(buffer,_I$_);
        string(module_name,buffer);
        append(buffer,_Ja_);
        newline(buffer);
        append(buffer,_Jb_);
        string(module_name,buffer);
        append(buffer,_Jc_);
        string(module_name,buffer);
        append(buffer,_Jd_);
        newline(buffer);
        append(buffer,_Je_);
        string(module_name,buffer);
        append(buffer,_Jf_);
        string(module_name,buffer);
        append(buffer,_Jg_);
        newline(buffer);
        append(buffer,_Jh_);
        return 0}
      return return$0}
    function printExp$0(params,e)
     {if(typeof e === "number")
       return ret;
      else
       switch(e[0])
        {case 0:
          var n=e[1];
          return function(buffer)
           {append(buffer,_Jv_);int$0(n,buffer);append(buffer,_Jw_);return 0};
         case 1:
          var n$0=e[2],sf=to_string(n$0);
          return n$0 < 0
                  ?function(buffer)
                    {append(buffer,_Jx_);
                     string(sf,buffer);
                     append(buffer,_Jy_);
                     return 0}
                  :function(_adw_){return string(sf,_adw_)};
         case 2:
          var v=e[1],_adf_=v?_Jz_:_JA_;
          return function(_adv_){return string(_adf_,_adv_)};
         case 3:
          var
           s=e[1],
           _adg_=function(_adu_){return string(s,_adu_)},
           _adh_=function(_adt_){return string(_JB_,_adt_)},
           _adi_=function(_ads_){return string(_JC_,_ads_)};
          return function(_adr_){return wrap(_adi_,_adh_,_adg_,_adr_)};
         case 4:
          var
           elems=e[1],
           _adj_=function(_adq_){return printExp$0(params,_adq_)};
          return function(buffer)
           {append(buffer,_JD_);
            map_sep(comma,_adj_,elems,buffer);
            append(buffer,_JE_);
            return 0};
         case 5:
          var
           args=e[2],
           name=e[1],
           _adk_=function(_adp_){return printExp$0(params,_adp_)};
          return function(buffer)
           {append(buffer,_JF_);
            string(name,buffer);
            append(buffer,_JG_);
            map_sep(comma,_adk_,args,buffer);
            append(buffer,_JH_);
            return 0};
         case 6:
          var e$0=e[2],op=e[1],e_t=printExp$0(params,e$0);
          return function(buffer)
           {append(buffer,_JI_);
            string(op,buffer);
            append(buffer,_JJ_);
            caml_call1(e_t,buffer);
            append(buffer,_JK_);
            return 0};
         case 7:
          var
           elems$0=e[2],
           op$0=e[1],
           op_t=
            function(buffer)
             {append(buffer,_JL_);
              string(op$0,buffer);
              append(buffer,_JM_);
              return 0},
           _adl_=function(_ado_){return printExp$0(params,_ado_)};
          return function(buffer)
           {append(buffer,_JN_);
            map_sep(op_t,_adl_,elems$0,buffer);
            append(buffer,_JO_);
            return 0};
         case 8:
          var name$0=e[1];return function(_adn_){return dot$0(name$0,_adn_)};
         case 9:
          var
           else$0=e[3],
           then=e[2],
           cond=e[1],
           cond_t=printExp$0(params,cond),
           then_t=printExp$0(params,then),
           else_t=printExp$0(params,else$0);
          return function(buffer)
           {append(buffer,_JP_);
            caml_call1(cond_t,buffer);
            append(buffer,_JQ_);
            caml_call1(then_t,buffer);
            append(buffer,_JR_);
            caml_call1(else_t,buffer);
            append(buffer,_JS_);
            return 0};
         default:
          var
           elems$1=e[1],
           _adm_=
            function(param)
             {var
               value=param[2],
               name=param[1],
               value_t=printExp$0(params,value);
              return function(buffer)
               {string(name,buffer);
                append(buffer,_JV_);
                caml_call1(value_t,buffer);
                return 0}};
          return function(buffer)
           {append(buffer,_JT_);
            map_sep(commaspace,_adm_,elems$1,buffer);
            append(buffer,_JU_);
            return 0}}}
    function printLhsExpTuple(var$0,is_var,i,e)
     {function var$1(_ade_){return dot$0(var$0,_ade_)}
      if(typeof e === "number")
       return ret;
      else
       {if(0 === e[0])
         {var name=e[2],name$0=function(_add_){return dot$0(name,_add_)};
          return is_var
                  ?function(buffer)
                    {append(buffer,_JW_);
                     name$0(buffer);
                     append(buffer,_JX_);
                     var$1(buffer);
                     append(buffer,_JY_);
                     int$0(i,buffer);
                     append(buffer,_JZ_);
                     return 0}
                  :function(buffer)
                    {name$0(buffer);
                     append(buffer,_J0_);
                     var$1(buffer);
                     append(buffer,_J1_);
                     int$0(i,buffer);
                     append(buffer,_J2_);
                     return 0}}
        return failwith(_J3_)}}
    function wrapInt(params,is_int,e)
     {var e_t=printExp$0(params,e);
      return is_int
              ?function(buffer)
                {append(buffer,_J4_);
                 caml_call1(e_t,buffer);
                 append(buffer,_J5_);
                 return 0}
              :e_t}
    function printStmt$0(params,stmt)
     {if(typeof stmt === "number")
       return 0;
      else
       switch(stmt[0])
        {case 0:
          var _acL_=stmt[1];
          if(typeof _acL_ === "number")
           return stmt[2]?failwith(_Kf_):0;
          else
           {if(0 === _acL_[0])
             {var _acM_=stmt[2],_acN_=_acL_[2],_acO_=_acL_[1];
              if(_acM_)
               {var
                 value=_acM_[1],
                 is_int=caml_equal(_acO_,_Kg_),
                 value_t=wrapInt(params,is_int,value);
                return [0,
                        function(buffer)
                         {append(buffer,_Kh_);
                          dot$0(_acN_,buffer);
                          append(buffer,_Ki_);
                          caml_call1(value_t,buffer);
                          append(buffer,_Kj_);
                          return 0}]}
              if(0 === _acO_[0])
               {var _acK_=_acO_[1];
                if(caml_string_notequal(_acK_,_J6_))
                 if(caml_string_notequal(_acK_,_J7_))
                  if(caml_string_notequal(_acK_,_J8_))
                   if(caml_string_notequal(_acK_,_J9_))
                    if(caml_string_notequal(_acK_,_J__))
                     var switch$0=0;
                    else
                     var init=_Ka_,switch$0=1;
                   else
                    var init=_Kb_,switch$0=1;
                  else
                   var init=_Kc_,switch$0=1;
                 else
                  var init=_Kd_,switch$0=1;
                else
                 var init=_Ke_,switch$0=1}
              else
               var switch$0=0;
              if(!switch$0)var init=_J$_;
              return [0,
                      function(buffer)
                       {append(buffer,_Kk_);
                        dot$0(_acN_,buffer);
                        append(buffer,_Kl_);
                        string(init,buffer);
                        append(buffer,_Km_);
                        return 0}]}
            return failwith(_Kn_)}
         case 1:
          var _acP_=stmt[1];
          if(typeof _acP_ === "number")
           {var value$0=stmt[2],value_t$0=printExp$0(params,value$0);
            return [0,
                    function(buffer)
                     {caml_call1(value_t$0,buffer);append(buffer,_Ko_);return 0}]}
          else
           {if(0 === _acP_[0])
             {var
               value$1=stmt[2],
               name=_acP_[2],
               tdecr=_acP_[1],
               is_int$0=caml_equal(tdecr,_Kp_),
               value_t$1=wrapInt(params,is_int$0,value$1);
              return [0,
                      function(buffer)
                       {append(buffer,_Kq_);
                        dot$0(name,buffer);
                        append(buffer,_Kr_);
                        caml_call1(value_t$1,buffer);
                        append(buffer,_Ks_);
                        return 0}]}
            var _acQ_=stmt[2];
            if(typeof _acQ_ !== "number" && 8 === _acQ_[0])
             {var
               name$0=_acQ_[1],
               elems=_acP_[1],
               _acR_=1,
               _acS_=
                mapi
                 (function(_adb_,_adc_)
                   {return printLhsExpTuple(name$0,_acR_,_adb_,_adc_)},
                  elems);
              return [0,function(_ada_){return join(_acS_,_ada_)}]}
            return failwith(_Kt_)}
         case 2:
          var _acT_=stmt[1];
          if(typeof _acT_ === "number")
           {var value$2=stmt[2];
            return [0,_cX_(printExp$0(params,value$2),semi)]}
          else
           {if(0 === _acT_[0])
             {var
               value$3=stmt[2],
               name$1=_acT_[2],
               tdecr$0=_acT_[1],
               is_int$1=caml_equal(tdecr$0,_Ku_),
               value_t$2=wrapInt(params,is_int$1,value$3);
              return [0,
                      function(buffer)
                       {dot$0(name$1,buffer);
                        append(buffer,_Kv_);
                        caml_call1(value_t$2,buffer);
                        append(buffer,_Kw_);
                        return 0}]}
            var _acU_=stmt[2],_acV_=_acT_[1];
            if(typeof _acU_ !== "number" && 8 === _acU_[0])
             {var
               name$2=_acU_[1],
               _acW_=0,
               _acX_=
                mapi
                 (function(_ac__,_ac$_)
                   {return printLhsExpTuple(name$2,_acW_,_ac__,_ac$_)},
                  _acV_);
              return [0,function(_ac9_){return join(_acX_,_ac9_)}]}
            return failwith(_Kx_)}
         case 3:
          var _acY_=stmt[4],_acZ_=stmt[3],_ac0_=stmt[2];
          if(typeof _acY_ !== "number" && 6 === _acY_[0])
           {var
             _ac2_=
              caml_string_equal(_ac0_,_a_(params[6],_Jn_))
               ?1
               :caml_string_equal(_ac0_,_a_(params[6],_Jo_))
                 ?1
                 :caml_string_equal(_ac0_,_a_(params[6],_Jp_))
                   ?1
                   :caml_string_equal(_ac0_,_a_(params[6],_Jq_))
                     ?1
                     :caml_string_equal(_ac0_,_a_(params[6],_Jr_))?1:0,
             args=
              _ac2_
               ?_acZ_
                 ?caml_string_notequal(_acZ_[1][2],_Js_)?[0,_Jt_,_acZ_]:_acZ_
                 :_Ju_
               :_acZ_,
             _ac3_=
              function(param)
               {var a=param[2];return function(_ac8_){return string(a,_ac8_)}},
             body_t$0=get_or(semi,printStmt$0(params,_acY_));
            return [0,
                    function(buffer)
                     {append(buffer,_KC_);
                      string(_ac0_,buffer);
                      append(buffer,_KD_);
                      map_sep(comma,_ac3_,args,buffer);
                      append(buffer,_KE_);
                      caml_call1(body_t$0,buffer);
                      return 0}]}
          var
           _ac1_=
            function(param)
             {var a=param[2];return function(_ac7_){return string(a,_ac7_)}},
           body_t=get_or(semi,printStmt$0(params,_acY_));
          return [0,
                  function(buffer)
                   {append(buffer,_Ky_);
                    string(_ac0_,buffer);
                    append(buffer,_Kz_);
                    map_sep(comma,_ac1_,_acZ_,buffer);
                    append(buffer,_KA_);
                    caml_call1(body_t,buffer);
                    append(buffer,_KB_);
                    return 0}];
         case 4:
          var e1=stmt[1],e_t=printExp$0(params,e1);
          return [0,
                  function(buffer)
                   {append(buffer,_KF_);
                    caml_call1(e_t,buffer);
                    append(buffer,_KG_);
                    return 0}];
         case 5:
          var
           body=stmt[2],
           cond=stmt[1],
           cond_t=printExp$0(params,cond),
           body_t$1=get_or(semi,printStmt$0(params,body));
          return [0,
                  function(buffer)
                   {append(buffer,_KH_);
                    caml_call1(cond_t,buffer);
                    append(buffer,_KI_);
                    caml_call1(body_t$1,buffer);
                    return 0}];
         case 6:
          var elems$0=stmt[1],elems_t=printStmtList$0(params,elems$0);
          return [0,
                  function(buffer)
                   {append(buffer,_KJ_);
                    indent(buffer);
                    caml_call1(elems_t,buffer);
                    outdent(buffer);
                    append(buffer,_KK_);
                    return 0}];
         case 7:
          var _ac4_=stmt[3],_ac5_=stmt[2],_ac6_=stmt[1];
          if(_ac4_)
           {var
             else$0=_ac4_[1],
             cond_t$0=printExp$0(params,_ac6_),
             then_t=get_or(semi,printStmt$0(params,_ac5_)),
             else_t=get_or(semi,printStmt$0(params,else$0));
            return [0,
                    function(buffer)
                     {append(buffer,_KL_);
                      caml_call1(cond_t$0,buffer);
                      append(buffer,_KM_);
                      caml_call1(then_t,buffer);
                      newline(buffer);
                      append(buffer,_KN_);
                      newline(buffer);
                      caml_call1(else_t,buffer);
                      return 0}]}
          var
           cond_t$1=printExp$0(params,_ac6_),
           then_t$0=get_or(semi,printStmt$0(params,_ac5_));
          return [0,
                  function(buffer)
                   {append(buffer,_KO_);
                    caml_call1(cond_t$1,buffer);
                    append(buffer,_KP_);
                    caml_call1(then_t$0,buffer);
                    return 0}];
         case 8:return 0;
         case 9:return 0;
         default:return 0}}
    function printStmtList$0(params,stmts)
     {var
       tstmts=
        filter_map(function(_acJ_){return printStmt$0(params,_acJ_)},stmts);
      function _acH_(a){return a}
      return function(_acI_){return map_sep_all(newline$0,_acH_,tstmts,_acI_)}}
    function printTypeDescr$0(typ)
     {if(0 === typ[0])
       {var typ$0=typ[1];
        return caml_string_notequal(typ$0,_KR_)
                ?caml_string_notequal(typ$0,_KS_)
                  ?caml_string_notequal(typ$0,_KT_)
                    ?caml_string_notequal(typ$0,_KU_)
                      ?caml_string_notequal(typ$0,_KV_)
                        ?caml_string_notequal(typ$0,_KW_)
                          ?failwith(_a_(_KX_,typ$0))
                          :_g2_
                        :_gY_
                      :_g0_
                    :_gZ_
                  :_g0_
                :_gY_}
      var tdescr=typ[1];
      return [1,printTypeDescr$0(tdescr)]}
    function printExp$1(m,vars,e)
     {if(typeof e !== "number")
       switch(e[0])
        {case 0:var n=e[1];return [0,_gZ_,[1,n]];
         case 1:var n$0=e[2];return [0,_g0_,[2,n$0]];
         case 2:return 0 === e[1]?_g3_(0):_g3_(1);
         case 8:
          var _acG_=e[1];
          if(_acG_)
           if(!_acG_[2])
            {var name=_acG_[1],var$0=caml_call2(IdMap[23],[0,name,0],vars);
             return var$0}
          break
         }
      return failwith(caml_call1(show_cexp,e))}
    function declareFunctionArg(param,_acE_)
     {var name=_acE_[2],typ=_acE_[1],acc=param[2],m=param[1];
      if(0 === typ[0])
       var td=typ[1],_acF_=[1,printTypeDescr$0(td)];
      else
       var td$0=typ[1],_acF_=printTypeDescr$0(td$0);
      var match=_hd_(m,_acF_,name),var$0=match[2],m$0=match[1];
      return [0,m$0,[0,var$0,acc]]}
    function is_reg(s){return 36 === caml_string_get(s,0)?1:0}
    function printStmt$1(m,vars,stmt)
     {if(typeof stmt !== "number")
       switch(stmt[0])
        {case 0:
          var _acv_=stmt[1];
          if(typeof _acv_ === "number")
           var switch$0=0;
          else
           if(1 === _acv_[0])
            var switch$0=0;
           else
            {var _acw_=_acv_[2];
             if(_acw_)
              if(_acw_[2])
               var switch$0=1;
              else
               {if(!stmt[2])
                 {var name=_acw_[1],typ=_acv_[1];
                  if(is_reg(name))
                   {var
                     typ$0=printTypeDescr$0(typ),
                     match=_hd_(m,typ$0,name),
                     var$0=match[2],
                     m$0=match[1],
                     vars$0=caml_call3(IdMap[4],[0,name,0],var$0,vars);
                    return [0,m$0,vars$0,0]}
                  var
                   typ$1=printTypeDescr$0(typ),
                   alloc=[0,[1,typ$1],[12,typ$1,0,0]],
                   match$0=_hd_(m,typ$1,name),
                   var$1=match$0[2],
                   m$1=match$0[1],
                   vars$1=caml_call3(IdMap[4],[0,name,0],var$1,vars);
                  return [0,m$1,vars$1,[0,_g8_(var$1,alloc),0]]}
                var switch$0=1}
             else
              var switch$0=1}
          break;
         case 2:
          var _acx_=stmt[1];
          if(typeof _acx_ === "number")
           var switch$1=0;
          else
           if(1 === _acx_[0])
            var switch$1=0;
           else
            {var _acy_=_acx_[2];
             if(_acy_)
              if(_acy_[2])
               var switch$1=1;
              else
               {var _acz_=stmt[2],_acA_=_acy_[1],_acB_=_acx_[1];
                if(typeof _acz_ === "number")
                 var switch$2=1;
                else
                 switch(_acz_[0])
                  {case 7:
                    var _acC_=_acz_[2];
                    if(_acC_)
                     {var _acD_=_acC_[2];
                      if(_acD_)
                       {if(!_acD_[2])
                         {var e2=_acD_[1],e1=_acC_[1];
                          if(is_reg(_acA_))
                           {var
                             e1$0=printExp$1(m,vars,e1),
                             e2$0=printExp$1(m,vars,e2),
                             var$3=caml_call2(IdMap[23],[0,_acA_,0],vars);
                            return [0,
                                    m,
                                    vars,
                                    [0,_g8_(var$3,caml_call2(_g7_(0,0),e1$0,e2$0)),0]]}
                          var
                           typ$2=printTypeDescr$0(_acB_),
                           e1$1=printExp$1(m,vars,e1),
                           e2$1=printExp$1(m,vars,e2),
                           var$4=caml_call2(IdMap[23],[0,_acA_,0],vars),
                           match$2=_hd_(m,typ$2,_KY_),
                           tmp=match$2[2],
                           m$2=match$2[1],
                           match$3=_g6_(0,0,tmp,var$4),
                           res$0=match$3[2];
                          return [0,
                                  m$2,
                                  vars,
                                  [0,res$0,[0,_g8_(tmp,caml_call2(_g7_(0,0),e1$1,e2$1)),0]]]}
                        var switch$1=1,switch$2=0}
                      else
                       var switch$1=1,switch$2=0}
                    else
                     var switch$1=1,switch$2=0;
                    break;
                   case 0:
                   case 1:
                   case 2:
                    var
                     rhs=printExp$1(m,vars,_acz_),
                     var$2=caml_call2(IdMap[23],[0,_acA_,0],vars),
                     match$1=_g6_(0,0,rhs,var$2),
                     res=match$1[2];
                    return [0,m,vars,[0,res,0]];
                   default:var switch$2=1}
                if(switch$2)var switch$1=1}
             else
              var switch$1=1}
          break;
         case 4:
          var e=stmt[1],e$0=printExp$1(m,vars,e),r=[18,e$0];
          return [0,m,vars,[0,r,0]]
         }
      return failwith(caml_call1(show_cstmt,stmt))}
    function _K6_(_acu_){return string(_K5_,_acu_)}
    function dot$1(_acs_,_act_){return map_sep(_K6_,string,_acs_,_act_)}
    function printExp$2(params,e)
     {if(typeof e === "number")
       return ret;
      else
       switch(e[0])
        {case 0:var n=e[1];return function(buffer){int$0(n,buffer);return 0};
         case 1:
          var n$0=e[2],sf=to_string(n$0);
          return n$0 < 0
                  ?function(buffer)
                    {append(buffer,_L5_);
                     string(sf,buffer);
                     append(buffer,_L6_);
                     return 0}
                  :function(_acr_){return string(sf,_acr_)};
         case 2:
          var v=e[1],_ab__=v?_L7_:_L8_;
          return function(_acq_){return string(_ab__,_acq_)};
         case 3:
          var
           s=e[1],
           _ab$_=function(_acp_){return string(s,_acp_)},
           _aca_=function(_aco_){return string(_L9_,_aco_)},
           _acb_=function(_acn_){return string(_L__,_acn_)};
          return function(_acm_){return wrap(_acb_,_aca_,_ab$_,_acm_)};
         case 4:
          var
           elems=e[1],
           size=length(elems),
           _acc_=function(_acl_){return printExp$2(params,_acl_)};
          return function(buffer)
           {append(buffer,_L$_);
            int$0(size,buffer);
            append(buffer,_Ma_);
            map_sep(comma,_acc_,elems,buffer);
            append(buffer,_Mb_);
            return 0};
         case 5:
          var _acd_=e[1];
          if(!caml_string_notequal(_acd_,_Mc_))
           {var _acf_=e[2];
            if(_acf_)
             if(!_acf_[2])
              {var arg=_acf_[1],arg_t=printExp$2(params,arg);
               return function(buffer)
                {append(buffer,_Mg_);
                 caml_call1(arg_t,buffer);
                 append(buffer,_Mh_);
                 return 0}}}
          var
           args=e[2],
           _ace_=function(_ack_){return printExp$2(params,_ack_)};
          return function(buffer)
           {append(buffer,_Md_);
            string(_acd_,buffer);
            append(buffer,_Me_);
            map_sep(comma,_ace_,args,buffer);
            append(buffer,_Mf_);
            return 0};
         case 6:
          var e$0=e[2],op=e[1],e_t=printExp$2(params,e$0);
          return function(buffer)
           {append(buffer,_Mi_);
            string(op,buffer);
            append(buffer,_Mj_);
            caml_call1(e_t,buffer);
            append(buffer,_Mk_);
            return 0};
         case 7:
          var
           elems$0=e[2],
           op$0=e[1],
           op_t=
            function(buffer)
             {append(buffer,_Ml_);
              string(op$0,buffer);
              append(buffer,_Mm_);
              return 0},
           _acg_=function(_acj_){return printExp$2(params,_acj_)};
          return function(buffer)
           {append(buffer,_Mn_);
            map_sep(op_t,_acg_,elems$0,buffer);
            append(buffer,_Mo_);
            return 0};
         case 8:
          var name=e[1];return function(_aci_){return dot$1(name,_aci_)};
         case 9:
          var
           else$0=e[3],
           then=e[2],
           cond=e[1],
           cond_t=printExp$2(params,cond),
           then_t=printExp$2(params,then),
           else_t=printExp$2(params,else$0);
          return function(buffer)
           {append(buffer,_Mp_);
            caml_call1(cond_t,buffer);
            append(buffer,_Mq_);
            caml_call1(then_t,buffer);
            append(buffer,_Mr_);
            caml_call1(else_t,buffer);
            append(buffer,_Ms_);
            return 0};
         default:
          var
           elems$1=e[1],
           _ach_=
            function(param)
             {var
               value=param[2],
               name=param[1],
               value_t=printExp$2(params,value);
              return function(buffer)
               {string(name,buffer);
                append(buffer,_Mv_);
                caml_call1(value_t,buffer);
                return 0}};
          return function(buffer)
           {append(buffer,_Mt_);
            map_sep(commaspace,_ach_,elems$1,buffer);
            append(buffer,_Mu_);
            return 0}}}
    function printLhsExpTuple$0(var$0,is_var,i,e)
     {function _ab6_(_ab9_){return string(_Mw_,_ab9_)}
      function var$1(_ab8_){return map_sep(_ab6_,string,var$0,_ab8_)}
      var i1=i + 1 | 0;
      if(typeof e === "number")
       return ret;
      else
       {if(0 === e[0])
         {var name=e[2],name$0=function(_ab7_){return dot$1(name,_ab7_)};
          return is_var
                  ?function(buffer)
                    {append(buffer,_Mx_);
                     name$0(buffer);
                     append(buffer,_My_);
                     var$1(buffer);
                     append(buffer,_Mz_);
                     int$0(i1,buffer);
                     append(buffer,_MA_);
                     return 0}
                  :function(buffer)
                    {name$0(buffer);
                     append(buffer,_MB_);
                     var$1(buffer);
                     append(buffer,_MC_);
                     int$0(i1,buffer);
                     append(buffer,_MD_);
                     return 0}}
        return failwith(_ME_)}}
    function printStmt$2(params,stmt)
     {if(typeof stmt === "number")
       return 0;
      else
       switch(stmt[0])
        {case 0:
          var _abC_=stmt[1];
          if(typeof _abC_ === "number")
           return stmt[2]?failwith(_MQ_):0;
          else
           {if(0 === _abC_[0])
             {var _abD_=stmt[2],_abE_=_abC_[2],_abF_=_abC_[1];
              if(_abD_)
               {var value=_abD_[1],value_t=printExp$2(params,value);
                return [0,
                        function(buffer)
                         {append(buffer,_MR_);
                          dot$1(_abE_,buffer);
                          append(buffer,_MS_);
                          caml_call1(value_t,buffer);
                          append(buffer,_MT_);
                          return 0}]}
              if(0 === _abF_[0])
               {var _abB_=_abF_[1];
                if(caml_string_notequal(_abB_,_MF_))
                 if(caml_string_notequal(_abB_,_MG_))
                  if(caml_string_notequal(_abB_,_MH_))
                   if(caml_string_notequal(_abB_,_MI_))
                    if(caml_string_notequal(_abB_,_MJ_))
                     var switch$0=0;
                    else
                     var init=_ML_,switch$0=1;
                   else
                    var init=_MM_,switch$0=1;
                  else
                   var init=_MN_,switch$0=1;
                 else
                  var init=_MO_,switch$0=1;
                else
                 var init=_MP_,switch$0=1}
              else
               var switch$0=0;
              if(!switch$0)var init=_MK_;
              return [0,
                      function(buffer)
                       {append(buffer,_MU_);
                        dot$1(_abE_,buffer);
                        append(buffer,_MV_);
                        string(init,buffer);
                        append(buffer,_MW_);
                        return 0}]}
            return failwith(_MX_)}
         case 1:
          var _abG_=stmt[1];
          if(typeof _abG_ === "number")
           {var value$0=stmt[2],value_t$0=printExp$2(params,value$0);
            return [0,
                    function(buffer)
                     {caml_call1(value_t$0,buffer);append(buffer,_MY_);return 0}]}
          else
           {if(0 === _abG_[0])
             {var
               value$1=stmt[2],
               name=_abG_[2],
               value_t$1=printExp$2(params,value$1);
              return [0,
                      function(buffer)
                       {append(buffer,_MZ_);
                        dot$1(name,buffer);
                        append(buffer,_M0_);
                        caml_call1(value_t$1,buffer);
                        append(buffer,_M1_);
                        return 0}]}
            var _abH_=stmt[2];
            if(typeof _abH_ !== "number" && 8 === _abH_[0])
             {var
               name$0=_abH_[1],
               elems=_abG_[1],
               _abI_=1,
               _abJ_=
                mapi
                 (function(_ab4_,_ab5_)
                   {return printLhsExpTuple$0(name$0,_abI_,_ab4_,_ab5_)},
                  elems);
              return [0,function(_ab3_){return join(_abJ_,_ab3_)}]}
            return failwith(_M2_)}
         case 2:
          var _abK_=stmt[1];
          if(typeof _abK_ === "number")
           {var value$2=stmt[2];
            return [0,_cX_(printExp$2(params,value$2),semi)]}
          else
           {if(0 === _abK_[0])
             {var
               value$3=stmt[2],
               name$1=_abK_[2],
               value_t$2=printExp$2(params,value$3);
              return [0,
                      function(buffer)
                       {dot$1(name$1,buffer);
                        append(buffer,_M3_);
                        caml_call1(value_t$2,buffer);
                        append(buffer,_M4_);
                        return 0}]}
            var _abL_=stmt[2],_abM_=_abK_[1];
            if(typeof _abL_ !== "number" && 8 === _abL_[0])
             {var
               name$2=_abL_[1],
               _abN_=0,
               _abO_=
                mapi
                 (function(_ab1_,_ab2_)
                   {return printLhsExpTuple$0(name$2,_abN_,_ab1_,_ab2_)},
                  _abM_);
              return [0,function(_ab0_){return join(_abO_,_ab0_)}]}
            return failwith(_M5_)}
         case 3:
          var _abP_=stmt[4],_abQ_=stmt[3],_abR_=stmt[2];
          if(typeof _abP_ !== "number" && 6 === _abP_[0])
           {var
             _abT_=
              caml_string_equal(_abR_,_a_(params[6],_LX_))
               ?1
               :caml_string_equal(_abR_,_a_(params[6],_LY_))
                 ?1
                 :caml_string_equal(_abR_,_a_(params[6],_LZ_))
                   ?1
                   :caml_string_equal(_abR_,_a_(params[6],_L0_))
                     ?1
                     :caml_string_equal(_abR_,_a_(params[6],_L1_))?1:0,
             args=
              _abT_
               ?_abQ_
                 ?caml_string_notequal(_abQ_[1][2],_L2_)?[0,_L3_,_abQ_]:_abQ_
                 :_L4_
               :_abQ_,
             _abU_=
              function(param)
               {var a=param[2];return function(_abZ_){return string(a,_abZ_)}},
             body_t$0=get_or(semi,printStmt$2(params,_abP_));
            return [0,
                    function(buffer)
                     {append(buffer,_M__);
                      string(_abR_,buffer);
                      append(buffer,_M$_);
                      map_sep(comma,_abU_,args,buffer);
                      append(buffer,_Na_);
                      indent(buffer);
                      caml_call1(body_t$0,buffer);
                      outdent(buffer);
                      newline(buffer);
                      append(buffer,_Nb_);
                      newline(buffer);
                      return 0}]}
          var
           _abS_=
            function(param)
             {var a=param[2];return function(_abY_){return string(a,_abY_)}},
           body_t=get_or(semi,printStmt$2(params,_abP_));
          return [0,
                  function(buffer)
                   {append(buffer,_M6_);
                    string(_abR_,buffer);
                    append(buffer,_M7_);
                    map_sep(comma,_abS_,_abQ_,buffer);
                    append(buffer,_M8_);
                    indent(buffer);
                    caml_call1(body_t,buffer);
                    outdent(buffer);
                    newline(buffer);
                    append(buffer,_M9_);
                    newline(buffer);
                    return 0}];
         case 4:
          var e1=stmt[1],e_t=printExp$2(params,e1);
          return [0,
                  function(buffer)
                   {append(buffer,_Nc_);
                    caml_call1(e_t,buffer);
                    append(buffer,_Nd_);
                    return 0}];
         case 5:
          var
           body=stmt[2],
           cond=stmt[1],
           cond_t=printExp$2(params,cond),
           body_t$1=get_or(semi,printStmt$2(params,body));
          return [0,
                  function(buffer)
                   {append(buffer,_Ne_);
                    caml_call1(cond_t,buffer);
                    append(buffer,_Nf_);
                    indent(buffer);
                    caml_call1(body_t$1,buffer);
                    outdent(buffer);
                    append(buffer,_Ng_);
                    return 0}];
         case 6:
          var elems$0=stmt[1],elems_t=printStmtList$1(params,elems$0);
          return [0,function(buffer){caml_call1(elems_t,buffer);return 0}];
         case 7:
          var _abV_=stmt[3],_abW_=stmt[2],_abX_=stmt[1];
          if(_abV_)
           {var
             else$0=_abV_[1],
             cond_t$0=printExp$2(params,_abX_),
             then_t=get_or(semi,printStmt$2(params,_abW_)),
             else_t=get_or(semi,printStmt$2(params,else$0));
            return [0,
                    function(buffer)
                     {append(buffer,_Nh_);
                      caml_call1(cond_t$0,buffer);
                      append(buffer,_Ni_);
                      indent(buffer);
                      caml_call1(then_t,buffer);
                      outdent(buffer);
                      newline(buffer);
                      append(buffer,_Nj_);
                      newline(buffer);
                      indent(buffer);
                      caml_call1(else_t,buffer);
                      outdent(buffer);
                      newline(buffer);
                      append(buffer,_Nk_);
                      return 0}]}
          var
           cond_t$1=printExp$2(params,_abX_),
           then_t$0=get_or(semi,printStmt$2(params,_abW_));
          return [0,
                  function(buffer)
                   {append(buffer,_Nl_);
                    caml_call1(cond_t$1,buffer);
                    append(buffer,_Nm_);
                    indent(buffer);
                    caml_call1(then_t$0,buffer);
                    outdent(buffer);
                    newline(buffer);
                    append(buffer,_Nn_);
                    return 0}];
         case 8:return 0;
         case 9:return 0;
         default:return 0}}
    function printStmtList$1(params,stmts)
     {var
       tstmts=
        filter_map(function(_abA_){return printStmt$2(params,_abA_)},stmts);
      function _aby_(a){return a}
      return function(_abz_){return map_sep_all(newline$0,_aby_,tstmts,_abz_)}}
    var
     keywords=caml_call1(makeKeywords,_Np_),
     types=caml_call1(makeTypes,_Nq_),
     cast=caml_call1(makeCasts,_Nr_),
     op_to_fun=caml_call1(makeOperators,_Ns_),
     op_to_op=caml_call1(makeOperators,_Nt_),
     fun_to_fun=caml_call1(makeFunctions,_Nu_),
     array_init=caml_call1(makeArrayInitializations,_Nv_),
     array_copy=caml_call1(makeArrayCopy,_Nw_),
     _Nx_=0,
     real_string=
      caml_call1
       (makeRealToString,
        [0,[0,_Nz_,function(f){return _a_(to_string(f),_Ny_)}],_Nx_]),
     replacements=
      [0,
       keywords,
       types,
       cast,
       op_to_fun,
       op_to_op,
       fun_to_fun,
       array_init,
       array_copy,
       real_string],
     keywords$0=caml_call1(makeKeywords,0),
     types$0=caml_call1(makeTypes,_NA_),
     cast$0=caml_call1(makeCasts,_NB_),
     op_to_fun$0=caml_call1(makeOperators,_NC_),
     op_to_op$0=caml_call1(makeOperators,_ND_),
     fun_to_fun$0=caml_call1(makeFunctions,_NE_),
     array_init$0=caml_call1(makeArrayInitializations,_NF_),
     array_copy$0=caml_call1(makeArrayCopy,_NG_);
    function toFixed(n)
     {if(n < 0)
       {var value=-n * 65536 | 0;return caml_call2(sprintf(_NH_),value,n)}
      var value$0=n * 65536 | 0;
      return caml_call2(sprintf(_NI_),value$0,n)}
    var
     real_string$0=caml_call1(makeRealToString,[0,[0,_NJ_,toFixed],0]),
     replacements$0=
      extendReplacements
       (replacements,
        [0,
         keywords$0,
         types$0,
         cast$0,
         op_to_fun$0,
         op_to_op$0,
         fun_to_fun$0,
         array_init$0,
         array_copy$0,
         real_string$0]),
     keywords$1=caml_call1(makeKeywords,_NK_),
     types$1=caml_call1(makeTypes,0),
     cast$1=caml_call1(makeCasts,0),
     op_to_fun$1=caml_call1(makeOperators,0),
     op_to_op$1=caml_call1(makeOperators,_NL_),
     fun_to_fun$1=caml_call1(makeFunctions,0),
     array_init$1=caml_call1(makeArrayInitializations,_NM_),
     array_copy$1=caml_call1(makeArrayCopy,0),
     real_string$1=caml_call1(makeRealToString,0),
     replacements$1=
      [0,
       keywords$1,
       types$1,
       cast$1,
       op_to_fun$1,
       op_to_op$1,
       fun_to_fun$1,
       array_init$1,
       array_copy$1,
       real_string$1],
     keywords$2=caml_call1(makeKeywords,_NN_),
     types$2=caml_call1(makeTypes,0),
     cast$2=caml_call1(makeCasts,0),
     op_to_fun$2=caml_call1(makeOperators,0),
     op_to_op$2=caml_call1(makeOperators,_NO_),
     fun_to_fun$2=caml_call1(makeFunctions,0),
     array_init$2=caml_call1(makeArrayInitializations,_NP_),
     array_copy$2=caml_call1(makeArrayCopy,0),
     real_string$2=caml_call1(makeRealToString,0),
     replacements$2=
      [0,
       keywords$2,
       types$2,
       cast$2,
       op_to_fun$2,
       op_to_op$2,
       fun_to_fun$2,
       array_init$2,
       array_copy$2,
       real_string$2];
    function makeTemp(s)
     {var name=_a_(_N0_,caml_new_string("" + s[1]));
      return [0,[0,s[1] + 1 | 0],name]}
    function bindToTemp(s,exp)
     {var match=makeTemp(s),name=match[2],s$0=match[1];
      if(typeof exp === "number")
       var ts$0=unit_typ,switch$0=1;
      else
       switch(exp[0])
        {case 0:var ts$0=_NW_,switch$0=1;break;
         case 1:var ts$0=_NX_,switch$0=1;break;
         case 2:var ts$0=_NY_,switch$0=1;break;
         case 3:var ts$0=_NZ_,switch$0=1;break;
         case 9:var ts=exp[4],switch$0=0;break;
         case 5:
         case 6:
         case 7:var ts=exp[3],switch$0=0;break;
         default:var ts=exp[2],switch$0=0}
      if(!switch$0)var ts$0=ts;
      var lhs=[0,ts$0,[0,name,0]],stmt=[0,[0,lhs,0],[0,[2,lhs,exp],0]];
      return [0,s$0,stmt,[8,[0,name,0],ts$0]]}
    function makeOpAtomic(s,op,ts,elems)
     {if(elems)
       {var _abw_=elems[2],_abx_=elems[1];
        if(_abw_)
         {if(_abw_[2])
           {var
             match=makeExpAtomic(s,_abx_),
             h=match[3],
             pre1=match[2],
             s$0=match[1],
             match$0=makeOpAtomic(s$0,op,ts,_abw_),
             a=match$0[3],
             pre2=match$0[2],
             s$1=match$0[1],
             match$1=bindToTemp(s$1,[7,op,[0,h,[0,a,0]],ts]),
             b=match$1[3],
             pre3=match$1[2],
             s$2=match$1[1];
            return [0,s$2,joinErrors(pre1,joinErrors(pre2,pre3)),b]}
          var
           e2=_abw_[1],
           match$2=makeExpAtomic(s,_abx_),
           e1=match$2[3],
           pre1$0=match$2[2],
           s$3=match$2[1],
           match$3=makeExpAtomic(s$3,e2),
           e2$0=match$3[3],
           pre2$0=match$3[2],
           s$4=match$3[1],
           match$4=bindToTemp(s$4,[7,op,[0,e1,[0,e2$0,0]],ts]),
           a$0=match$4[3],
           pre3$0=match$4[2],
           s$5=match$4[1];
          return [0,s$5,joinErrors(pre1$0,joinErrors(pre2$0,pre3$0)),a$0]}}
      return failwith(_N1_)}
    function makeExpAtomic(s,exp)
     {if(typeof exp === "number")
       return [0,s,0,0];
      else
       switch(exp[0])
        {case 4:
          var
           ts=exp[2],
           elems=exp[1],
           match=makeExpListAtomic(s,elems),
           elems$0=match[3],
           pre=match[2],
           s$0=match[1],
           match$0=bindToTemp(s$0,[4,elems$0,ts]),
           ret=match$0[3],
           pre1=match$0[2],
           s$1=match$0[1];
          return [0,s$1,joinErrors(pre,pre1),ret];
         case 5:
          var ts$0=exp[3],args=exp[2],name=exp[1];
          if(0 === ts$0[0])
           {var _abt_=ts$0[1];
            if(caml_string_notequal(_abt_,_NU_))
             if(caml_string_notequal(_abt_,_NV_))
              var switch$0=0;
             else
              var _abu_=1,switch$0=1;
            else
             var _abu_=1,switch$0=1}
          else
           var switch$0=0;
          if(!switch$0)var _abu_=0;
          if(_abu_)return [0,s,0,exp];
          var
           match$1=makeExpListAtomic(s,args),
           args$0=match$1[3],
           pre$0=match$1[2],
           s$2=match$1[1],
           match$2=bindToTemp(s$2,[5,name,args$0,ts$0]),
           ret$0=match$2[3],
           pre1$0=match$2[2],
           s$3=match$2[1];
          return [0,s$3,joinErrors(pre$0,pre1$0),ret$0];
         case 6:
          var
           ts$1=exp[3],
           arg=exp[2],
           op=exp[1],
           match$3=makeExpAtomic(s,arg),
           arg$0=match$3[3],
           pre$1=match$3[2],
           s$4=match$3[1],
           match$4=bindToTemp(s$4,[6,op,arg$0,ts$1]),
           ret$1=match$4[3],
           pre1$1=match$4[2],
           s$5=match$4[1];
          return [0,s$5,joinErrors(pre$1,pre1$1),ret$1];
         case 7:
          var ts$2=exp[3],elems$1=exp[2],op$0=exp[1];
          return makeOpAtomic(s,op$0,ts$2,elems$1);
         case 8:
          var _abv_=exp[1];
          if(_abv_)if(!_abv_[2])return [0,s,0,exp];
          var
           match$5=bindToTemp(s,exp),
           e=match$5[3],
           pre$2=match$5[2],
           s$6=match$5[1];
          return [0,s$6,pre$2,e];
         case 9:
          var
           ts$3=exp[4],
           else$0=exp[3],
           then=exp[2],
           cond=exp[1],
           match$6=makeTemp(s),
           tmp=match$6[2],
           s$7=match$6[1],
           ltmp=[0,ts$3,[0,tmp,0]],
           if_stmt=[7,cond,[2,ltmp,then],[0,[2,ltmp,else$0]]];
          return [0,s$7,[0,[0,ltmp,0],[0,if_stmt,0]],[8,[0,tmp,0],ts$3]];
         case 10:
          var
           ts$4=exp[2],
           elems$2=exp[1],
           match$7=split(elems$2),
           expl=match$7[2],
           labels=match$7[1],
           match$8=makeExpListAtomic(s,expl),
           expl$0=match$8[3],
           pre$3=match$8[2],
           s$8=match$8[1],
           elems$3=combine(labels,expl$0),
           match$9=bindToTemp(s$8,[10,elems$3,ts$4]),
           ret$2=match$9[3],
           pre1$2=match$9[2],
           s$9=match$9[1];
          return [0,s$9,joinErrors(pre$3,pre1$2),ret$2];
         default:return [0,s,0,exp]}}
    function makeExpListAtomic(s,elems)
     {var
       _abr_=[0,s,0,0],
       match=
        fold_left
         (function(param,exp)
           {var
             acc=param[3],
             pre=param[2],
             s=param[1],
             match=makeExpAtomic(s,exp),
             e=match[3],
             p=match[2],
             s$0=match[1];
            return [0,s$0,[0,p,pre],[0,e,acc]]},
          _abr_,
          elems),
       elems_rev=match[3],
       pre_rev=match[2],
       s$0=match[1],
       _abs_=rev(elems_rev);
      return [0,s$0,concat(rev(pre_rev)),_abs_]}
    function makeSingleStmt(stmts)
     {if(stmts){if(stmts[2])return [6,stmts];var stmt=stmts[1];return stmt}
      return 0}
    function makeStmtAtomic(s,stmt)
     {if(typeof stmt === "number")
       return [0,s,[0,stmt,0]];
      else
       switch(stmt[0])
        {case 0:
          var _abm_=stmt[2];
          if(_abm_)
           {var
             rhs=_abm_[1],
             lhs=stmt[1],
             match=makeExpAtomic(s,rhs),
             rhs$0=match[3],
             pre=match[2],
             s$0=match[1];
            return [0,s$0,joinErrors(pre,[0,[0,lhs,0],[0,[2,lhs,rhs$0],0]])]}
          break;
         case 1:
          var rhs$1=stmt[2],lhs$0=stmt[1];return [0,s,[0,[1,lhs$0,rhs$1],0]];
         case 2:
          var
           rhs$2=stmt[2],
           lhs$1=stmt[1],
           match$0=makeExpAtomic(s,rhs$2),
           rhs$3=match$0[3],
           pre$0=match$0[2],
           s$1=match$0[1];
          return [0,s$1,joinErrors(pre$0,[0,[2,lhs$1,rhs$3],0])];
         case 3:
          var
           body=stmt[4],
           args=stmt[3],
           name=stmt[2],
           ts=stmt[1],
           match$1=makeStmtAtomic(s,body),
           body$0=match$1[2],
           s$2=match$1[1];
          return [0,s$2,[0,[3,ts,name,args,makeSingleStmt(body$0)],0]];
         case 4:
          var
           e=stmt[1],
           match$2=makeExpAtomic(s,e),
           e$0=match$2[3],
           pre$1=match$2[2],
           s$3=match$2[1];
          return [0,s$3,joinErrors(pre$1,[0,[4,e$0],0])];
         case 5:
          var
           body$1=stmt[2],
           cond=stmt[1],
           match$3=makeExpAtomic(s,cond),
           cond$0=match$3[3],
           pre$2=match$3[2],
           s$4=match$3[1],
           match$4=makeStmtAtomic(s$4,body$1),
           body$2=match$4[2],
           s$5=match$4[1];
          return [0,
                  s$5,
                  joinErrors(pre$2,[0,[5,cond$0,makeSingleStmt(body$2)],0])];
         case 6:
          var
           stmts=stmt[1],
           match$5=makeStmtListAtomic(s,stmts),
           stmts$0=match$5[2],
           s$6=match$5[1];
          return [0,s$6,[0,[6,stmts$0],0]];
         case 7:
          var _abn_=stmt[3],_abo_=stmt[2],_abp_=stmt[1];
          if(_abn_)
           {var
             else$0=_abn_[1],
             match$6=makeExpAtomic(s,_abp_),
             cond$1=match$6[3],
             pre$3=match$6[2],
             s$7=match$6[1],
             match$7=makeStmtAtomic(s$7,_abo_),
             then=match$7[2],
             s$8=match$7[1],
             match$8=makeStmtAtomic(s$8,else$0),
             else$1=match$8[2],
             s$9=match$8[1],
             _abq_=[0,makeSingleStmt(else$1)];
            return [0,
                    s$9,
                    joinErrors
                     (pre$3,[0,[7,cond$1,makeSingleStmt(then),_abq_],0])]}
          var
           match$9=makeExpAtomic(s,_abp_),
           cond$2=match$9[3],
           pre$4=match$9[2],
           s$10=match$9[1],
           match$10=makeStmtAtomic(s$10,_abo_),
           then$0=match$10[2],
           s$11=match$10[1];
          return [0,
                  s$11,
                  joinErrors(pre$4,[0,[7,cond$2,makeSingleStmt(then$0),0],0])]
         }
      return [0,s,[0,stmt,0]]}
    function makeStmtListAtomic(s,stmts)
     {var
       _abl_=[0,s,0],
       match=
        fold_left
         (function(param,stmt)
           {var
             acc=param[2],
             s=param[1],
             match=makeStmtAtomic(s,stmt),
             stmt$0=match[2],
             s$0=match[1];
            return [0,s$0,[0,stmt$0,acc]]},
          _abl_,
          stmts),
       stmt_rev=match[2],
       s$0=match[1];
      return [0,s$0,concat(rev(stmt_rev))]}
    function convertId(p,id)
     {var _abk_=concat$0(_N2_,id);return getKeyword(p[1],_abk_)}
    function convertVarId(p,id)
     {var _abi_=p[1];
      return map(function(_abj_){return getKeyword(_abi_,_abj_)},id)}
    function convertType(p,tp)
     {var tp$0=tp;
      for(;;)
       {var _aba_=tp$0[1];
        switch(_aba_[0])
         {case 1:
           var _abb_=_aba_[1];
           if(_abb_)
            if(!_abb_[2])
             {var typ=_abb_[1],new_type=getType(p[1],typ);return [0,new_type]}
           return [0,convertId(p,_abb_)];
          case 2:
           var _abc_=_aba_[1];
           if(_abc_)
            {var _abd_=_abc_[1];
             if(caml_string_notequal(_abd_,_N5_))
              {if(!caml_string_notequal(_abd_,_N6_))
                if(!_abc_[2])return [0,_a_(_ka_,_j4_(tp$0))]}
             else
              if(!_abc_[2])
               {var _abe_=_aba_[2];
                if(_abe_)
                 {var _abf_=_abe_[2];
                  if(_abf_)
                   {var _abh_=_abf_[1][1],_abg_=_abe_[1];
                    if(6 === _abh_[0])
                     if(!_abf_[2])
                      {var n=_abh_[1],sub=convertType(p,_abg_);return [1,sub,n]}}}}}
           break;
          case 4:var tp$1=_aba_[1],tp$0=tp$1;continue
          }
        return failwith(_a_(_N4_,typeStr(tp$0)))}}
    function convertTypedId(p,e)
     {if(0 === e[0])return failwith(_N7_);
      var
       typ=e[2],
       id=e[1],
       typ_c=convertType(p,typ),
       typ_ref=isSimpleType(typ)?[1,typ_c]:[0,typ_c],
       ids=convertVarId(p,id);
      return [0,typ_ref,concat$0(_N8_,ids)]}
    function attrType(p,attr)
     {var _aa$_=attr[7];
      if(_aa$_){var t=_aa$_[1];return convertType(p,t)}
      return failwith(_Oi_)}
    function expType(p,e){return attrType(p,fromExp$0(e))}
    function convertExp(p,e)
     {var e$0=e;
      for(;;)
       {var typ=function(_aa__){return attrType(p,_aa__)};
        if(typeof e$0 === "number")
         return failwith(_Oj_);
        else
         switch(e$0[0])
          {case 0:return 0;
           case 1:var v$0=e$0[1];return [2,v$0];
           case 2:var n=e$0[1];return [0,n];
           case 3:
            var
             v$1=e$0[1],
             _aa1_=p[1],
             typ_t$1=getType(_aa1_,typ$2),
             match$1=caml_call2(SimpleMap[26],typ_t$1,_aa1_[9]);
            if(match$1)
             var fn=match$1[1],s=caml_call1(fn,v$1);
            else
             var s=to_string(v$1);
            return [1,s,v$1];
           case 4:var s$0=e$0[1];return [3,s$0];
           case 5:
            var attr=e$0[2],id=e$0[1],_aa2_=typ(attr);
            return [8,convertVarId(p,id),_aa2_];
           case 6:
            var attr$0=e$0[2],elems=e$0[1],elems$0=convertExpArray(p,elems);
            return [4,elems$0,typ(attr$0)];
           case 7:
            var attr$1=e$0[3],e1=e$0[2],op=e$0[1],e1$0=convertExp(p,e1);
            return [6,op,e1$0,typ(attr$1)];
           case 8:
            var
             attr$2=e$0[3],
             elems$1=e$0[2],
             op$0=e$0[1],
             elems$2=convertExpList(p,elems$1),
             typ$0=attrType(p,attr$2);
            if(0 === typ$0[0])
             {var
               typ_t$2=typ$0[1],
               _aaW_=p[1],
               typ_t=getType(_aaW_,typ_t$2),
               match=caml_call2(PairMap[26],[0,op$0,typ_t],_aaW_[4]);
              if(match)
               {var fn$0=match[1];
                if(elems$2)
                 {var _aaU_=elems$2[2],_aaV_=elems$2[1];
                  if(_aaU_)if(!_aaU_[2])return [5,fn$0,elems$2,typ$0];
                  return fold_left
                          (function(acc,a){return [5,fn$0,[0,acc,[0,a,0]],typ$0]},
                           _aaV_,
                           _aaU_)}
                return failwith(_N$_)}
              var
               _aaX_=p[1],
               typ_t$0=getType(_aaX_,typ_t$2),
               match$0=caml_call2(PairMap[26],[0,op$0,typ_t$0],_aaX_[5]);
              if(match$0)
               var new_op=match$0[1],new_op$0=new_op;
              else
               var new_op$0=op$0;
              return [7,new_op$0,elems$2,typ$0]}
            return [7,op$0,elems$2,typ$0];
           case 9:
            var _aa3_=e$0[2];
            if(_aa3_)
             if(!_aa3_[2])
              {var _aa4_=e$0[3];
               if(_aa4_)
                if(!_aa4_[2])
                 {var
                   attr$4=e$0[4],
                   arg=_aa4_[1],
                   name=_aa3_[1],
                   switch$0=
                    caml_string_equal(name,_Ok_)
                     ?0
                     :caml_string_equal(name,_Ol_)
                       ?0
                       :caml_string_equal(name,_Om_)?0:1;
                  if(!switch$0)
                   {var
                     arg$0=convertExp(p,arg),
                     from_type=expType(p,arg),
                     to_type=attrType(p,attr$4);
                    if(caml_notequal(from_type,to_type))
                     {var _aa5_=typ(attr$4),_aa6_=[0,arg$0,0];
                      if(0 === from_type[0])
                       {var _aaT_=from_type[1];
                        if(0 === to_type[0])
                         var
                          to_t=to_type[1],
                          _aa7_=getCast(p[1],_aaT_,to_t),
                          switch$1=1;
                        else
                         var switch$1=0}
                      else
                       var switch$1=0;
                      if(!switch$1)
                       var
                        from_str=caml_call1(show_type_descr,from_type),
                        to_str=caml_call1(show_type_descr,to_type),
                        _aa7_=failwith(_a_(_N__,_a_(from_str,_a_(_N9_,to_str))));
                      return [5,_aa7_,_aa6_,_aa5_]}
                    return arg$0}}}
            var
             attr$3=e$0[4],
             elems$3=e$0[3],
             elems$4=convertExpList(p,elems$3),
             elem_typs=map(function(_aa9_){return expType(p,_aa9_)},elems$3),
             typ$1=attrType(p,attr$3);
            if(_aa3_)
             {var _aa0_=_aa3_[1];
              if(caml_string_notequal(_aa0_,_Of_))
               {if(!_aa3_[2])
                 {if(0 === typ$1[0])
                   {var typ_t$3=typ$1[1],fn$1=getFunction(p[1],_aa0_,typ_t$3);
                    return [5,fn$1,elems$4,typ$1]}
                  return [5,convertId(p,_aa3_),elems$4,typ$1]}}
              else
               if(!_aa3_[2])
                {if(elem_typs)
                  {var _aaY_=elem_typs[2];
                   if(_aaY_)
                    {var _aaZ_=_aaY_[2];
                     if(_aaZ_)
                      if(_aaZ_[2])
                       var switch$2=0;
                      else
                       var v=_aaZ_[1],match$2=v,switch$2=1;
                     else
                      var switch$2=0}
                   else
                    var switch$2=0}
                 else
                  var switch$2=0;
                 if(!switch$2)var match$2=failwith(_Oa_);
                 if(0 === match$2[0])
                  {var typ_t$4=match$2[1],fn$2=getFunction(p[1],_Og_,typ_t$4);
                   return [5,fn$2,elems$4,typ$1]}
                 return failwith(_a_(_Oh_,caml_call1(show_type_descr,typ$1)))}}
            return [5,convertId(p,_aa3_),elems$4,typ$1];
           case 10:
            var
             attr$5=e$0[4],
             else$0=e$0[3],
             then=e$0[2],
             cond=e$0[1],
             cond$0=convertExp(p,cond),
             then$0=convertExp(p,then),
             else$1=convertExp(p,else$0);
            return [9,cond$0,then$0,else$1,typ(attr$5)];
           case 11:var e$1=e$0[1],e$0=e$1;continue;
           case 12:
            var _aa8_=e$0[1];
            if(_aa8_)if(!_aa8_[2]){var e$2=_aa8_[1],e$0=e$2;continue}
            var
             attr$6=e$0[2],
             elems$5=
              mapi
               (function(i,a)
                 {var a$0=convertExp(p,a);
                  return [0,_a_(_On_,caml_new_string("" + i)),a$0]},
                _aa8_);
            return [10,elems$5,typ(attr$6)];
           default:return failwith(_Oo_)}}}
    function convertExpList(p,e)
     {return map(function(_aaS_){return convertExp(p,_aaS_)},e)}
    function convertExpArray(p,e)
     {return to_list(map$1(function(_aaR_){return convertExp(p,_aaR_)},e))}
    function convertLhsExp(is_val,p,e)
     {var e$0=e;
      for(;;)
       switch(e$0[0])
        {case 0:return 0;
         case 1:
          var _aaO_=e$0[2],_aaP_=e$0[1];
          if(_aaO_)
           {var typ=_aaO_[1],new_id=convertVarId(p,_aaP_);
            return [0,convertType(p,typ),new_id]}
          return failwith(_Op_);
         case 2:
          var
           elems=e$0[1],
           _aaQ_=0,
           elems$0=
            rev
             (fold_left
               (function(acc,lhs){return [0,convertLhsExp(is_val,p,lhs),acc]},
                _aaQ_,
                elems));
          return [1,elems$0];
         case 3:var e$1=e$0[1],e$0=e$1;continue;
         default:var e$2=e$0[1],e$0=e$2;continue}}
    function collectVarBind(stmts)
     {var stmts$0=stmts;
      for(;;)
       {if(stmts$0)
         {var _aaH_=stmts$0[1];
          if(typeof _aaH_ !== "number" && 0 === _aaH_[0])
           {var _aaI_=_aaH_[1];
            if(_aaH_[2])
             if(typeof _aaI_ === "number")
              var switch$0=0;
             else
              if(1 === _aaI_[0])
               var switch$0=0;
              else
               {var _aaJ_=stmts$0[2];
                if(_aaJ_)
                 {var _aaK_=_aaJ_[1];
                  if(typeof _aaK_ === "number")
                   var switch$1=1;
                  else
                   if(7 === _aaK_[0])
                    {var _aaL_=_aaK_[1];
                     if(typeof _aaL_ === "number")
                      var switch$2=1;
                     else
                      if(8 === _aaL_[0])
                       {var
                         t$0=_aaJ_[2],
                         else$0=_aaK_[3],
                         then=_aaK_[2],
                         cond=_aaL_[1],
                         match=_aaH_[2],
                         rhs=match[1],
                         lhs=_aaI_[2];
                        if(caml_equal(lhs,cond))
                         {var stmts$1=[0,[7,rhs,then,else$0],t$0],stmts$0=stmts$1;
                          continue}
                        var switch$0=1,switch$1=0,switch$2=0}
                      else
                       var switch$2=1;
                     if(switch$2)var switch$0=1,switch$1=0}
                   else
                    var switch$1=1;
                  if(switch$1)var switch$0=1}
                else
                 var switch$0=1}
            else
             {var _aaM_=stmts$0[2];
              if(_aaM_)
               {var _aaN_=_aaM_[1];
                if(typeof _aaN_ === "number")
                 var switch$3=0;
                else
                 if(2 === _aaN_[0])
                  {var t$1=_aaM_[2],rhs$0=_aaN_[2],lhs2=_aaN_[1];
                   if(caml_equal(_aaI_,lhs2))
                    {var stmts$2=[0,[0,_aaI_,[0,rhs$0]],t$1],stmts$0=stmts$2;
                     continue}
                   var switch$3=1}
                 else
                  var switch$3=0}}}
          var t=stmts$0[2];
          return [0,_aaH_,collectVarBind(t)]}
        return 0}}
    function convertStmt(p,s)
     {if(typeof s === "number")
       return 0;
      else
       switch(s[0])
        {case 0:
          var _aad_=s[2],_aae_=s[1];
          if(_aad_)
           {var attr=s[3],rhs=_aad_[1];
            if(attr[5])
             {var lhs=convertLhsExp(0,p,_aae_),rhs$0=convertExp(p,rhs);
              return [1,lhs,rhs$0]}
            if(attr[5])
             {var lhs$0=convertLhsExp(0,p,_aae_),rhs$1=convertExp(p,rhs);
              return [0,lhs$0,[0,rhs$1]]}
            return failwith(_Os_)}
          var lhs$1=convertLhsExp(1,p,_aae_);
          return [0,lhs$1,0];
         case 1:return 0;
         case 2:
          var
           stmt=s[2],
           cond=s[1],
           cond$0=convertExp(p,cond),
           stmt$0=convertStmt(p,stmt);
          return [5,cond$0,stmt$0];
         case 3:var e1=s[1],e1$0=convertExp(p,e1);return [4,e1$0];
         case 4:
          var _aaf_=s[3],_aag_=s[2],_aah_=s[1];
          if(_aaf_)
           {var
             else$0=_aaf_[1],
             cond$1=convertExp(p,_aah_),
             then=convertStmt(p,_aag_),
             else$1=convertStmt(p,else$0);
            return [7,cond$1,then,[0,else$1]]}
          var cond$2=convertExp(p,_aah_),then$0=convertStmt(p,_aag_);
          return [7,cond$2,then$0,0];
         case 5:
          var _aai_=s[4],_aaj_=s[3],_aak_=s[2],_aal_=s[1];
          if(_aai_)
           {var
             ret=_aai_[1],
             arg_names=
              map(function(_aaG_){return convertTypedId(p,_aaG_)},_aak_),
             stmt$1=convertStmt(p,_aaj_),
             fname=convertId(p,_aal_);
            if(typeof stmt$1 === "number")
             var switch$0=0;
            else
             if(6 === stmt$1[0])
              {var stmts=stmt$1[1];
               if(p[2])
                var switch$0=0;
               else
                var _aam_=[6,collectVarBind(stmts)],switch$0=1}
             else
              var switch$0=0;
            if(!switch$0)var _aam_=stmt$1;
            return [3,convertType(p,ret),fname,arg_names,_aam_]}
          return failwith(_Ot_);
         case 6:
          var _aan_=s[4],_aao_=s[3],_aap_=s[2],_aaq_=s[1];
          if(_aan_)
           {var
             link_name=_aan_[1],
             arg_names$0=
              map(function(_aaF_){return convertTypedId(p,_aaF_)},_aap_);
            return [10,convertType(p,_aao_),link_name,arg_names$0]}
          var
           fname$0=convertId(p,_aaq_),
           arg_names$1=
            map(function(_aaE_){return convertTypedId(p,_aaE_)},_aap_);
          return [10,convertType(p,_aao_),fname$0,arg_names$1];
         case 7:
          var _aar_=s[1];
          switch(_aar_[0])
           {case 0:
             var _aas_=s[2];
             if(typeof _aas_ === "number")
              var switch$1=0;
             else
              if(9 === _aas_[0])
               if(_aas_[1])
                var switch$1=1;
               else
                {var _aat_=_aas_[2];
                 if(_aat_)
                  if(caml_string_notequal(_aat_[1],_Ou_))
                   var switch$1=1;
                  else
                   if(_aat_[2])
                    var switch$1=1;
                   else
                    {var _aau_=_aas_[3];
                     if(_aau_)
                      {var _aav_=_aau_[2];
                       if(_aav_)
                        {var _aaw_=_aav_[2];
                         if(_aaw_)
                          if(_aaw_[2])
                           var switch$1=1;
                          else
                           {var
                             attr$0=_aas_[4],
                             var$0=_aaw_[1],
                             init=_aav_[1],
                             size=_aau_[1];
                            if(p[2])
                             {var
                               init$0=convertExp(p,init),
                               size$0=convertExp(p,size),
                               typ=expType(p,init);
                              if(0 === typ[0])
                               {var
                                 typ_t=typ[1],
                                 match=caml_call2(SimpleMap[26],typ_t,p[1][7]);
                                if(match)
                                 var fn=match[1],init_func=fn;
                                else
                                 var
                                  init_func=
                                   failwith(_a_(_Ob_,caml_call1(show_type_descr,typ)))}
                              else
                               var
                                init_func=
                                 failwith(_a_(_Oc_,caml_call1(show_type_descr,typ)));
                              var var$1=convertExp(p,var$0);
                              return [2,
                                      0,
                                      [5,
                                       init_func,
                                       [0,size$0,[0,init$0,[0,var$1,0]]],
                                       attrType(p,attr$0)]]}
                            var switch$1=1}
                         else
                          var switch$1=1}
                       else
                        var switch$1=1}
                     else
                      var switch$1=1}
                 else
                  var switch$1=1}
              else
               var switch$1=0;
             break;
            case 1:
             var _aax_=_aar_[2],_aay_=_aar_[1],_aaz_=s[2];
             if(typeof _aaz_ === "number")
              var switch$2=0;
             else
              switch(_aaz_[0])
               {case 6:
                 if(_aax_)
                  {var match$2=s[2],elems=match$2[1],atyp$0=_aax_[1];
                   if(p[2])
                    {var
                      elems$0=convertExpArray(p,elems),
                      match$3=arrayTypeAndSize(atyp$0),
                      atype=match$3[1],
                      lhs$3=convertVarId(p,_aay_),
                      typ$2=convertType(p,atype);
                     if(0 === typ$2[0])
                      {var
                        typ_t$1=typ$2[1],
                        fn$1=getFunction(p[1],_Ov_,typ_t$1),
                        stmts$0=
                         mapi
                          (function(i,e)
                            {return [2,
                                     0,
                                     [5,fn$1,[0,[8,lhs$3,typ$2],[0,[0,i],[0,e,0]]],unit_typ]]},
                           elems$0);
                       return [6,stmts$0]}
                     return failwith(_Ow_)}
                   var switch$2=1}
                 else
                  var switch$2=1;
                 break;
                case 12:
                 var attr$1=s[3],elems$1=_aaz_[1];
                 if(p[2])
                  {var
                    stmts$1=
                     mapi
                      (function(i,e)
                        {var etype=fromExp$0(e)[7];
                         if(1 === _aar_[0])
                          var
                           attr=_aar_[3],
                           id=_aar_[1],
                           field=_a_(_Or_,caml_new_string("" + i)),
                           _aaC_=
                            [0,
                             attr[1],
                             attr[2],
                             attr[3],
                             attr[4],
                             attr[5],
                             attr[6],
                             etype,
                             attr[8],
                             attr[9]],
                           _aaD_=[1,joinErrors(id,[0,field,0]),etype,_aaC_];
                         else
                          var _aaD_=failwith(_Oq_);
                         return convertStmt(p,[7,_aaD_,e,attr$1])},
                       elems$1);
                   return [6,stmts$1]}
                 var switch$2=1;
                 break;
                default:var switch$2=0}
             var _aaA_=_aar_[3][7];
             if(_aaA_)
              {var rhs$4=s[2],typ$0=_aaA_[1];
               if(p[2])
                if(isArray(typ$0))
                 {var
                   rhs$5=convertExp(p,rhs$4),
                   match$1=arrayTypeAndSize(typ$0),
                   size$1=match$1[2],
                   atyp=match$1[1],
                   typ$1=convertType(p,atyp);
                  if(0 === typ$1[0])
                   {var
                     typ_t$0=typ$1[1],
                     match$0=caml_call2(SimpleMap[26],typ_t$0,p[1][8]);
                    if(match$0)
                     var fn$0=match$0[1],copy_fn=fn$0;
                    else
                     var
                      copy_fn=
                       failwith(_a_(_Od_,caml_call1(show_type_descr,typ$1)))}
                  else
                   var
                    copy_fn=
                     failwith(_a_(_Oe_,caml_call1(show_type_descr,typ$1)));
                  return [2,
                          0,
                          [5,
                           copy_fn,
                           [0,
                            [0,size$1],
                            [0,[8,convertVarId(p,_aay_),typ$1],[0,rhs$5,0]]],
                           unit_typ]]}}
             break
            }
          var
           rhs$2=s[2],
           lhs$2=convertLhsExp(0,p,_aar_),
           rhs$3=convertExp(p,rhs$2);
          return [2,lhs$2,rhs$3];
         case 8:
          var stmts$2=s[2],stmts$3=convertStmtList(p,stmts$2);
          return [6,stmts$3];
         case 9:
          var members=s[2],name=s[1],match$4=convertType(p,name);
          if(0 === match$4[0])
           var t=match$4[1],type_name=t;
          else
           var type_name=failwith(_Ox_);
          var
           member_pairs=
            map
             (function(param)
               {var typ=param[2],id=param[1];
                if(id)
                 if(id[2])
                  var switch$0=0;
                 else
                  var name=id[1],_aaB_=getKeyword(p[1],name),switch$0=1;
                else
                 var switch$0=0;
                if(!switch$0)var _aaB_=failwith(_N3_);
                return [0,convertType(p,typ),_aaB_]},
              members);
          return [8,type_name,member_pairs];
         default:
          var
           t2=s[2],
           t1=s[1],
           t1_name=convertType(p,t1),
           match$5=convertType(p,t2);
          if(0 === match$5[0])
           var t$0=match$5[1],type_name$0=t$0;
          else
           var type_name$0=failwith(_Oy_);
          return [9,type_name$0,t1_name]}}
    function convertStmtList(p,stmts)
     {var
       _aac_=0,
       stmts_rev=
        fold_left
         (function(acc,stmt){return [0,convertStmt(p,stmt),acc]},_aac_,stmts);
      return rev(stmts_rev)}
    function convert(p,stmts)
     {var cstmts=convertStmtList(p,stmts);
      if(p[3])
       {var match=makeStmtListAtomic(_Oz_,cstmts),ctmts=match[2];return ctmts}
      return cstmts}
    function hasInitFunction(t,path){return caml_call2(PathSet[3],path,t[1])}
    function markInitFunction(t,path)
     {var _$9_=t[6],_$__=t[5],_$$_=t[4],_aaa_=t[3],_aab_=t[2];
      return [0,caml_call2(PathSet[4],path,t[1]),_aab_,_aaa_,_$$_,_$__,_$9_]}
    function reapply(state)
     {var data=state[1];
      return set(state,[0,data[1],data[2],data[3],1,data[5],data[6]])}
    function newState(state,data){return derive(state,data)}
    function restoreState(original,current)
     {var current_data=current[1],original_data=original[1];
      return [0,derive(current,original_data),current_data]}
    var
     vtype_c=
      make$1
       (_OA_,
        function(state,typ)
         {if(4 === typ[0]){var t=typ[1];return [0,state,t[1]]}
          return [0,state,typ]}),
     mapper$2=
      [0,
       vtype_c,
       default_mapper[2],
       default_mapper[3],
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       default_mapper[9]];
    function reportUnbound(name,attr)
     {var _$8_=idStr(name),msg=caml_call1(sprintf(_OB_),_$8_);
      return raiseError(msg,attr[1])}
    var
     lhs_exp$0=
      make$1
       (_OC_,
        function(state,exp)
         {if(1 === exp[0])
           {var _$6_=exp[2],_$7_=exp[1];
            if(!_$6_){var attr$0=exp[3];return reportUnbound(_$7_,attr$0)}
            var attr=exp[3],t=_$6_[1];
            if(isUnbound(t))return reportUnbound(_$7_,attr)}
          return [0,state,exp]}),
     exp$1=
      make$1
       (_OE_,
        function(state,exp)
         {if(typeof exp !== "number" && 5 === exp[0])
           {var _$4_=exp[2],_$5_=_$4_[7];
            if(_$5_)
             {var t$0=_$5_[1],id=exp[1];
              if(isUnbound(t$0))return reportUnbound(id,_$4_)}}
          var attr=fromExp$0(exp),_$3_=attr[7];
          if(_$3_)
           {var t=_$3_[1];
            if(isUnbound(t))
             {var msg=sprintf(_OD_);return raiseError(msg,attr[1])}}
          return [0,state,exp]}),
     typed_id=
      make$1
       (_OF_,
        function(state,t)
         {if(1 === t[0])
           {var attr=t[4],typ=t[2],id=t[1];
            if(isUnbound(typ))return reportUnbound(id,attr)}
          return [0,state,t]}),
     mapper$3=
      [0,
       default_mapper[1],
       typed_id,
       exp$1,
       lhs_exp$0,
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       default_mapper[9]],
     stmt_x=
      makeExpander
       (_OG_,
        function(state,stmt)
         {if(typeof stmt !== "number")
           switch(stmt[0])
            {case 0:
              var _$1_=stmt[2];
              if(_$1_)
               {var attr=stmt[3],rhs=_$1_[1],lhs=stmt[1];
                return [0,
                        reapply(state),
                        [0,[0,lhs,0,attr],[0,[7,lhs,rhs,attr],0]]]}
              break;
             case 1:
              var _$2_=stmt[2];
              if(_$2_)
               {var attr$0=stmt[3],rhs$0=_$2_[1],lhs$0=stmt[1];
                return [0,
                        reapply(state),
                        [0,[1,lhs$0,0,attr$0],[0,[7,lhs$0,rhs$0,attr$0],0]]]}
              break
             }
          return [0,state,[0,stmt,0]]}),
     mapper$4=
      [0,
       default_mapper[1],
       default_mapper[2],
       default_mapper[3],
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       stmt_x];
    function getOpElements(op,elems)
     {if(elems)
       {var _$0_=elems[1];
        if(typeof _$0_ !== "number" && 8 === _$0_[0])
         {var t$1=elems[2],sub=_$0_[2],op$0=_$0_[1];
          if(caml_string_equal(op$0,op))
           {var match$0=getOpElements(op,t$1),t$2=match$0[2];
            return [0,1,joinErrors(sub,t$2)]}}
        var t=elems[2],match=getOpElements(op,t),t$0=match[2],found=match[1];
        return [0,found,[0,_$0_,t$0]]}
      return _OH_}
    function p$0(e)
     {if(typeof e !== "number")switch(e[0]){case 1:case 2:case 3:return 1}
      return 0}
    function isZero(e)
     {if(typeof e === "number")
       var switch$0=0;
      else
       switch(e[0])
        {case 2:var switch$0=0 === e[1]?1:0;break;
         case 3:var switch$0=e[1] != 0?0:1;break;
         default:var switch$0=0}
      return switch$0?1:0}
    function isTrue(e)
     {if(typeof e !== "number" && 1 === e[0])if(0 !== e[1])return 1;return 0}
    function isFalse(e)
     {if(typeof e !== "number" && 1 === e[0])if(0 === e[1])return 1;return 0}
    function negNum(e)
     {if(typeof e !== "number")
       switch(e[0])
        {case 2:var attr=e[2],value=e[1];return [2,-value | 0,attr];
         case 3:var attr$0=e[2],value$0=e[1];return [3,-value$0,attr$0]
         }
      return failwith(_OX_)}
    var
     exp$2=
      make$1
       (_Pc_,
        function(state,exp)
         {if(typeof exp !== "number")
           switch(exp[0])
            {case 7:
              if(!caml_string_notequal(exp[1],_OY_))
               {var _$M_=exp[2];
                if(typeof _$M_ !== "number" && 8 === _$M_[0])
                 if(!caml_string_notequal(_$M_[1],_OZ_))
                  {var _$O_=_$M_[3],_$P_=_$O_[7];
                   if(_$P_)
                    {var t=_$P_[1],elems=_$M_[2];
                     if(exists(p$0,elems))
                      {var _$G_=t[1];
                       if(1 === _$G_[0])
                        {var _$H_=_$G_[1];
                         if(_$H_)
                          {var _$I_=_$H_[1];
                           if(caml_string_notequal(_$I_,_OJ_))
                            if(caml_string_notequal(_$I_,_OK_))
                             var switch$0=0;
                            else
                             if(_$H_[2])
                              var switch$0=0;
                             else
                              var minus=[3,-1,_$O_],switch$0=1;
                           else
                            if(_$H_[2])
                             var switch$0=0;
                            else
                             var minus=[2,-1,_$O_],switch$0=1}
                         else
                          var switch$0=0}
                       else
                        var switch$0=0;
                       if(!switch$0)var minus=failwith(_OI_);
                       return [0,reapply(state),[8,_O0_,[0,minus,elems],_$O_]]}}}
                if(p$0(_$M_))
                 {var _$N_=negNum(_$M_);return [0,reapply(state),_$N_]}}
              break;
             case 8:
              var _$Q_=exp[1];
              if(caml_string_notequal(_$Q_,_O1_))
               {if(!caml_string_notequal(_$Q_,_O2_))
                 {var _$S_=exp[2];
                  if(_$S_)
                   {var _$T_=_$S_[2];
                    if(_$T_)
                     {var _$U_=_$T_[1];
                      if(typeof _$U_ === "number")
                       var switch$1=0;
                      else
                       if(3 === _$U_[0])
                        {if(!_$T_[2])
                          {var attr2=exp[3],attr$0=_$U_[2],value=_$U_[1],e1=_$S_[1];
                           return [0,
                                   reapply(state),
                                   [8,_O8_,[0,e1,[0,[3,1 / value,attr$0],0]],attr2]]}
                         var switch$1=1}
                       else
                        var switch$1=0}}}}
              else
               {var _$V_=exp[2];
                if(_$V_)
                 {var _$W_=_$V_[2];
                  if(_$W_)
                   {var _$X_=_$W_[1],_$Y_=_$V_[1];
                    if(!_$W_[2])
                     {var attr$1=exp[3];
                      if(p$0(_$X_))
                       {var _$Z_=[8,_O9_,[0,_$Y_,[0,negNum(_$X_),0]],attr$1];
                        return [0,reapply(state),_$Z_]}
                      if(typeof _$X_ === "number")
                       var switch$2=0;
                      else
                       if(7 === _$X_[0])
                        {if(!caml_string_notequal(_$X_[1],_Pa_))
                          {var attr$3=exp[3],e2=_$X_[2];
                           return [0,reapply(state),[8,_Pb_,[0,_$Y_,[0,e2,0]],attr$3]]}
                         var switch$2=1}
                       else
                        var switch$2=0;
                      var attr$2=exp[3];
                      return [0,
                              reapply(state),
                              [8,_O$_,[0,_$Y_,[0,[7,_O__,_$X_,attr$2],0]],attr$2]]}}}}
              var
               attr=exp[3],
               elems$0=exp[2],
               switch$3=
                caml_string_equal(_$Q_,_O3_)
                 ?0
                 :caml_string_equal(_$Q_,_O5_)
                   ?0
                   :caml_string_equal(_$Q_,_O6_)
                     ?0
                     :caml_string_equal(_$Q_,_O7_)?0:1;
              if(!switch$3)
               {var
                 match=getOpElements(_$Q_,elems$0),
                 elems$1=match[2],
                 found=match[1],
                 yes=0,
                 no=0,
                 param=elems$1;
                for(;;)
                 {if(param)
                   {var l=param[2],x=param[1];
                    if(p$0(x)){var yes$0=[0,x,yes],yes=yes$0,param=l;continue}
                    var no$0=[0,x,no],no=no$0,param=l;
                    continue}
                  var other=rev(no),constants=rev(yes);
                  if(constants)
                   {var _$J_=constants[2],_$K_=constants[1];
                    if(_$J_)
                     var
                      c=
                       fold_left
                        (function(e1,match)
                          {if(caml_string_notequal(_$Q_,_OL_))
                            {if(caml_string_notequal(_$Q_,_OM_))
                              {if(caml_string_notequal(_$Q_,_ON_))
                                {if(!caml_string_notequal(_$Q_,_OO_))
                                  if(typeof e1 !== "number" && 1 === e1[0])
                                   if(typeof match !== "number" && 1 === match[0])
                                    {var n2=match[1],attr=e1[2],n1=e1[1],n1$0=n1 || n2;
                                     return [1,n1$0,attr]}}
                               else
                                if(typeof e1 !== "number")
                                 switch(e1[0])
                                  {case 2:
                                    if(typeof match !== "number" && 2 === match[0])
                                     {var n2$0=match[1],attr$0=e1[2],n1$1=e1[1];
                                      return [2,n1$1 + n2$0 | 0,attr$0]}
                                    break;
                                   case 3:
                                    if(typeof match !== "number" && 3 === match[0])
                                     {var n2$1=match[1],attr$1=e1[2],n1$2=e1[1];
                                      return [3,n1$2 + n2$1,attr$1]}
                                    break
                                   }}
                             else
                              if(typeof e1 !== "number")
                               switch(e1[0])
                                {case 2:
                                  if(typeof match !== "number" && 2 === match[0])
                                   {var n2$2=match[1],attr$2=e1[2],n1$3=e1[1];
                                    return [2,caml_mul(n1$3,n2$2),attr$2]}
                                  break;
                                 case 3:
                                  if(typeof match !== "number" && 3 === match[0])
                                   {var n2$3=match[1],attr$3=e1[2],n1$4=e1[1];
                                    return [3,n1$4 * n2$3,attr$3]}
                                  break
                                 }}
                           else
                            if(typeof e1 !== "number" && 1 === e1[0])
                             if(typeof match !== "number" && 1 === match[0])
                              {var
                                n2$4=match[1],
                                attr$4=e1[2],
                                n1$5=e1[1],
                                n2$5=n1$5?n2$4:n1$5;
                               return [1,n2$5,attr$4]}
                           return failwith(_OP_)},
                         _$K_,
                         _$J_),
                      match$0=[0,1,[0,c,other]];
                    else
                     {if(isZero(_$K_))
                       if(caml_string_equal(_$Q_,_OQ_))
                        var match$0=[0,0,[0,_$K_,0]],switch$4=1;
                       else
                        var switch$4=0;
                      else
                       var switch$4=0;
                      if(!switch$4)
                       {if(typeof _$K_ === "number")
                         var switch$5=0;
                        else
                         switch(_$K_[0])
                          {case 2:var switch$5=1 === _$K_[1]?1:0;break;
                           case 3:var switch$5=_$K_[1] != 1?0:1;break;
                           default:var switch$5=0}
                        var _$L_=switch$5?1:0;
                        if(_$L_)
                         if(caml_string_equal(_$Q_,_OR_))
                          var match$0=[0,0,other],switch$6=1;
                         else
                          var switch$6=0;
                        else
                         var switch$6=0;
                        if(!switch$6)
                         {if(isZero(_$K_))
                           if(caml_string_equal(_$Q_,_OS_))
                            var match$0=[0,0,other],switch$7=1;
                           else
                            var switch$7=0;
                          else
                           var switch$7=0;
                          if(!switch$7)
                           {if(isTrue(_$K_))
                             if(caml_string_equal(_$Q_,_OT_))
                              var match$0=[0,0,[0,_$K_,0]],switch$8=1;
                             else
                              var switch$8=0;
                            else
                             var switch$8=0;
                            if(!switch$8)
                             {if(isFalse(_$K_))
                               if(caml_string_equal(_$Q_,_OU_))
                                var match$0=[0,0,other],switch$9=1;
                               else
                                var switch$9=0;
                              else
                               var switch$9=0;
                              if(!switch$9)
                               {if(isTrue(_$K_))
                                 if(caml_string_equal(_$Q_,_OV_))
                                  var match$0=[0,0,other],switch$10=1;
                                 else
                                  var switch$10=0;
                                else
                                 var switch$10=0;
                                if(!switch$10)
                                 {if(isFalse(_$K_))
                                   if(caml_string_equal(_$Q_,_OW_))
                                    var match$0=[0,0,[0,_$K_,0]],switch$11=1;
                                   else
                                    var switch$11=0;
                                  else
                                   var switch$11=0;
                                  if(!switch$11)var match$0=[0,0,elems$1]}}}}}}}}
                  else
                   var match$0=[0,0,elems$1];
                  var elems$2=match$0[2],simpl=match$0[1];
                  if(found)
                   var switch$12=0;
                  else
                   if(simpl)var switch$12=0;else var state$0=state,switch$12=1;
                  if(!switch$12)var state$0=reapply(state);
                  if(elems$2)
                   {if(elems$2[2])
                     var _$R_=[8,_$Q_,elems$2,attr];
                    else
                     var e=elems$2[1],_$R_=e;
                    var exp$0=_$R_}
                  else
                   var exp$0=failwith(_O4_);
                  return [0,state$0,exp$0]}}
              break;
             case 10:
              var else$0=exp[3],then=exp[2],cond=exp[1];
              return isTrue(cond)
                      ?[0,reapply(state),then]
                      :isFalse(cond)?[0,reapply(state),else$0]:[0,state,exp]
             }
          return [0,state,exp]}),
     stmt_x$0=
      makeExpander
       (_Pd_,
        function(state,stmt)
         {if(typeof stmt !== "number" && 4 === stmt[0])
           {var _$E_=stmt[1];
            if(typeof _$E_ !== "number" && 1 === _$E_[0])
             {if(0 === _$E_[1])
               {var _$F_=stmt[3];
                if(_$F_)
                 {var else$0=_$F_[1];return [0,reapply(state),[0,else$0,0]]}
                return [0,reapply(state),0]}
              var then=stmt[2];
              return [0,reapply(state),[0,then,0]]}}
          return [0,state,[0,stmt,0]]}),
     mapper$5=
      [0,
       default_mapper[1],
       default_mapper[2],
       exp$2,
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       stmt_x$0],
     exp$3=
      make$1
       (_Pf_,
        function(state,exp)
         {if(typeof exp !== "number" && 10 === exp[0])
           {var attr=exp[4];
            if(!state[2][17][1])
             {var
               match=tick(state),
               state$0=match[2],
               n=match[1],
               var_name=_a_(_Pe_,caml_new_string("" + n)),
               exp$0=[5,[0,var_name,0],attr],
               lhs=[1,[0,var_name,0],attr[7],attr],
               decl=[0,lhs,0,init$0],
               bind=[7,lhs,exp,init$0],
               acc=state$0[1],
               state$1=set(state$0,[0,bind,[0,decl,acc]]);
              return [0,state$1,exp$0]}}
          return [0,state,exp]}),
     mapper$6=
      [0,
       default_mapper[1],
       default_mapper[2],
       exp$3,
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       default_mapper[9]],
     stmt_x$1=
      makeExpander
       (_Ph_,
        function(state,stmt)
         {if(typeof stmt !== "number")
           switch(stmt[0])
            {case 0:
              var _$y_=stmt[2];
              if(_$y_)
               {var _$z_=_$y_[1],_$A_=stmt[1];
                if(typeof _$z_ !== "number" && 10 === _$z_[0])
                 {var
                   attr$0=stmt[3],
                   ifattr=_$z_[4],
                   else$0=_$z_[3],
                   then=_$z_[2],
                   cond=_$z_[1],
                   decl=[0,_$A_,0,attr$0],
                   if$0=
                    [4,
                     cond,
                     [7,_$A_,then,ifattr],
                     [0,[7,_$A_,else$0,ifattr]],
                     attr$0];
                  return [0,reapply(state),[0,decl,[0,if$0,0]]]}
                var
                 attr=stmt[3],
                 acc=newState(state,0),
                 match=map_exp_to_stmt(mapper$6,acc,_$z_),
                 rhs=match[2],
                 acc$0=match[1],
                 match$0=restoreState(state,acc$0),
                 acc_stmts=match$0[2],
                 state$0=match$0[1],
                 stmts=[0,[7,_$A_,rhs,attr],[0,[0,_$A_,0,attr],acc_stmts]],
                 state$1=0 === acc_stmts?state$0:reapply(state$0);
                return [0,state$1,rev(stmts)]}
              break;
             case 3:
              var
               attr$1=stmt[2],
               e=stmt[1],
               acc$1=newState(state,0),
               match$1=map_exp_to_stmt(mapper$6,acc$1,e),
               e$0=match$1[2],
               acc$2=match$1[1],
               match$2=restoreState(state,acc$2),
               acc_stmts$0=match$2[2],
               state$2=match$2[1],
               stmts$0=[0,[3,e$0,attr$1],acc_stmts$0],
               state$3=0 === acc_stmts$0?state$2:reapply(state$2);
              return [0,state$3,rev(stmts$0)];
             case 4:
              var attr$2=stmt[4],else$1=stmt[3],then$0=stmt[2],cond$0=stmt[1];
              if(typeof cond$0 === "number")
               var switch$0=0;
              else
               switch(cond$0[0])
                {case 1:
                 case 5:var _$B_=1,switch$0=1;break;
                 default:var switch$0=0}
              if(!switch$0)var _$B_=0;
              if(!_$B_)
               {var
                 match$3=tick(state),
                 state$4=match$3[2],
                 n=match$3[1],
                 var_name=_a_(_Pg_,caml_new_string("" + n)),
                 cond_attr=fromExp$0(cond$0),
                 lhs=[1,[0,var_name,0],cond_attr[7],cond_attr],
                 cond$1=[5,[0,var_name,0],cond_attr],
                 decl$0=[0,lhs,0,attr$2],
                 bind=[7,lhs,cond$0,attr$2];
                return [0,
                        reapply(state$4),
                        [0,decl$0,[0,bind,[0,[4,cond$1,then$0,else$1,attr$2],0]]]]}
              break;
             case 7:
              var _$C_=stmt[2],_$D_=stmt[1];
              if(typeof _$C_ !== "number" && 10 === _$C_[0])
               {var
                 attr$4=stmt[3],
                 ifattr$0=_$C_[4],
                 else$2=_$C_[3],
                 then$1=_$C_[2],
                 cond$2=_$C_[1];
                return [0,
                        reapply(state),
                        [0,
                         [4,
                          cond$2,
                          [7,_$D_,then$1,ifattr$0],
                          [0,[7,_$D_,else$2,ifattr$0]],
                          attr$4],
                         0]]}
              var
               attr$3=stmt[3],
               acc$3=newState(state,0),
               match$4=map_exp_to_stmt(mapper$6,acc$3,_$C_),
               rhs$0=match$4[2],
               acc$4=match$4[1],
               match$5=restoreState(state,acc$4),
               acc_stmts$1=match$5[2],
               state$5=match$5[1],
               stmts$1=[0,[7,_$D_,rhs$0,attr$3],acc_stmts$1],
               state$6=0 === acc_stmts$1?state$5:reapply(state$5);
              return [0,state$6,rev(stmts$1)]
             }
          return [0,state,[0,stmt,0]]}),
     mapper$7=
      [0,
       default_mapper[1],
       default_mapper[2],
       default_mapper[3],
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       stmt_x$1];
    function makeTmp(tick,i)
     {return [0,
              _a_
               (_Pj_,
                _a_
                 (caml_new_string("" + tick),
                  _a_(_Pi_,caml_new_string("" + i)))),
              0]}
    function makeValBind(lhs,rhs){return [0,lhs,[0,rhs],init$0]}
    function makeBind(lhs,rhs){return [7,lhs,rhs,init$0]}
    function isUselessBind(lhs,rhs)
     {if(1 === lhs[0])if(typeof rhs !== "number" && 5 === rhs[0])return 1;
      return 0}
    function hasLessThanOneBinding(stmts){return length(stmts) < 3?1:0}
    function createAssignments(tick,kind,lhs,rhs)
     {var
       match$0=mapper_list(map_lhs_exp,mapper,state$0,lhs),
       s$0=match$0[1],
       _$v_=s$0[1],
       match=map_exp_list(mapper,state$0,rhs),
       s=match[1],
       _$w_=caml_call2(IdSet[8],_$v_,s[1]);
      if(caml_call1(IdSet[2],_$w_))
       return map2(function(a,b){return caml_call2(kind,a,b)},lhs,rhs);
      var
       stmts1=
        mapi
         (function(i,a)
           {var attr=fromExp$0(a),_$x_=attr[7];
            return makeValBind([1,makeTmp(tick,i),_$x_,attr],a)},
          rhs),
       stmts2=
        mapi
         (function(i,a)
           {var attr=fromLhsExp$0(a);
            return caml_call2(kind,a,[5,makeTmp(tick,i),attr])},
          lhs);
      return joinErrors(stmts1,stmts2)}
    var
     exp$4=
      make$1
       (_Pn_,
        function(state,exp)
         {if(typeof exp !== "number")
           switch(exp[0])
            {case 6:
              var
               attr=exp[2],
               match=tick(state),
               state$0=match[2],
               n=match[1],
               var_name=_a_(_Pk_,caml_new_string("" + n)),
               exp$0=[5,[0,var_name,0],attr],
               lhs=[1,[0,var_name,0],attr[7],attr],
               decl=[0,lhs,0,init$0],
               bind=[7,lhs,exp,init$0],
               acc=state$0[1],
               state$1=set(state$0,[0,bind,[0,decl,acc]]);
              return [0,state$1,exp$0];
             case 9:
              var _$t_=exp[4],_$u_=_$t_[7];
              if(_$u_)
               {var typ=_$u_[1];
                if(!isSimpleType(typ))
                 {var
                   match$0=tick(state),
                   state$2=match$0[2],
                   n$0=match$0[1],
                   var_name$0=_a_(_Pl_,caml_new_string("" + n$0)),
                   exp$1=[5,[0,var_name$0,0],_$t_],
                   lhs$0=[1,[0,var_name$0,0],_$t_[7],_$t_],
                   decl$0=[0,lhs$0,0,init$0],
                   bind$0=[7,lhs$0,exp,init$0],
                   acc$0=state$2[1],
                   state$3=set(state$2,[0,bind$0,[0,decl$0,acc$0]]);
                  return [0,state$3,exp$1]}}
              break;
             case 12:
              var
               attr$0=exp[2],
               match$1=tick(state),
               state$4=match$1[2],
               n$1=match$1[1],
               var_name$1=_a_(_Pm_,caml_new_string("" + n$1)),
               exp$2=[5,[0,var_name$1,0],attr$0],
               lhs$1=[1,[0,var_name$1,0],attr$0[7],attr$0],
               decl$1=[0,lhs$1,0,init$0],
               bind$1=[7,lhs$1,exp,init$0],
               acc$1=state$4[1],
               state$5=set(state$4,[0,bind$1,[0,decl$1,acc$1]]);
              return [0,state$5,exp$2]
             }
          return [0,state,exp]}),
     mapper$8=
      [0,
       default_mapper[1],
       default_mapper[2],
       exp$4,
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       default_mapper[9]],
     stmt_x$2=
      makeExpander
       (_Po_,
        function(state,stmt)
         {if(typeof stmt !== "number")
           switch(stmt[0])
            {case 0:
              var _$j_=stmt[1];
              if(2 === _$j_[0])
               {var _$l_=stmt[2],_$m_=_$j_[1];
                if(!_$l_)
                 {var
                   attr$0=stmt[3],
                   stmts$1=map(function(a){return [0,a,0,attr$0]},_$m_);
                  return [0,reapply(state),stmts$1]}
                var _$n_=_$l_[1];
                if(typeof _$n_ === "number")
                 var switch$0=0;
                else
                 if(12 === _$n_[0])
                  {var rhs$1=_$n_[1],_$o_=length(rhs$1);
                   if(length(_$m_) === _$o_)
                    {var
                      match$1=tick(state),
                      state$2=match$1[2],
                      tick$0=match$1[1],
                      stmts$0=createAssignments(tick$0,makeValBind,_$m_,rhs$1);
                     return [0,reapply(state$2),stmts$0]}
                   var switch$0=1}
                 else
                  var switch$0=0}
              var _$k_=stmt[2];
              if(_$k_)
               {var
                 attr=stmt[3],
                 rhs=_$k_[1],
                 acc=newState(state,0),
                 match=map_exp_to_stmt(mapper$8,acc,rhs),
                 rhs$0=match[2],
                 acc$0=match[1],
                 match$0=restoreState(state,acc$0),
                 acc_stmts=match$0[2],
                 state$0=match$0[1];
                if(isUselessBind(_$j_,rhs$0))
                 if(hasLessThanOneBinding(acc_stmts))
                  return [0,state,[0,stmt,0]];
                var
                 stmts=[0,[0,_$j_,0,attr],[0,[7,_$j_,rhs$0,attr],acc_stmts]],
                 state$1=0 === acc_stmts?state$0:reapply(state$0);
                return [0,state$1,rev(stmts)]}
              break;
             case 3:
              var _$p_=stmt[1];
              if(typeof _$p_ !== "number" && 5 === _$p_[0])
               return [0,state,[0,stmt,0]];
              var
               attr$1=stmt[2],
               acc$1=newState(state,0),
               match$2=map_exp_to_stmt(mapper$8,acc$1,_$p_),
               e=match$2[2],
               acc$2=match$2[1],
               match$3=restoreState(state,acc$2),
               acc_stmts$0=match$3[2],
               state$3=match$3[1],
               stmts$2=[0,[3,e,attr$1],acc_stmts$0],
               state$4=0 === acc_stmts$0?state$3:reapply(state$3);
              return [0,state$4,rev(stmts$2)];
             case 7:
              var _$q_=stmt[1];
              if(2 === _$q_[0])
               {var _$r_=stmt[2];
                if(typeof _$r_ === "number")
                 var switch$1=0;
                else
                 if(12 === _$r_[0])
                  {var rhs$4=_$r_[1],lhs=_$q_[1],_$s_=length(rhs$4);
                   if(length(lhs) === _$s_)
                    {var
                      match$6=tick(state),
                      state$7=match$6[2],
                      tick$1=match$6[1],
                      stmts$4=createAssignments(tick$1,makeBind,lhs,rhs$4);
                     return [0,reapply(state$7),stmts$4]}
                   var switch$1=1}
                 else
                  var switch$1=0}
              var
               attr$2=stmt[3],
               rhs$2=stmt[2],
               acc$3=newState(state,0),
               match$4=map_exp_to_stmt(mapper$8,acc$3,rhs$2),
               rhs$3=match$4[2],
               acc$4=match$4[1],
               match$5=restoreState(state,acc$4),
               acc_stmts$1=match$5[2],
               state$5=match$5[1];
              if(isUselessBind(_$q_,rhs$3))
               if(hasLessThanOneBinding(acc_stmts$1))
                return [0,state,[0,stmt,0]];
              var
               stmts$3=[0,[7,_$q_,rhs$3,attr$2],acc_stmts$1],
               state$6=0 === acc_stmts$1?state$5:reapply(state$5);
              return [0,state$6,rev(stmts$3)]
             }
          return [0,state,[0,stmt,0]]}),
     mapper$9=
      [0,
       default_mapper[1],
       default_mapper[2],
       default_mapper[3],
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       stmt_x$2],
     exp$5=
      make$1
       (_Pt_,
        function(state,exp)
         {if(typeof exp !== "number" && 9 === exp[0])
           if(!exp[1])
            {var _$g_=exp[2];
             if(_$g_)
              if(!caml_string_notequal(_$g_[1],_Ps_))
               if(!_$g_[2])
                {var _$h_=exp[3];
                 if(_$h_)
                  if(!_$h_[2])
                   {var
                     attr=exp[4],
                     arr=_$h_[1],
                     arr_attr=fromExp$0(arr),
                     _$i_=arr_attr[7];
                    if(_$i_)
                     {var typ=_$i_[1],_$b_=typ[1];
                      if(2 === _$b_[0])
                       {var _$c_=_$b_[1];
                        if(_$c_)
                         if(caml_string_notequal(_$c_[1],_Pq_))
                          var switch$0=0;
                         else
                          if(_$c_[2])
                           var switch$0=0;
                          else
                           {var _$d_=_$b_[2];
                            if(_$d_)
                             {var _$e_=_$d_[2];
                              if(_$e_)
                               {var _$f_=_$e_[1][1];
                                if(6 === _$f_[0])
                                 if(_$e_[2])
                                  var switch$0=0;
                                 else
                                  var n=_$f_[1],size=n,switch$0=1;
                                else
                                 var switch$0=0}
                              else
                               var switch$0=0}
                            else
                             var switch$0=0}
                        else
                         var switch$0=0}
                      else
                       var switch$0=0;
                      if(!switch$0)var size=failwith(_Pp_)}
                    else
                     var size=failwith(_Pr_);
                    return [0,state,[2,size,attr]]}}}
          return [0,state,exp]}),
     mapper$10=
      [0,
       default_mapper[1],
       default_mapper[2],
       exp$5,
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       default_mapper[9]],
     run=
      seq
       (mapper$10,
        seq
         (mapper$9,
          seq(mapper$7,seq(mapper$5,seq(mapper$4,seq(mapper$3,mapper$2))))));
    function set$0(m,r,c,v)
     {var __$_=c - 1 | 0,_$a_=r - 1 | 0;
      return caml_check_bound(caml_check_bound(m,_$a_)[_$a_ + 1],__$_)
              [__$_ + 1]
             =
             v}
    function get$4(m,r,c)
     {var __9_=c - 1 | 0,____=r - 1 | 0;
      return caml_check_bound(caml_check_bound(m,____)[____ + 1],__9_)
              [__9_ + 1]}
    function make$2(rows,columns)
     {return init(rows,function(param){return caml_make_vect(columns,0)})}
    function multiply(x,y)
     {var
       x0=x.length - 1,
       y0=y.length - 1,
       y1=0 === y0?0:caml_check_bound(y,0)[1].length - 1,
       z=make$2(x0,y1),
       __1_=1;
      if(!(x0 < 1))
       {var i=__1_;
        for(;;)
         {var __2_=1;
          if(!(y1 < 1))
           {var j=__2_;
            for(;;)
             {var __4_=1;
              if(!(y0 < 1))
               {var k=__4_;
                for(;;)
                 {var __6_=get$4(y,k,j),__7_=get$4(x,i,k) * __6_;
                  set$0(z,i,j,get$4(z,i,j) + __7_);
                  var __8_=k + 1 | 0;
                  if(y0 !== k){var k=__8_;continue}
                  break}}
              var __5_=j + 1 | 0;
              if(y1 !== j){var j=__5_;continue}
              break}}
          var __3_=i + 1 | 0;
          if(x0 !== i){var i=__3_;continue}
          break}}
      return z}
    function get$5(buffer)
     {var __Z_=buffer[2],__0_=buffer[1];
      if(0 <= __Z_)
       if(__0_[2] <= __Z_)
        var switch$0=0;
       else
        var c=caml_string_unsafe_get(__0_[1],__Z_),switch$0=1;
      else
       var switch$0=0;
      if(!switch$0)var c=invalid_arg(_aa_);
      buffer[2] = buffer[2] + 1 | 0;
      return c}
    function get_int(buffer){return get$5(buffer)}
    function shift_or(b1,b2){return b2 << 8 | b1}
    function read2(buffer)
     {var b1=get_int(buffer),b2=get_int(buffer);return shift_or(b1,b2)}
    function read4(buffer)
     {var
       b1=get_int(buffer),
       b2=get_int(buffer),
       b3=get_int(buffer),
       b4=get_int(buffer);
      return shift_or(b1,shift_or(b2,shift_or(b3,b4)))}
    function read4_chars(buffer)
     {var
       c1=get$5(buffer),
       c2=get$5(buffer),
       c3=get$5(buffer),
       c4=get$5(buffer),
       result=caml_create_bytes(4);
      caml_bytes_set(result,0,c1);
      caml_bytes_set(result,1,c2);
      caml_bytes_set(result,2,c3);
      caml_bytes_set(result,3,c4);
      return result}
    function searchData(buffer)
     {function loop(param)
       {a:
        for(;;)
         {if(caml_string_equal(read4_chars(buffer),_P5_))return 1;
          var size=read4(buffer),n=size;
          for(;;)
           {if(0 === n)continue a;
            get$5(buffer);
            var n$0=n - 1 | 0,n=n$0;
            continue}}}
      try
       {var found=loop(0);return found}
      catch(__Y_)
       {__Y_ = caml_wrap_exception(__Y_);
        if(__Y_[1] === Invalid_argument)return 0;
        throw __Y_}}
    function readSample16(buffer)
     {var v=read2(buffer);
      return caml_notequal(32768 & v,0)?(-32768 | v) / 32768:v / 32768}
    function readSample24(buffer)
     {var v=read2(buffer);
      return caml_notequal(8388608 & v,0)?(-8388608 | v) / 8388608:v / 8388608}
    function getInterpEnv(state)
     {var env=state[1][6],path=currentScope(state),__X_=path[1];
      if(__X_)var module=__X_[1],match=[0,module];else var match=0;
      if(match){var module$0=match[1];return enterModule(env,[0,module$0,0])}
      return env}
    var
     avoid=caml_call1(IdSet[30],_Qg_),
     exp$6=
      make$1
       (_Qh_,
        function(state,exp)
         {if(typeof exp !== "number")
           switch(exp[0])
            {case 3:
              var attr$1=exp[2],v=exp[1],match=caml_classify_float(v);
              switch(match)
               {case 0:return [0,state,exp];
                case 1:return [0,state,exp];
                case 2:return [0,state,exp];
                case 3:return [0,state,[3,3.40282347e+38,attr$1]];
                default:return raiseError(msg,attr$1[1])}
             case 9:
              if(!exp[1])
               {var attr$2=exp[4],args$0=exp[3],name$0=exp[2];
                if(!attr$2[9])
                 {var param=args$0;
                  for(;;)
                   {if(param)
                     {var l=param[2],a=param[1];
                      if(typeof a === "number")
                       var switch$0=0;
                      else
                       switch(a[0])
                        {case 1:
                         case 2:
                         case 3:var __U_=1,switch$0=1;break;
                         default:var switch$0=0}
                      if(!switch$0)var __U_=0;
                      if(__U_){var param=l;continue}
                      var __V_=__U_}
                    else
                     var __V_=1;
                    if(__V_)
                     if(!caml_call2(IdSet[3],name$0,avoid))
                      {var env=getInterpEnv(state),call=evalExp(env,exp);
                       if(typeof call === "number")
                        var switch$1=0;
                       else
                        if(9 === call[0])
                         var
                          attr=call[4],
                          args=call[3],
                          name=call[2],
                          inst=call[1],
                          attr$0=
                           [0,
                            attr[1],
                            attr[2],
                            attr[3],
                            attr[4],
                            attr[5],
                            attr[6],
                            attr[7],
                            attr[8],
                            1],
                          __W_=[9,inst,name,args,attr$0],
                          switch$1=1;
                        else
                         var switch$1=0;
                       if(!switch$1)var __W_=call;
                       return [0,state,__W_]}
                    break}}}
              break
             }
          return [0,state,exp]}),
     mapper$11=
      [0,
       default_mapper[1],
       default_mapper[2],
       exp$6,
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       default_mapper[9]],
     attr_int=
      [0,
       init$0[1],
       init$0[2],
       init$0[3],
       init$0[4],
       init$0[5],
       init$0[6],
       [0,ret$0],
       init$0[8],
       init$0[9]],
     attr_real=
      [0,
       init$0[1],
       init$0[2],
       init$0[3],
       init$0[4],
       init$0[5],
       init$0[6],
       [0,real_type],
       init$0[8],
       init$0[9]];
    function real_array_type(size)
     {return [0,[2,_Qi_,[0,real_type,[0,[0,[6,size,0]],0]],0]]}
    function attr_array(size)
     {var __R_=init$0[9],__S_=init$0[8],__T_=[0,real_array_type(size)];
      return [0,
              init$0[1],
              init$0[2],
              init$0[3],
              init$0[4],
              init$0[5],
              init$0[6],
              __T_,
              __S_,
              __R_]}
    function f$0(x){return [3,x,init$0]}
    function makeDecl(attr,fname,name,data)
     {var
       varname=joinSep(_Qj_,fname,name),
       size=length(data),
       atype=real_array_type(size),
       __J_=
        [0,
         attr[1],
         attr[2],
         attr[3],
         attr[4],
         attr[5],
         attr[6],
         [0,atype],
         attr[8],
         attr[9]];
      function direct(f,i,l)
       {if(l)
         {var __L_=l[2],__M_=l[1];
          if(__L_)
           {var __N_=__L_[2],__O_=__L_[1];
            if(__N_)
             {if(__N_[2])
               {if(0 === i)
                 {var accu=0,param=l;
                  for(;;)
                   {if(param)
                     {var
                       param$0=param[2],
                       a=param[1],
                       accu$0=[0,caml_call1(f,a),accu],
                       accu=accu$0,
                       param=param$0;
                      continue}
                    return rev(accu)}}
                var
                 __P_=l[2],
                 __Q_=__P_[2],
                 match=__Q_[2],
                 l$0=match[2],
                 x4=match[1],
                 x3=__Q_[1],
                 x2=__P_[1],
                 x1=l[1],
                 y1=caml_call1(f,x1),
                 y2=caml_call1(f,x2),
                 y3=caml_call1(f,x3),
                 y4=caml_call1(f,x4);
                return [0,y1,[0,y2,[0,y3,[0,y4,direct(f,i - 1 | 0,l$0)]]]]}
              var
               x3$0=__N_[1],
               y1$0=caml_call1(f,__M_),
               y2$0=caml_call1(f,__O_);
              return [0,y1$0,[0,y2$0,[0,caml_call1(f,x3$0),0]]]}
            var y1$1=caml_call1(f,__M_);
            return [0,y1$1,[0,caml_call1(f,__O_),0]]}
          return [0,caml_call1(f,__M_),0]}
        return 0}
      var
       arr=[6,of_list(direct(f$0,direct_depth_default,data)),__J_],
       __K_=
        [0,
         init$0[1],
         init$0[2],
         init$0[3],
         init$0[4],
         1,
         init$0[6],
         init$0[7],
         init$0[8],
         init$0[9]];
      return [0,[1,varname,[0,atype],attr_array(size)],[0,arr],__K_]}
    function getInputVar(arg){var id=arg[1];return [5,id,attr_real]}
    var
     stmt_x$3=
      makeExpander
       (_QJ_,
        function(state,stmt)
         {if(typeof stmt !== "number" && 5 === stmt[0])
           {var
             attr=stmt[5],
             ret=stmt[4],
             args=stmt[2],
             name=stmt[1],
             match$2=getTableParams(_QH_,params$0,msg$1,attr[8]);
            if(match$2)
             {var __s_=match$2[1],__t_=__s_[2],__u_=__s_[1];
              if(__t_)
               {var __v_=__t_[1];
                if(typeof __v_ === "number")
                 var switch$0=0;
                else
                 if(2 === __v_[0])
                  {var __w_=__t_[2];
                   if(__w_)
                    {var __x_=__w_[1];
                     if(typeof __x_ === "number")
                      var switch$1=1;
                     else
                      if(3 === __x_[0])
                       {var __y_=__w_[2];
                        if(__y_)
                         {var __z_=__y_[1];
                          if(typeof __z_ === "number")
                           var switch$2=1;
                          else
                           if(3 === __z_[0])
                            if(__y_[2])
                             var switch$0=1,switch$1=0,switch$2=0;
                            else
                             {var max=__z_[1],min=__x_[1],size=__v_[1];
                              if(ret)
                               var t=ret[1],__A_=isRealType(t);
                              else
                               var __A_=failwith(_Qm_);
                              if(__A_)
                               {var __B_=attr[1];
                                if(args)
                                 if(args[2])
                                  var switch$3=0;
                                 else
                                  var var$0=args[1],var$1=getInputVar(var$0),switch$3=1;
                                else
                                 var switch$3=0;
                                if(!switch$3)var var$1=raiseError(msg$0,__B_);
                                var
                                 env=getInterpEnv(state),
                                 match$3=currentScope(state),
                                 path=match$3[1],
                                 name$0=joinErrors(path,name),
                                 data=
                                  init
                                   ((size * 2 | 0) + 4 | 0,
                                    function(i)
                                     {var
                                       x$1=i / 2,
                                       x$0=(x$1 - 0) * (max - min) / (size - 0) + min;
                                      if(name$0)
                                       {var __G_=name$0[2];
                                        if(__G_)
                                         var name=__G_[1],match=[0,name],switch$0=1;
                                        else
                                         var switch$0=0}
                                      else
                                       var switch$0=0;
                                      if(!switch$0)var match=0;
                                      if(match)
                                       {var
                                         fname=match[1],
                                         exp=[9,0,[0,fname,0],[0,[3,x$0,init$0],0],init$0],
                                         x=evalExp(env,exp);
                                        if(typeof x === "number")
                                         var switch$1=0;
                                        else
                                         if(3 === x[0])
                                          var value=x[1],__H_=value,switch$1=1;
                                         else
                                          var switch$1=0;
                                        if(!switch$1)var __H_=failwith(_Qk_);
                                        var __I_=__H_}
                                      else
                                       var __I_=failwith(_QD_);
                                      return [0,x$0,__I_]}),
                                 index=size,
                                 acc0=0,
                                 acc1=0,
                                 acc2=0;
                                for(;;)
                                 {if(0 <= index)
                                   {var
                                     __m_=index * 2 | 0,
                                     p1=caml_check_bound(data,__m_)[__m_ + 1],
                                     __n_=(index * 2 | 0) + 1 | 0,
                                     p2=caml_check_bound(data,__n_)[__n_ + 1],
                                     __o_=(index * 2 | 0) + 2 | 0,
                                     p3=caml_check_bound(data,__o_)[__o_ + 1],
                                     x_points=[0,p1[1],[0,p2[1],[0,p3[1],0]]],
                                     y_points=[0,p1[2],[0,p2[2],[0,p3[2],0]]],
                                     match=length(x_points),
                                     match$0=length(y_points);
                                    if(3 === match)
                                     if(3 === match$0)
                                      {var
                                        m=
                                         init
                                          (3,
                                           function(x_points)
                                             {return function(i)
                                               {var xi=nth(x_points,i);
                                                return init(3,function(p){return Math.pow(xi,p)})}}
                                            (x_points)),
                                        y=of_list(map(function(a){return [254,a]},y_points)),
                                        xt=make$2(3,3),
                                        get$1=
                                         function(m)
                                          {function get(param)
                                            {var c=param[2],r=param[1];return get$4(m,r,c)}
                                           return get},
                                        get$0=get$1(m),
                                        r$1=
                                         function(xt)
                                          {function r(param,v)
                                            {var c=param[2],r=param[1];return set$0(xt,r,c,v)}
                                           return r},
                                        r$0=r$1(xt),
                                        a$0=get$0(_PM_),
                                        b$0=get$0(_PN_),
                                        c$0=get$0(_PO_),
                                        d$0=get$0(_PP_),
                                        e$0=get$0(_PQ_),
                                        f$0=get$0(_PR_),
                                        g$0=get$0(_PS_),
                                        h$0=get$0(_PT_),
                                        i$0=get$0(_PU_);
                                       r$0(_PV_,a$0);
                                       r$0(_PW_,d$0);
                                       r$0(_PX_,g$0);
                                       r$0(_PY_,b$0);
                                       r$0(_PZ_,e$0);
                                       r$0(_P0_,h$0);
                                       r$0(_P1_,c$0);
                                       r$0(_P2_,f$0);
                                       r$0(_P3_,i$0);
                                       var
                                        m$0=multiply(xt,m),
                                        result=make$2(3,3),
                                        get$2=
                                         function(m)
                                          {function get(param)
                                            {var c=param[2],r=param[1];return get$4(m,r,c)}
                                           return get},
                                        get=get$2(m$0),
                                        r$2=
                                         function(result)
                                          {function r(param,v)
                                            {var c=param[2],r=param[1];return set$0(result,r,c,v)}
                                           return r},
                                        r=r$2(result),
                                        a=get(_Pu_),
                                        b=get(_Pv_),
                                        c=get(_Pw_),
                                        d=get(_Px_),
                                        e=get(_Py_),
                                        f=get(_Pz_),
                                        g=get(_PA_),
                                        h=get(_PB_),
                                        i=get(_PC_),
                                        det=
                                         -c
                                         *
                                         e
                                         *
                                         g
                                         +
                                         b
                                         *
                                         f
                                         *
                                         g
                                         +
                                         c
                                         *
                                         d
                                         *
                                         h
                                         -
                                         a
                                         *
                                         f
                                         *
                                         h
                                         -
                                         b
                                         *
                                         d
                                         *
                                         i
                                         +
                                         a
                                         *
                                         e
                                         *
                                         i;
                                       r(_PD_,(-f * h + e * i) / det);
                                       r(_PE_,(c * h - b * i) / det);
                                       r(_PF_,(-c * e + b * f) / det);
                                       r(_PG_,(f * g - d * i) / det);
                                       r(_PH_,(-c * g + a * i) / det);
                                       r(_PI_,(c * d - a * f) / det);
                                       r(_PJ_,(-e * g + d * h) / det);
                                       r(_PK_,(b * g - a * h) / det);
                                       r(_PL_,(-b * d + a * e) / det);
                                       var
                                        a$1=multiply(multiply(result,xt),y),
                                        result$0=
                                         concat(to_list(map$1(function(a){return to_list(a)},a$1))),
                                        __p_=result$0,
                                        switch$4=1}
                                     else
                                      var switch$4=0;
                                    else
                                     var switch$4=0;
                                    if(!switch$4)var __p_=failwith(_P4_);
                                    if(__p_)
                                     {var __i_=__p_[2];
                                      if(__i_)
                                       {var __j_=__i_[2];
                                        if(__j_)
                                         if(__j_[2])
                                          var switch$5=0;
                                         else
                                          var
                                           x3=__j_[1],
                                           x2=__i_[1],
                                           x1=__p_[1],
                                           match$1=[0,x1,x2,x3],
                                           switch$5=1;
                                        else
                                         var switch$5=0}
                                      else
                                       var switch$5=0}
                                    else
                                     var switch$5=0;
                                    if(!switch$5)var match$1=failwith(_Ql_);
                                    var
                                     c2=match$1[3],
                                     c1=match$1[2],
                                     c0=match$1[1],
                                     acc2$0=[0,c2,acc2],
                                     acc1$0=[0,c1,acc1],
                                     acc0$0=[0,c0,acc0],
                                     index$0=index - 1 | 0,
                                     index=index$0,
                                     acc0=acc0$0,
                                     acc1=acc1$0,
                                     acc2=acc2$0;
                                    continue}
                                  var
                                   __q_=[0,makeDecl(attr,name$0,_QE_,acc2),0],
                                   __r_=[0,makeDecl(attr,name$0,_QF_,acc1),__q_],
                                   result$1=[0,makeDecl(attr,name$0,_QG_,acc0),__r_],
                                   __C_=attr[9],
                                   __D_=removeAttrFunc(_QI_,attr[8]),
                                   attr$0=
                                    [0,
                                     attr[1],
                                     attr[2],
                                     attr[3],
                                     attr[4],
                                     attr[5],
                                     attr[6],
                                     attr[7],
                                     __D_,
                                     __C_],
                                   lindex=[1,_Qn_,[0,ret$0],attr_int],
                                   rindex=[5,_Qo_,attr_int],
                                   getCoeff=
                                    function(a)
                                     {var __F_=attr_array(size);
                                      return [9,
                                              0,
                                              _Qr_,
                                              [0,
                                               [9,
                                                0,
                                                _Qq_,
                                                [0,[5,joinSep(_Qp_,name$0,[0,a,0]),__F_],0],
                                                attr_real],
                                               [0,rindex,0]],
                                              attr_real]},
                                   initial_index=[3,(size - 1) / (max - min),attr_real],
                                   __k_=[0,[8,_Qt_,[0,getCoeff(_Qs_),[0,var$1,0]],attr_real],0],
                                   __l_=
                                    [0,
                                     [8,
                                      _Qw_,
                                      [0,var$1,[0,[8,_Qv_,[0,getCoeff(_Qu_),__k_],attr_real],0]],
                                      attr_real],
                                     0],
                                   body=
                                    [8,
                                     0,
                                     [0,
                                      [0,lindex,0,init$0],
                                      [0,
                                       [7,
                                        lindex,
                                        [9,
                                         0,
                                         _QC_,
                                         [0,
                                          [9,
                                           0,
                                           _QB_,
                                           [0,
                                            [8,
                                             _QA_,
                                             [0,
                                              initial_index,
                                              [0,[8,_Qz_,[0,var$1,[0,[3,min,attr_real],0]],attr_real],0]],
                                             attr_real],
                                            0],
                                           attr_int],
                                          [0,[2,0,attr_int],[0,[2,size - 1 | 0,attr_int],0]]],
                                         attr_int],
                                        init$0],
                                       [0,[3,[8,_Qy_,[0,getCoeff(_Qx_),__l_],attr_real],init$0],0]]],
                                     init$0],
                                   __E_=
                                    joinErrors(result$1,[0,[5,name,args,body,ret,attr$0],0]);
                                  return [0,reapply(state),__E_]}}
                              var switch$0=1,switch$1=0,switch$2=0}
                           else
                            var switch$2=1;
                          if(switch$2)var switch$0=1,switch$1=0}
                        else
                         var switch$0=1,switch$1=0}
                      else
                       var switch$1=1;
                     if(switch$1)var switch$0=1}
                   else
                    var switch$0=1}
                 else
                  var switch$0=0}
              return raiseError(msg$2,__u_)}
            return [0,state,[0,stmt,0]]}
          return [0,state,[0,stmt,0]]}),
     mapper$12=
      [0,
       default_mapper[1],
       default_mapper[2],
       default_mapper[3],
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       stmt_x$3],
     stmt_x$4=
      makeExpander
       (_Q1_,
        function(state,stmt)
         {if(typeof stmt !== "number" && 6 === stmt[0])
           {var
             attr=stmt[5],
             ret=stmt[3],
             args=stmt[2],
             name=stmt[1],
             match$3=getTableParams(_QZ_,params$1,msg$4,attr[8]);
            if(match$3)
             {var _Z7_=match$3[1],_Z8_=_Z7_[2],_Z9_=_Z7_[1];
              if(_Z8_)
               {var _Z__=_Z8_[1];
                if(typeof _Z__ === "number")
                 var switch$0=0;
                else
                 if(2 === _Z__[0])
                  {var _Z$_=_Z8_[2];
                   if(_Z$_)
                    {var __a_=_Z$_[1];
                     if(typeof __a_ === "number")
                      var switch$1=1;
                     else
                      if(4 === __a_[0])
                       if(_Z$_[2])
                        var switch$0=1,switch$1=0;
                       else
                        {var file=__a_[1],channels$0=_Z__[1];
                         if(isRealType(ret))
                          {var
                            match$4=currentScope(state),
                            path=match$4[1],
                            fname=joinErrors(path,name),
                            includes=state[1][5][13];
                           if(caml_sys_file_exists(file))
                            var match$0=[0,file];
                           else
                            {var inc=includes;
                             for(;;)
                              {if(inc)
                                {var t=inc[2],h=inc[1],fullname=concat$1(h,file);
                                 if(!caml_sys_file_exists(fullname)){var inc=t;continue}
                                 var match$0=[0,fullname]}
                               else
                                var match$0=0;
                               break}}
                           if(match$0)
                            {var filename=match$0[1],match=_hg_(filename);
                             if(match)
                              {var data=match[1],buffer=[0,data,0,data[2]];
                               if(caml_string_equal(read4_chars(buffer),_P7_))
                                {var chunk_size=read4(buffer);
                                 if(caml_lessthan(chunk_size,4))
                                  var error=_P8_;
                                 else
                                  if(caml_string_equal(read4_chars(buffer),_P9_))
                                   if(caml_string_equal(read4_chars(buffer),_P__))
                                    {var
                                      sub_chunk_size=read4(buffer),
                                      audio_format=read2(buffer);
                                     if(caml_notequal(sub_chunk_size,16))
                                      var switch$2=0;
                                     else
                                      if(caml_notequal(audio_format,1))
                                       var switch$2=0;
                                      else
                                       var error=_Qa_,switch$2=1;
                                     if(!switch$2)var error=_P$_}
                                   else
                                    var error=_Qb_;
                                  else
                                   var error=_Qc_}
                               else
                                var error=_Qd_;
                               if(0 === error[0])
                                {var channels=read2(buffer);
                                 read4(buffer);
                                 read4(buffer);
                                 read2(buffer);
                                 var
                                  bits=read2(buffer),
                                  e=
                                   16 === bits
                                    ?[0,readSample16]
                                    :24 === bits
                                      ?[0,readSample24]
                                      :[1,_a_(_P6_,caml_new_string("" + bits))];
                                 if(0 === e[0])
                                  {var sample_fn=e[1];
                                   if(searchData(buffer))
                                    {var
                                      size=read4(buffer),
                                      size$0=caml_div(caml_div(size,channels),bits / 8 | 0),
                                      data$0=
                                       init
                                        (channels,function(param){return caml_make_vect(size$0,0)}),
                                      loop_channels=
                                       function(index,channel)
                                        {if(channels <= channel)return 1;
                                         try
                                          {var
                                            value=caml_call1(sample_fn,buffer),
                                            channel_data=caml_check_bound(data$0,channel)[channel + 1];
                                           caml_check_bound(channel_data,index)[index + 1] = value;
                                           var __g_=loop_channels(index,channel + 1 | 0);
                                           return __g_}
                                         catch(__h_)
                                          {__h_ = caml_wrap_exception(__h_);
                                           if(__h_[1] === Invalid_argument)return 0;
                                           throw __h_}},
                                      index=0;
                                     for(;;)
                                      {if(size$0 <= index)
                                        var samples=size$0;
                                       else
                                        {if(loop_channels(index,0))
                                          {var index$0=index + 1 | 0,index=index$0;continue}
                                         var samples=index - 1 | 0}
                                       var match$1=[0,[0,channels,samples,data$0]];
                                       break}}
                                   else
                                    var match$1=_Qe_}
                                 else
                                  var match$1=e}
                               else
                                var match$1=error}
                             else
                              var match$1=_Qf_;
                             if(0 === match$1[0])
                              var wave=match$1[1],wave$0=wave;
                             else
                              var
                               read_msg=match$1[1],
                               msg=_a_(_QL_,_a_(file,_a_(_QK_,read_msg))),
                               wave$0=raiseError(msg,_Z9_)}
                           else
                            var
                             msg$0=_a_(_QN_,_a_(file,_QM_)),
                             wave$0=raiseError(msg$0,_Z9_);
                           if(wave$0[1] !== channels$0)
                            {var
                              msg$1=
                               _a_
                                (_QQ_,
                                 _a_
                                  (caml_new_string("" + channels$0),
                                   _a_(_QP_,_a_(caml_new_string("" + wave$0[1]),_QO_))));
                             raiseError(msg$1,_Z9_)}
                           var
                            _Z0_=wave$0[3],
                            f=
                             function(i,v)
                              {var __f_=to_list(v);
                               return makeDecl
                                       (attr,fname,[0,_a_(_QR_,caml_new_string("" + i)),0],__f_)},
                            l=_Z0_.length - 1;
                           if(0 === l)
                            var _Z1_=[0];
                           else
                            {var r=caml_make_vect(l,f(0,_Z0_[1])),_ZY_=l - 1 | 0,_ZX_=1;
                             if(!(_ZY_ < 1))
                              {var i=_ZX_;
                               for(;;)
                                {r[i + 1] = f(i,_Z0_[i + 1]);
                                 var _ZZ_=i + 1 | 0;
                                 if(_ZY_ !== i){var i=_ZZ_;continue}
                                 break}}
                             var _Z1_=r}
                           var
                            result=to_list(_Z1_),
                            attr_real=
                             [0,
                              init$0[1],
                              init$0[2],
                              init$0[3],
                              init$0[4],
                              init$0[5],
                              init$0[6],
                              [0,real_type],
                              init$0[8],
                              init$0[9]],
                            _Z4_=attr[1];
                           if(args)
                            {var _Z2_=args[2];
                             if(_Z2_)
                              if(_Z2_[2])
                               var switch$3=0;
                              else
                               var
                                index$1=_Z2_[1],
                                channel=args[1],
                                _Z3_=getInputVar(index$1),
                                match$2=[0,getInputVar(channel),_Z3_],
                                switch$3=1;
                             else
                              var switch$3=0}
                           else
                            var switch$3=0;
                           if(!switch$3)var match$2=raiseError(msg$3,_Z4_);
                           var
                            index$2=match$2[2],
                            channel$0=match$2[1],
                            _Z5_=wave$0[2],
                            f$0=
                             function(i$0)
                              {var
                                attr_bool=
                                 [0,
                                  init$0[1],
                                  init$0[2],
                                  init$0[3],
                                  init$0[4],
                                  init$0[5],
                                  init$0[6],
                                  [0,typ$0],
                                  init$0[8],
                                  init$0[9]],
                                attr_real=
                                 [0,
                                  init$0[1],
                                  init$0[2],
                                  init$0[3],
                                  init$0[4],
                                  init$0[5],
                                  init$0[6],
                                  [0,real_type],
                                  init$0[8],
                                  init$0[9]],
                                attr_int$0=
                                 [0,
                                  init$0[1],
                                  init$0[2],
                                  init$0[3],
                                  init$0[4],
                                  init$0[5],
                                  init$0[6],
                                  [0,ret$0],
                                  init$0[8],
                                  init$0[9]],
                                table_name=
                                 joinSep
                                  (_QT_,fname,[0,_a_(_QS_,caml_new_string("" + i$0)),0]),
                                table=
                                 [9,0,_QU_,[0,[5,table_name,attr_array(_Z5_)],0],attr_real],
                                i=[2,i$0,attr_int],
                                samples_e=[2,_Z5_,attr_int];
                               return [4,
                                       [8,_QX_,[0,channel$0,[0,i,0]],attr_bool],
                                       [3,
                                        [9,
                                         0,
                                         _QW_,
                                         [0,
                                          table,
                                          [0,[8,_QV_,[0,index$2,[0,samples_e,0]],attr_int$0],0]],
                                         attr_real],
                                        attr],
                                       0,
                                       attr]},
                            _Z6_=wave$0[1];
                           if(0 <= _Z6_)
                            if(0 === _Z6_)
                             var stmts=0;
                            else
                             {var i$2=_Z6_ - 1 | 0,acc=0,i$0=i$2;
                              for(;;)
                               {if(0 !== i$0)
                                 {var
                                   i$1=i$0 - 1 | 0,
                                   acc$0=[0,f$0(i$0),acc],
                                   acc=acc$0,
                                   i$0=i$1;
                                  continue}
                                var stmts=[0,f$0(i$0),acc];
                                break}}
                           else
                            var stmts=invalid_arg(_cw_);
                           var
                            default$0=[3,[3,0,attr_real],attr],
                            body=[8,0,joinErrors(stmts,[0,default$0,0]),attr],
                            __b_=attr[9],
                            __c_=removeAttrFunc(_Q0_,attr[8]),
                            attr$0=
                             [0,
                              attr[1],
                              attr[2],
                              attr[3],
                              attr[4],
                              attr[5],
                              0,
                              attr[7],
                              __c_,
                              __b_],
                            attr_int$0=
                             [0,
                              init$0[1],
                              init$0[2],
                              init$0[3],
                              init$0[4],
                              init$0[5],
                              init$0[6],
                              [0,ret$0],
                              init$0[8],
                              init$0[9]],
                            __d_=wave$0[2],
                            size_name=postfix(name,_QY_),
                            size_fun=
                             [5,size_name,0,[3,[2,__d_,attr_int$0],attr],[0,ret$0],attr],
                            __e_=
                             joinErrors
                              (result,
                               [0,size_fun,[0,[5,fname,args,body,[0,ret],attr$0],0]]);
                           return [0,reapply(state),__e_]}
                         var switch$0=1,switch$1=0}
                      else
                       var switch$1=1;
                     if(switch$1)var switch$0=1}
                   else
                    var switch$0=1}
                 else
                  var switch$0=0}
              return raiseError(msg$5,_Z9_)}
            return [0,state,[0,stmt,0]]}
          return [0,state,[0,stmt,0]]}),
     mapper$13=
      [0,
       default_mapper[1],
       default_mapper[2],
       default_mapper[3],
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       stmt_x$4],
     run$0=seq(mapper$13,seq(mapper$12,seq(mapper$11,mapper$5))),
     stmt=
      make$1
       (_Q3_,
        function(state,stmt)
         {if(typeof stmt !== "number" && 5 === stmt[0])
           {var
             attr=stmt[5],
             rettype=stmt[4],
             body=stmt[3],
             args=stmt[2],
             name=stmt[1],
             data$0=state[1],
             match=lookupRaise(0,state,name,attr[1]),
             path=match[1];
            if(isActive$0(state,name))
             if(!caml_call2(PathSet[3],path,data$0[2]))
              {var
                ctx_full=getContext(state,name),
                ctx=pathFromCurrent(state,ctx_full),
                arg0=[1,_Q2_,[0,[1,ctx,0]],2,attr],
                _ZS_=data$0[6],
                _ZT_=data$0[5],
                _ZU_=data$0[4],
                _ZV_=data$0[3],
                _ZW_=caml_call2(PathSet[4],path,data$0[2]),
                data=[0,data$0[1],_ZW_,_ZV_,_ZU_,_ZT_,_ZS_];
               return [0,
                       set(state,data),
                       [5,name,[0,arg0,args],body,rettype,attr]]}
            return [0,state,stmt]}
          return [0,state,stmt]}),
     exp$7=
      make$1
       (_Q6_,
        function(state,exp)
         {if(typeof exp !== "number")
           switch(exp[0])
            {case 5:
              var attr=exp[2],id=exp[1];
              if(isLocalInstanceOrMem(state,id))
               return [0,state,[5,[0,_Q4_,id],attr]];
              break;
             case 9:
              var _ZR_=exp[1];
              if(_ZR_)
               {var
                 attr$0=exp[4],
                 args=exp[3],
                 kind=exp[2],
                 id$0=_ZR_[1],
                 match=getContext(state,kind),
                 context=match[1],
                 typ=[0,[1,context,0]];
                return [0,
                        state,
                        [9,
                         0,
                         kind,
                         [0,
                          [5,
                           [0,_Q5_,id$0],
                           [0,
                            attr$0[1],
                            attr$0[2],
                            attr$0[3],
                            attr$0[4],
                            attr$0[5],
                            attr$0[6],
                            [0,typ],
                            attr$0[8],
                            attr$0[9]]],
                          args],
                         attr$0]]}
              break
             }
          return [0,state,exp]}),
     lhs_exp$1=
      make$1
       (_Q8_,
        function(state,exp)
         {if(1 === exp[0])
           {var attr=exp[3],tp=exp[2],id=exp[1];
            if(isLocalInstanceOrMem(state,id))
             return [0,state,[1,[0,_Q7_,id],tp,attr]]}
          return [0,state,exp]}),
     stmt_x$5=
      makeExpander
       (_Q9_,
        function(state,stmt)
         {if(typeof stmt !== "number" && 1 === stmt[0])return [0,state,0];
          return [0,state,[0,stmt,0]]}),
     mapper$14=
      [0,
       default_mapper[1],
       default_mapper[2],
       exp$7,
       lhs_exp$1,
       default_mapper[5],
       stmt,
       default_mapper[7],
       default_mapper[8],
       stmt_x$5],
     StmtSet=_Q_([0,compare$11]);
    function getInitFunctioName(id)
     {if(id)
       {var _ZP_=id[2],_ZQ_=id[1];
        return _ZP_?[0,_ZQ_,getInitFunctioName(_ZP_)]:[0,_a_(_ZQ_,_Q__),0]}
      return failwith(_Q$_)}
    function getFunctioTypeName(id)
     {if(id)
       {var _ZN_=id[2],_ZO_=id[1];
        return _ZN_?[0,_ZO_,getFunctioTypeName(_ZN_)]:[0,_a_(_ZO_,_Ra_),0]}
      return failwith(_Rb_)}
    function getInitValue$0(tp)
     {var tp$0=tp;
      for(;;)
       {var
         typedAttr=
          [0,
           init$0[1],
           init$0[2],
           init$0[3],
           init$0[4],
           init$0[5],
           init$0[6],
           [0,tp$0],
           init$0[8],
           init$0[9]],
         _ZE_=tp$0[1];
        switch(_ZE_[0])
         {case 1:
           var _ZF_=_ZE_[1];
           if(_ZF_)
            {var _ZG_=_ZF_[1];
             if(caml_string_notequal(_ZG_,_Rd_))
              {if(caml_string_notequal(_ZG_,_Re_))
                {if(!caml_string_notequal(_ZG_,_Rf_))
                  if(!_ZF_[2])return [3,0,typedAttr]}
               else
                if(!_ZF_[2])return [2,0,typedAttr]}
             else
              if(!_ZF_[2])return [1,0,typedAttr]}
           return [9,0,getInitFunctioName(_ZF_),0,typedAttr];
          case 2:
           var _ZH_=_ZE_[1];
           if(_ZH_)
            {var _ZI_=_ZH_[1];
             if(caml_string_notequal(_ZI_,_Rg_))
              {if(!caml_string_notequal(_ZI_,_Rh_))
                if(!_ZH_[2])
                 {var types=_ZE_[2],elems=map(getInitValue$0,types);
                  return [12,elems,typedAttr]}}
             else
              if(!_ZH_[2])
               {var _ZJ_=_ZE_[2];
                if(_ZJ_)
                 {var _ZK_=_ZJ_[2];
                  if(_ZK_)
                   {var _ZM_=_ZK_[1][1],_ZL_=_ZJ_[1];
                    if(6 === _ZM_[0])
                     if(!_ZK_[2])
                      {var
                        size=_ZM_[1],
                        sub_init=getInitValue$0(_ZL_),
                        intTypeAttr=
                         [0,
                          init$0[1],
                          init$0[2],
                          init$0[3],
                          init$0[4],
                          init$0[5],
                          init$0[6],
                          [0,ret$0],
                          init$0[8],
                          init$0[9]];
                       return [9,
                               0,
                               _Ri_,
                               [0,[2,size,intTypeAttr],[0,sub_init,0]],
                               typedAttr]}}}}}
           break;
          case 4:var tp$1=_ZE_[1],tp$0=tp$1;continue
          }
        return failwith(_Rc_)}}
    function getContextIfPossible(state,tp)
     {var _ZB_=tp[1];
      if(1 === _ZB_[0])
       {var tp_name=_ZB_[1];
        try
         {var
           context_path=getContext(state,tp_name),
           context=pathFromCurrent(state,context_path),
           _ZC_=[0,[1,context,0]];
          return _ZC_}
        catch(_ZD_){return tp}}
      return tp}
    var
     stmt_x$6=
      makeExpander
       (_Rj_,
        function(state,stmt)
         {if(typeof stmt !== "number" && 5 === stmt[0])
           {var
             attr$1=stmt[5],
             name=stmt[1],
             data=state[1],
             match$3=lookupRaise(0,state,name,attr$1[1]),
             path=match$3[1];
            if(isActive$0(state,name))
             if(!hasInitFunction(data,path))
              {var
                ctx_path$1=getContext(state,name),
                ctx$1=pathFromCurrent(state,ctx_path$1),
                ctx_path=getContext(state,name),
                ctx=pathFromCurrent(state,ctx_path),
                typ$1=[0,[1,ctx,0]],
                attr$0=
                 [0,
                  init$0[1],
                  init$0[2],
                  init$0[3],
                  init$0[4],
                  init$0[5],
                  init$0[6],
                  [0,typ$1],
                  init$0[8],
                  init$0[9]],
                _Zx_=[3,[9,0,getInitFunctioName(ctx),0,attr$0],attr$0],
                init_fn=[5,getInitFunctioName(name),0,_Zx_,[0,typ$1],init$0],
                ctx_path$0=getContext(state,name),
                ctx$0=pathFromCurrent(state,ctx_path$0),
                typ$2=[0,[1,ctx$0,0]],
                name_type=[0,[1,getFunctioTypeName(name),0]],
                type_fn=[10,name_type,typ$2,init$0];
               if(hasInitFunction(data,ctx_path$1))
                {var data$0=markInitFunction(data,path);
                 return [0,
                         set(state,data$0),
                         [0,type_fn,[0,init_fn,[0,stmt,0]]]]}
               var match=lookup(0,state[2],name);
               if(match)
                var
                 match$0=match[1],
                 s=match$0[3],
                 _Zl_=getAllWithSameContext(s),
                 _Zm_=map(function(a){return a[9][1]},_Zl_),
                 _Zn_=concat(map(IdMap[37],_Zm_)),
                 _Zo_=map(function(_ZA_){return _ZA_[2]},_Zn_),
                 _Zp_=map(function(a){return [0,a[1],a[2]]},_Zo_),
                 mem_inst=caml_call1(IdTypeSet[30],_Zp_);
               else
                var mem_inst=IdTypeSet[1];
               var
                _Zy_=IdTypeSet[1],
                _Zz_=
                 function(param,acc)
                  {var
                    tp=param[2],
                    name=param[1],
                    context=getContextIfPossible(state,tp),
                    member=[0,name,context];
                   return caml_call2(IdTypeSet[4],member,acc)},
                member_set=caml_call3(IdTypeSet[15],_Zz_,mem_inst,_Zy_),
                match$1=lookup(0,state[2],name);
               if(match$1)
                {var match$2=match$1[1],s$0=match$2[3],_Zq_=s$0[3][1];
                 if(!_Zq_)throw [0,Invalid_argument,_pZ_];
                 var
                  parent=_Zq_[1],
                  init_fun=getInitFunction(parent[11][1],name)}
               else
                var init_fun=0;
               var
                typ$0=[0,[1,ctx$1,0]],
                ctx_lid=
                 [5,
                  ctx_name,
                  [0,
                   init$0[1],
                   init$0[2],
                   init$0[3],
                   init$0[4],
                   init$0[5],
                   init$0[6],
                   [0,typ$0],
                   init$0[8],
                   init$0[9]]],
                _Zr_=StmtSet[1],
                _Zs_=
                 function(param,acc)
                  {var
                    tp=param[2],
                    name=param[1],
                    typedAttr=
                     [0,
                      init$0[1],
                      init$0[2],
                      init$0[3],
                      init$0[4],
                      init$0[5],
                      init$0[6],
                      [0,tp],
                      init$0[8],
                      init$0[9]],
                    lhs=[1,joinErrors(ctx_name,name),[0,tp],typedAttr],
                    new_stmt=[7,lhs,getInitValue$0(tp),init$0];
                   return caml_call2(StmtSet[4],new_stmt,acc)},
                new_stmts_set=caml_call3(IdTypeSet[15],_Zs_,member_set,_Zr_),
                attr=
                 [0,
                  init$0[1],
                  init$0[2],
                  init$0[3],
                  init$0[4],
                  init$0[5],
                  init$0[6],
                  [0,typ$0],
                  init$0[8],
                  init$0[9]];
               if(init_fun)
                var
                 init_fun_name=init_fun[1],
                 unitAttr=
                  [0,
                   init$0[1],
                   init$0[2],
                   init$0[3],
                   init$0[4],
                   init$0[5],
                   init$0[6],
                   [0,typ],
                   init$0[8],
                   init$0[9]],
                 callExp=[9,0,init_fun_name,[0,ctx_lid,0],unitAttr],
                 init_fun_call=[0,[7,[0,init$0],callExp,init$0],0];
               else
                var init_fun_call=0;
               var
                return_stmt=[3,[5,ctx_name,attr],init$0],
                ctx_decl=[0,[1,ctx_name,[0,typ$0],attr],0,init$0],
                _Zt_=joinErrors(init_fun_call,[0,return_stmt,0]),
                _Zu_=function(a,acc){return [0,a,acc]},
                stmts=caml_call3(StmtSet[15],_Zu_,new_stmts_set,_Zt_),
                init_funct=
                 [5,
                  getInitFunctioName(ctx$1),
                  0,
                  [8,0,[0,ctx_decl,stmts],init$0],
                  [0,typ$0],
                  init$0],
                _Zv_=0,
                _Zw_=
                 function(param,acc)
                  {var tp=param[2],name=param[1];
                   return [0,[0,name,tp,init$0],acc]},
                members=caml_call3(IdTypeSet[15],_Zw_,member_set,_Zv_),
                type_def=[9,[0,[1,ctx$1,0]],members,init$0],
                data$1=markInitFunction(data,ctx_path$1),
                data$2=markInitFunction(data$1,path),
                state$0=set(state,data$2);
               return [0,
                       state$0,
                       [0,
                        type_def,
                        [0,type_fn,[0,init_funct,[0,init_fn,[0,stmt,0]]]]]]}
            return [0,state,[0,stmt,0]]}
          return [0,state,[0,stmt,0]]}),
     mapper$15=
      [0,
       default_mapper[1],
       default_mapper[2],
       default_mapper[3],
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       stmt_x$6],
     exp$8=
      make$1
       (_Rm_,
        function(state,exp)
         {if(typeof exp !== "number" && 3 === exp[0])
           {var
             attr=exp[2],
             v=exp[1],
             data=state[1],
             _Zi_=32767 < v?1:0,
             _Zj_=_Zi_ || (v < -32768?1:0),
             _Zk_=_Zj_?caml_string_equal(data[5][10],_Rk_):_Zj_;
            if(_Zk_)
             {var msg=caml_call1(sprintf(_Rl_),v);raiseError(msg,attr[1])}
            return [0,state,[3,v,attr]]}
          return [0,state,exp]}),
     mapper$16=
      [0,
       default_mapper[1],
       default_mapper[2],
       exp$8,
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       default_mapper[9]],
     run$1=seq(mapper$16,seq(mapper$15,mapper$14)),
     exp$9=
      make$1
       (_Rn_,
        function(state,exp)
         {if(typeof exp !== "number" && 9 === exp[0])
           {var
             attr=exp[4],
             args=exp[3],
             fname=exp[2],
             name=exp[1],
             _Zg_=lookupRaise(0,state,fname,attr[1]),
             t=_Zg_[3],
             match=_Zg_[1],
             path=match[1],
             _Zh_=t[14][1];
            if(_Zh_)var n=_Zh_[1],final_name=[0,n,0];else var final_name=path;
            return [0,state,[9,name,final_name,args,attr]]}
          return [0,state,exp]}),
     stmt$0=
      make$1
       (_Ro_,
        function(state,stmt)
         {if(typeof stmt !== "number" && 5 === stmt[0])
           {var _Zf_=stmt[1];
            if(_Zf_)
             if(!_Zf_[2])
              {var
                attr=stmt[5],
                rettype=stmt[4],
                body=stmt[3],
                args=stmt[2],
                match=currentScope(state),
                path=match[1];
               return [0,state,[5,path,args,body,rettype,attr]]}}
          return [0,state,stmt]}),
     vtype_c$0=
      make$1
       (_Rp_,
        function(state,typ)
         {if(1 === typ[0])
           {var optloc=typ[2],id=typ[1];
            if(optloc)var loc=optloc[1],loc$0=loc;else var loc$0=default$0;
            var match=lookupRaise(3,state,id,loc$0)[1],type_path=match[1];
            return [0,state,[1,type_path,optloc]]}
          return [0,state,typ]}),
     mapper$17=
      [0,
       vtype_c$0,
       default_mapper[2],
       exp$9,
       default_mapper[4],
       default_mapper[5],
       stmt$0,
       default_mapper[7],
       default_mapper[8],
       default_mapper[9]];
    function unitAttr(attr)
     {return [0,
              attr[1],
              attr[2],
              attr[3],
              attr[4],
              attr[5],
              attr[6],
              [0,typ],
              attr[8],
              attr[9]]}
    var
     stmt$1=
      make$1
       (_Rr_,
        function(state,stmt)
         {var data=state[1],args=data[5];
          if(args[5])
           {if(typeof stmt !== "number" && 5 === stmt[0])
             {var _Ze_=stmt[4];
              if(_Ze_)
               {var
                 attr=stmt[5],
                 rettype=_Ze_[1],
                 body=stmt[3],
                 args$0=stmt[2],
                 name=stmt[1];
                if(!isSimpleType(rettype))
                 {var
                   output=[1,_Rq_,rettype,1,init$0],
                   stmt$0=
                    [5,name,joinErrors(args$0,[0,output,0]),body,[0,typ],attr];
                  return [0,state,stmt$0]}}}
            return [0,state,stmt]}
          return [0,state,stmt]}),
     stmt_x$7=
      makeExpander
       (_Rv_,
        function(state,stmt)
         {var data=state[1];
          if(data[5][5])
           {if(typeof stmt !== "number")
             switch(stmt[0])
              {case 0:
                var _Y2_=stmt[1];
                if(1 === _Y2_[0])
                 {var _Y5_=_Y2_[2];
                  if(_Y5_)
                   {var _Y6_=stmt[2];
                    if(_Y6_)
                     {var _Y7_=_Y6_[1];
                      if(typeof _Y7_ === "number")
                       var switch$1=1;
                      else
                       if(9 === _Y7_[0])
                        {var
                          battr=stmt[3],
                          attr=_Y7_[4],
                          args=_Y7_[3],
                          name=_Y7_[2],
                          inst=_Y7_[1],
                          lattr=_Y2_[3],
                          typ=_Y5_[1],
                          lhs=_Y2_[1];
                         if(!isSimpleType(typ))
                          {var arg=[5,lhs,lattr],fixed_attr=unitAttr(attr);
                           return [0,
                                   state,
                                   [0,
                                    [0,[1,lhs,[0,typ],lattr],0,battr],
                                    [0,
                                     [7,
                                      [0,fixed_attr],
                                      [9,inst,name,joinErrors(args,[0,arg,0]),fixed_attr],
                                      battr],
                                     0]]]}
                         var switch$0=0,switch$1=0}
                       else
                        var switch$1=1;
                      if(switch$1)var switch$0=1}
                    else
                     var switch$0=1}
                  else
                   var switch$0=0}
                else
                 var switch$0=0;
                if(!switch$0)
                 {var _Y3_=stmt[2];
                  if(_Y3_)
                   {var _Y4_=_Y3_[1];
                    if(typeof _Y4_ !== "number" && 9 === _Y4_[0])
                     return [0,state,[0,stmt,0]]}}
                break;
               case 3:
                var attr$0=stmt[2],e=stmt[1],eattr=fromExp$0(e);
                if(isSimpleOpType(eattr[7]))return [0,state,[0,stmt,0]];
                var
                 stmt$0=[7,[1,_Rs_,eattr[7],eattr],e,attr$0],
                 _Y8_=[0,stmt$0,[0,[3,[0,unitAttr(eattr)],attr$0],0]];
                return [0,reapply(state),_Y8_];
               case 7:
                var _Y9_=stmt[1];
                switch(_Y9_[0])
                 {case 0:
                   var _Y__=stmt[2],_Y$_=_Y9_[1];
                   if(typeof _Y__ !== "number" && 9 === _Y__[0])
                    {var
                      battr$1=stmt[3],
                      attr$1=_Y__[4],
                      args$0=_Y__[3],
                      name$0=_Y__[2],
                      inst$0=_Y__[1];
                     if(!isSimpleOpType(_Y$_[7]))
                      {var
                        match$0=tick(state),
                        state$1=match$0[2],
                        i$0=match$0[1],
                        tmp_name$0=_a_(_Ru_,caml_new_string("" + i$0)),
                        arg$0=[5,[0,tmp_name$0,0],_Y$_],
                        fixed_attr$0=unitAttr(attr$1),
                        _Zb_=
                         [0,
                          [7,
                           [0,fixed_attr$0],
                           [9,
                            inst$0,
                            name$0,
                            joinErrors(args$0,[0,arg$0,0]),
                            fixed_attr$0],
                           battr$1],
                          0];
                       return [0,
                               state$1,
                               [0,[0,[1,[0,tmp_name$0,0],_Y$_[7],_Y$_],0,battr$1],_Zb_]]}}
                   var battr$0=stmt[3];
                   if(!isSimpleOpType(_Y$_[7]))
                    {var
                      match=tick(state),
                      state$0=match[2],
                      i=match[1],
                      tmp_name=_a_(_Rt_,caml_new_string("" + i));
                     return [0,
                             state$0,
                             [0,
                              [0,[1,[0,tmp_name,0],_Y$_[7],_Y$_],0,battr$0],
                              [0,[7,[1,[0,tmp_name,0],_Y$_[7],_Y$_],_Y__,battr$0],0]]]}
                   var switch$2=0;
                   break;
                  case 1:
                   var _Zc_=_Y9_[2];
                   if(_Zc_)
                    {var _Zd_=stmt[2];
                     if(typeof _Zd_ === "number")
                      var switch$3=1;
                     else
                      if(9 === _Zd_[0])
                       {var
                         battr$2=stmt[3],
                         attr$2=_Zd_[4],
                         args$1=_Zd_[3],
                         name$1=_Zd_[2],
                         inst$1=_Zd_[1],
                         lattr$0=_Y9_[3],
                         typ$0=_Zc_[1],
                         lhs$0=_Y9_[1];
                        if(!isSimpleType(typ$0))
                         {var arg$1=[5,lhs$0,lattr$0],fixed_attr$1=unitAttr(attr$2);
                          return [0,
                                  state,
                                  [0,
                                   [7,
                                    [0,fixed_attr$1],
                                    [9,
                                     inst$1,
                                     name$1,
                                     joinErrors(args$1,[0,arg$1,0]),
                                     fixed_attr$1],
                                    battr$2],
                                   0]]}
                        var switch$2=0,switch$3=0}
                      else
                       var switch$3=1;
                     if(switch$3)var switch$2=1}
                   else
                    var switch$2=0;
                   break;
                  default:var switch$2=0}
                if(!switch$2)
                 {var _Za_=stmt[2];
                  if(typeof _Za_ !== "number" && 9 === _Za_[0])
                   return [0,state,[0,stmt,0]]}
                break
               }
            return [0,state,[0,stmt,0]]}
          return [0,state,[0,stmt,0]]}),
     mapper$18=
      [0,
       default_mapper[1],
       default_mapper[2],
       default_mapper[3],
       default_mapper[4],
       default_mapper[5],
       stmt$1,
       default_mapper[7],
       default_mapper[8],
       stmt_x$7],
     stmt$2=
      make$1
       (_Rx_,
        function(state,stmt)
         {if(typeof stmt !== "number")
           switch(stmt[0])
            {case 0:
              var _YW_=stmt[1];
              if(0 === _YW_[0])
               {var _YX_=stmt[2];
                if(_YX_)
                 {var attr=stmt[3],rhs=_YX_[1],wattr=_YW_[1];
                  return [0,state,[7,[0,wattr],rhs,attr]]}}
              break;
             case 4:
              var _YY_=stmt[2],_YZ_=stmt[1],_Y0_=stmt[3];
              if(_Y0_)
               {var _Y1_=_Y0_[1];
                if(typeof _Y1_ === "number")
                 var switch$0=0;
                else
                 if(8 === _Y1_[0])
                  {if(!_Y1_[2])
                    {var attr$1=stmt[4];return [0,state,[4,_YZ_,_YY_,0,attr$1]]}
                   var switch$0=1}
                 else
                  var switch$0=0;
                if(typeof _YY_ === "number")
                 var switch$1=0;
                else
                 if(8 === _YY_[0])
                  {if(!_YY_[2])
                    {var
                      attr$0=stmt[4],
                      match=stmt[3],
                      else$0=match[1],
                      cod_attr=fromExp$0(_YZ_);
                     return [0,
                             state,
                             [4,[9,0,_Rw_,[0,_YZ_,0],cod_attr],else$0,0,attr$0]]}
                   var switch$1=1}
                 else
                  var switch$1=0}
              break
             }
          return [0,state,stmt]}),
     stmt_x$8=
      makeExpander
       (_Ry_,
        function(state,stmt)
         {if(typeof stmt !== "number")
           switch(stmt[0])
            {case 0:if(0 === stmt[1][0])if(!stmt[2])return [0,state,0];break;
             case 7:
              var _YU_=stmt[1];
              if(1 === _YU_[0])
               {var _YV_=stmt[2];
                if(typeof _YV_ === "number")
                 var switch$0=0;
                else
                 if(5 === _YV_[0])
                  {var rhs=_YV_[1],lhs=_YU_[1];
                   if(0 === caml_compare(lhs,rhs))return [0,reapply(state),0];
                   var switch$0=1}
                 else
                  var switch$0=0}
              break
             }
          return [0,state,[0,stmt,0]]}),
     mapper$19=
      [0,
       default_mapper[1],
       default_mapper[2],
       default_mapper[3],
       default_mapper[4],
       default_mapper[5],
       stmt$2,
       default_mapper[7],
       default_mapper[8],
       stmt_x$8],
     run$2=seq(mapper$19,seq(mapper$18,mapper$17)),
     vtype_c$1=
      make$1
       (_RA_,
        function(state,t)
         {if(2 === t[0])
           {var _YT_=t[1];
            if(_YT_)
             if(!caml_string_notequal(_YT_[1],_Rz_))
              if(!_YT_[2])
               {var
                 data$0=state[1],
                 tup=[0,t],
                 _YP_=data$0[6],
                 _YQ_=data$0[5],
                 _YR_=data$0[4],
                 _YS_=caml_call2(TypeSet[4],tup,data$0[3]),
                 data=[0,data$0[1],data$0[2],_YS_,_YR_,_YQ_,_YP_];
                return [0,set(state,data),t]}}
          return [0,state,t]}),
     mapper$20=
      [0,
       vtype_c$1,
       default_mapper[2],
       default_mapper[3],
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       default_mapper[9]];
    function reportUnsupportedArray(typ,name,attr)
     {var
       _YN_=idStr(name),
       _YO_=typeStr(typ),
       msg=caml_call2(sprintf(_RB_),_YO_,_YN_);
      return raiseError(msg,attr[1])}
    function isComplexArray(typ)
     {if(isArray(typ))
       {var match=arrayTypeAndSize(typ),t=match[1];return 1 - isSimpleType(t)}
      return 0}
    var
     lhs_exp$2=
      make$1
       (_RC_,
        function(state,exp)
         {if(1 === exp[0])
           {var _YM_=exp[2];
            if(_YM_)
             {var attr=exp[3],t=_YM_[1],id=exp[1];
              if(isComplexArray(t))return reportUnsupportedArray(t,id,attr)}}
          return [0,state,exp]}),
     exp$10=
      make$1
       (_RF_,
        function(state,exp)
         {var attr=fromExp$0(exp),_YK_=attr[7];
          if(_YK_)
           {var t=_YK_[1];
            if(isUnbound(t))
             {var msg=sprintf(_RD_);return raiseError(msg,attr[1])}
            if(isComplexArray(t))
             {var _YL_=typeStr(t),msg$0=caml_call1(sprintf(_RE_),_YL_);
              return raiseError(msg$0,attr[1])}}
          return [0,state,exp]}),
     typed_id$0=
      make$1
       (_RG_,
        function(state,t)
         {if(1 === t[0])
           {var attr=t[4],typ=t[2],id=t[1];
            if(isComplexArray(typ))return reportUnsupportedArray(typ,id,attr)}
          return [0,state,t]}),
     mapper$21=
      [0,
       default_mapper[1],
       typed_id$0,
       exp$10,
       lhs_exp$2,
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       default_mapper[9]],
     run$3=seq(mapper$21,mapper$20);
    function addEdge(g,from_v,to_v)
     {var no_exn=1;
      try
       {var deps$0=find$0(g[1],from_v)}
      catch(_YJ_)
       {no_exn = 0;
        _YJ_ = caml_wrap_exception(_YJ_);
        if(_YJ_ !== Not_found)throw _YJ_;
        add(g[1],from_v,[0,to_v,0])}
      if(no_exn)replace(g[1],from_v,[0,to_v,deps$0]);
      var no_exn$0=1;
      try
       {var deps=find$0(g[2],to_v)}
      catch(_YI_)
       {no_exn$0 = 0;
        _YI_ = caml_wrap_exception(_YI_);
        if(_YI_ !== Not_found)throw _YI_;
        add(g[2],to_v,[0,from_v,0])}
      if(no_exn$0)replace(g[2],to_v,[0,from_v,deps]);
      replace(g[3],from_v,0);
      replace(g[3],to_v,0);
      return 0}
    function getDependencies(g,v)
     {try
       {var deps=find$0(g[1],v);return deps}
      catch(_YH_)
       {_YH_ = caml_wrap_exception(_YH_);
        if(_YH_ === Not_found)return 0;
        throw _YH_}}
    function getRevDependencies(g,v)
     {try
       {var deps=find$0(g[2],v);return deps}
      catch(_YG_)
       {_YG_ = caml_wrap_exception(_YG_);
        if(_YG_ === Not_found)return 0;
        throw _YG_}}
    function empty$2(param){return [0,0]}
    function push(s,e){s[1] = [0,e,s[1]];return 0}
    function toList(s){return s[1]}
    function empty$3(param){return create$0(0,8)}
    function add$0(t,v){return replace(t,v,0)}
    function contains$0(t,v){return mem(t,v)}
    function pass1(g,stack,visited,v)
     {var _YE_=1 - contains$0(visited,v);
      if(_YE_)
       {add$0(visited,v);
        var children=getDependencies(g,v);
        iter(function(_YF_){return pass1(g,stack,visited,_YF_)},children);
        return push(stack,v)}
      return _YE_}
    function pass2_part(g,visited,comp,v)
     {var _YC_=1 - contains$0(visited,v);
      if(_YC_)
       {var deps=getRevDependencies(g,v);
        add$0(visited,v);
        push(comp,v);
        return iter
                (function(_YD_){return pass2_part(g,visited,comp,_YD_)},deps)}
      return _YC_}
    function components(graph)
     {var _Yv_=create$0(0,8),_Yw_=create$0(0,8),g=[0,create$0(0,8),_Yw_,_Yv_];
      iter
       (function(param)
         {var deps=param[2],v=param[1];
          replace(g[3],v,0);
          return iter(function(_YB_){return addEdge(g,v,_YB_)},deps)},
        graph);
      var
       stack=empty$2(0),
       visited=empty$3(0),
       _Yx_=0,
       _Yy_=g[3],
       _Yz_=fold(function(v,param,acc){return [0,v,acc]},_Yy_,_Yx_);
      iter(function(v){return pass1(g,stack,visited,v)},_Yz_);
      var comps=empty$2(0),visited$0=empty$3(0);
      for(;;)
       {if(1 - (0 === stack[1]?1:0))
         {var _YA_=stack[1];
          if(_YA_)
           {var t=_YA_[2],h=_YA_[1];stack[1] = t;var v=h}
          else
           var v=failwith(_RH_);
          if(contains$0(visited$0,v))continue;
          var comp=empty$2(0);
          push(comps,comp);
          pass2_part(g,visited$0,comp,v);
          continue}
        return map(toList,comps[1])}}
    function makeTypeDeclaration(t)
     {var _Yt_=t[1];
      if(2 === _Yt_[0])
       {var _Yu_=_Yt_[1];
        if(_Yu_)
         if(!caml_string_notequal(_Yu_[1],_RJ_))
          if(!_Yu_[2])
           {var
             types=_Yt_[2],
             elems=
              mapi
               (function(i,a)
                 {return [0,[0,_a_(_RK_,caml_new_string("" + i)),0],a,init$0]},
                types);
            return [9,t,elems,init$0]}}
      return failwith(_RI_)}
    function applyPass(name,apply,pass,pass_name,param$1)
     {var
       stmts$1=param$1[2],
       state$1=param$1[1],
       state$2=enter$0(1,state$1,name,init$0),
       param$2=[0,state$2,stmts$1],
       param=param$2;
      for(;;)
       {var stmts=param[2],state=param[1];
        if(apply)
         {var
           match=map_stmt_list(pass,state,stmts),
           stmts$0=match[2],
           state$0=match[1];
          if(state$0[1][4])
           {var
             data=state$0[1],
             param$0=
              [0,
               set(state$0,[0,data[1],data[2],data[3],0,data[5],data[6]]),
               stmts$0],
             param=param$0;
            continue}
          var match$0=[0,state$0,stmts$0]}
        else
         var match$0=[0,state,stmts];
        var stmts$2=match$0[2],state$3=match$0[1],state$4=exit$0(state$3);
        return [0,state$4,stmts$2]}}
    function applyTransformations(args,opt,results)
     {if(opt)var sth=opt[1],options=sth;else var options=default_options;
      var env=top(0);
      builtinFunctions(env);
      var
       env$0=empty$1([0,PathSet[1],PathSet[1],TypeSet[1],0,args,env]),
       _Yo_=[0,env$0,0],
       match=
        fold_left
         (function(param$0,stmts$5)
           {var
             acc=param$0[2],
             state$3=param$0[1],
             name=[0,moduleName(stmts$5[2]),0],
             stmts$4=stmts$5[1],
             state=enter$0(1,state$3,name,init$0),
             match=inferStmtList(state,0,stmts$4),
             state$0=match[2],
             stmts$2=match[1],
             state$1=exit$0(state$0),
             param=applyPass(name,options[2],run,_RL_,[0,state$1,stmts$2]),
             stmts$3=param[2],
             state$2=param[1],
             data=state$2[1];
            addModule(data[6],name);
            var env=enterModule(data[6],name),stmts=stmts$3;
            for(;;)
             {if(stmts)
               {var _Yp_=stmts[1];
                if(typeof _Yp_ !== "number" && 5 === _Yp_[0])
                 {var stmts$1=stmts[2];
                  evalStmt(env,_Yp_);
                  var stmts=stmts$1;
                  continue}
                var stmts$0=stmts[2],stmts=stmts$0;
                continue}
              var
               _Yq_=applyPass(name,options[3],run$0,_RM_,[0,state$2,stmts$3]),
               _Yr_=applyPass(name,options[4],run$1,_RN_,_Yq_),
               _Ys_=applyPass(name,options[5],run$2,_RO_,_Yr_),
               match$0=applyPass(name,options[6],run$3,_RP_,_Ys_),
               stmts$6=match$0[2],
               env$0=match$0[1],
               result=[0,stmts$6,stmts$5[2]];
              return [0,env$0,[0,result,acc]]}},
          _Yo_,
          results),
       stmts_list=match[2],
       env$1=match[1],
       data=env$1[1],
       remaining$1=map(unlink,caml_call1(TypeSet[21],data[3])),
       _Yn_=TypeSet[1],
       dependencies$0=create$0(0,8),
       visited=_Yn_,
       remaining=remaining$1;
      for(;;)
       {if(remaining)
         {var t=remaining[2],h=remaining[1];
          if(caml_call2(TypeSet[3],h,visited)){var remaining=t;continue}
          var _Yk_=unlink(h)[1];
          if(2 === _Yk_[0])var elems=_Yk_[2],_Yl_=elems;else var _Yl_=0;
          var
           sub=caml_call1(find_all(isTuple),_Yl_),
           visited$0=caml_call2(TypeSet[4],h,visited);
          add(dependencies$0,h,sub);
          var
           remaining$0=joinErrors(sub,t),
           visited=visited$0,
           remaining=remaining$0;
          continue}
        var
         _Ym_=0,
         dependencies=
          fold(function(a,b,acc){return [0,[0,a,b],acc]},dependencies$0,_Ym_),
         components$0=components(dependencies),
         sorted=map(hd,components$0),
         decl=map(makeTypeDeclaration,sorted),
         tuples=[0,decl,_RQ_];
        return [0,tuples,rev(stmts_list)]}}
    function passData(inputs)
     {if(inputs)
       {var _Yj_=inputs[1];
        if(typeof _Yj_ === "number")
         {var
           t=inputs[2],
           match=passData(t),
           outputs=match[3],
           inputs$0=match[2];
          return [0,1,inputs$0,outputs]}
        if(-783600662 <= _Yj_[1])
         {var
           t$0=inputs[2],
           typ=_Yj_[2],
           match$0=passData(t$0),
           outputs$0=match$0[3],
           inputs$1=match$0[2],
           pass_ctx=match$0[1];
          return [0,pass_ctx,[0,typ,inputs$1],outputs$0]}
        var
         t$1=inputs[2],
         elems=_Yj_[2],
         match$1=passData(t$1),
         inputs$2=match$1[2],
         pass_ctx$0=match$1[1];
        return [0,pass_ctx$0,inputs$2,elems]}
      return _RW_}
    function getOutputs(loc,typ)
     {var _Ye_=typ[1];
      switch(_Ye_[0])
       {case 1:
         var _Yf_=_Ye_[1];
         if(_Yf_)
          {var _Yg_=_Yf_[1];
           if(caml_string_notequal(_Yg_,_R1_))
            {if(!caml_string_notequal(_Yg_,_R2_))if(!_Yf_[2])return _R3_}
           else
            if(!_Yf_[2])return _R4_}
         break;
        case 2:
         var _Yh_=_Ye_[1];
         if(_Yh_)
          if(!caml_string_notequal(_Yh_[1],_R5_))
           if(!_Yh_[2])
            {var elems=_Ye_[2];
             return concat
                     (map(function(_Yi_){return getOutputs(loc,_Yi_)},elems))}
         break
        }
      return raiseError(msg$6,loc)}
    function getType$0(arg)
     {if(0 === arg[0])return failwith(_R8_);
      var _Yd_=arg[2];
      switch(arg[3])
       {case 0:
         var attr=arg[4],_Ya_=_Yd_[1];
         if(1 === _Ya_[0])
          {var _Yb_=_Ya_[1];
           if(_Yb_)
            {var _Yc_=_Yb_[1];
             if(caml_string_notequal(_Yc_,_RX_))
              if(caml_string_notequal(_Yc_,_RY_))
               var switch$0=0;
              else
               if(_Yb_[2])var switch$0=0;else var match=_RZ_,switch$0=1;
             else
              if(_Yb_[2])var switch$0=0;else var match=_R0_,switch$0=1}
           else
            var switch$0=0}
         else
          var switch$0=0;
         if(!switch$0)var match=0;
         if(match){var typ_name=match[1];return [0,-783600662,typ_name]}
         return raiseError(msg$7,attr[1]);
        case 1:
         var attr$0=arg[4];return [0,-1055554783,getOutputs(attr$0[1],_Yd_)];
        default:return -423051825}}
    var
     stmt$3=
      make$1
       (_Sc_,
        function(state,stmt)
         {var conf=state[1];
          if(typeof stmt !== "number" && 5 === stmt[0])
           {var _XX_=stmt[1];
            if(_XX_)
             {var _XY_=_XX_[2];
              if(_XY_)
               {var _XZ_=_XY_[1],_X0_=_XX_[1];
                if(caml_string_notequal(_XZ_,_R9_))
                 {if(caml_string_notequal(_XZ_,_R__))
                   {if(caml_string_notequal(_XZ_,_R$_))
                     {if(caml_string_notequal(_XZ_,_Sa_))
                       {if(!caml_string_notequal(_XZ_,_Sb_))
                         if(!_XY_[2])
                          {var _X1_=stmt[4];
                           if(_X1_)
                            {var attr=stmt[5],rettype=_X1_[1],args=stmt[2];
                             if(caml_string_equal(conf[1],_X0_))
                              {var
                                match=passData(map(getType$0,args)),
                                process_outputs=match[3],
                                process_inputs=match[2],
                                pass_data=match[1],
                                _XQ_=rettype[1],
                                _X2_=attr[1];
                               if(1 === _XQ_[0])
                                {var _XR_=_XQ_[1];
                                 if(_XR_)
                                  if(caml_string_notequal(_XR_[1],_R7_))
                                   var switch$0=0;
                                  else
                                   if(_XR_[2])
                                    var switch$0=0;
                                   else
                                    var process_outputs$0=process_outputs,switch$0=1;
                                 else
                                  var switch$0=0}
                               else
                                var switch$0=0;
                               if(!switch$0)
                                var
                                 process_outputs$0=
                                  process_outputs?failwith(_R6_):getOutputs(_X2_,rettype);
                               var
                                _X3_=conf[8],
                                pass_data$0=_X3_ || pass_data,
                                state$0=
                                 set
                                  (state,
                                   [0,
                                    conf[1],
                                    process_inputs,
                                    process_outputs$0,
                                    conf[4],
                                    conf[5],
                                    conf[6],
                                    conf[7],
                                    pass_data$0]);
                               return [0,state$0,stmt]}}}}
                      else
                       if(!_XY_[2])
                        {var attr$0=stmt[5],args$0=stmt[2];
                         if(caml_string_equal(conf[1],_X0_))
                          {var
                            match$0=passData(map(getType$0,args$0)),
                            noteon_inputs=match$0[2],
                            pass_data$1=match$0[1],
                            _X4_=attr$0[1];
                           if(noteon_inputs)
                            {var _XS_=noteon_inputs[2];
                             if(_XS_)
                              var _XT_=_XS_[2],switch$1=_XT_?_XT_[2]?0:1:0;
                             else
                              var switch$1=0}
                           else
                            var switch$1=0;
                           if(!switch$1)raiseError(msg$8,_X4_);
                           var
                            _X5_=conf[8],
                            pass_data$2=_X5_ || pass_data$1,
                            state$1=
                             set
                              (state,
                               [0,
                                conf[1],
                                conf[2],
                                conf[3],
                                noteon_inputs,
                                conf[5],
                                conf[6],
                                conf[7],
                                pass_data$2]);
                           return [0,state$1,stmt]}}}
                    else
                     if(!_XY_[2])
                      {var attr$1=stmt[5],args$1=stmt[2];
                       if(caml_string_equal(conf[1],_X0_))
                        {var
                          match$1=passData(map(getType$0,args$1)),
                          noteoff_inputs=match$1[2],
                          pass_data$3=match$1[1],
                          _X6_=attr$1[1];
                         if(noteoff_inputs)
                          var _XU_=noteoff_inputs[2],switch$2=_XU_?_XU_[2]?0:1:0;
                         else
                          var switch$2=0;
                         if(!switch$2)raiseError(msg$9,_X6_);
                         var
                          _X7_=conf[8],
                          pass_data$4=_X7_ || pass_data$3,
                          state$2=
                           set
                            (state,
                             [0,
                              conf[1],
                              conf[2],
                              conf[3],
                              conf[4],
                              noteoff_inputs,
                              conf[6],
                              conf[7],
                              pass_data$4]);
                         return [0,state$2,stmt]}}}
                  else
                   if(!_XY_[2])
                    {var attr$2=stmt[5],args$2=stmt[2];
                     if(caml_string_equal(conf[1],_X0_))
                      {var
                        match$2=passData(map(getType$0,args$2)),
                        default_inputs=match$2[2],
                        pass_data$5=match$2[1],
                        _X8_=attr$2[1];
                       if(default_inputs)raiseError(msg$11,_X8_);
                       var
                        _X9_=conf[8],
                        pass_data$6=_X9_ || pass_data$5,
                        state$3=
                         set
                          (state,
                           [0,
                            conf[1],
                            conf[2],
                            conf[3],
                            conf[4],
                            conf[5],
                            conf[6],
                            default_inputs,
                            pass_data$6]);
                       return [0,state$3,stmt]}}}
                else
                 if(!_XY_[2])
                  {var attr$3=stmt[5],args$3=stmt[2];
                   if(caml_string_equal(conf[1],_X0_))
                    {var
                      match$3=passData(map(getType$0,args$3)),
                      controlchange_inputs=match$3[2],
                      pass_data$7=match$3[1],
                      _X__=attr$3[1];
                     if(controlchange_inputs)
                      {var _XV_=controlchange_inputs[2];
                       if(_XV_)
                        var _XW_=_XV_[2],switch$3=_XW_?_XW_[2]?0:1:0;
                       else
                        var switch$3=0}
                     else
                      var switch$3=0;
                     if(!switch$3)raiseError(msg$10,_X__);
                     var
                      _X$_=conf[8],
                      pass_data$8=_X$_ || pass_data$7,
                      state$4=
                       set
                        (state,
                         [0,
                          conf[1],
                          conf[2],
                          conf[3],
                          conf[4],
                          conf[5],
                          controlchange_inputs,
                          conf[7],
                          pass_data$8]);
                     return [0,state$4,stmt]}}}}}
          return [0,state,stmt]}),
     mapper$22=
      [0,
       default_mapper[1],
       default_mapper[2],
       default_mapper[3],
       default_mapper[4],
       default_mapper[5],
       stmt$3,
       default_mapper[7],
       default_mapper[8],
       default_mapper[9]];
    function createParameters(results,args)
     {var parser_results=results;
      for(;;)
       {if(parser_results)
         {var _XF_=parser_results[2],_XG_=parser_results[1];
          if(_XF_){var parser_results=_XF_;continue}
          var
           module_name=
            caml_string_equal(_XG_[2],_Sd_)?_Se_:moduleName(_XG_[2])}
        else
         var module_name=raiseErrorMsg(_Sf_);
        var l$1=map(function(a){return a[1]},results),len=length(l$1);
        if(len < 1)
         var _XP_=l$1;
        else
         {var n$1=len - 1 | 0,n=n$1,l=l$1;
          for(;;)
           {if(l)
             {if(0 !== n){var l$0=l[2],n$0=n - 1 | 0,n=n$0,l=l$0;continue}
              var _XP_=l}
            else
             var _XP_=0;
            break}}
        var
         stmts=concat(_XP_),
         env=empty$1([0,module_name,0,0,0,0,0,0,0]),
         match=map_stmt_list(mapper$22,env,stmts),
         env$0=match[1],
         _XE_=env$0[1],
         _XH_=args[5],
         _XI_=_XH_?caml_string_notequal(args[11],_Sg_):_XH_;
        if(_XI_)var _XJ_=_XI_;else var _XO_=args[8],_XJ_=_XO_ || args[7];
        if(_XJ_)
         {var _XK_=0 === _XE_[3]?1:0;
          if(_XK_)
           var _XL_=_XK_;
          else
           {var _XM_=0 === _XE_[4]?1:0;
            if(_XM_)
             var _XL_=_XM_;
            else
             var _XN_=0 === _XE_[5]?1:0,_XL_=_XN_ || (0 === _XE_[6]?1:0)}
          if(_XL_)
           {var
             msg=
              print
               (function(buffer)
                 {newline(buffer);
                  append(buffer,_Sh_);
                  newline(buffer);
                  newline(buffer);
                  append(buffer,_Si_);
                  newline(buffer);
                  append(buffer,_Sj_);
                  newline(buffer);
                  append(buffer,_Sk_);
                  newline(buffer);
                  append(buffer,_Sl_);
                  newline(buffer);
                  append(buffer,_Sm_);
                  return 0});
            raiseErrorMsg(msg);
            var switch$0=1}
          else
           var switch$0=0}
        else
         var switch$0=0;
        var
         output=caml_string_equal(args[9],_Sn_)?_So_:basename$2(args[9]),
         repl=caml_call2(SimpleMap[23],args[10],global_replacement_map[1]);
        return [0,args[10],args[11],0,output,repl,module_name,_XE_]}}
    function updateLocation(lexbuf,line,chars)
     {var pos=lexbuf[12];
      lexbuf[12] = [0,pos[1],pos[2] + line | 0,pos[4] - chars | 0,pos[4]];
      return 0}
    var keyword_table=create$0(0,50);
    iter
     (function(param){var b=param[2],a=param[1];return add(keyword_table,a,b)},
      keywords$3);
    function makeToken(source,kind,lexbuf)
     {var _XD_=getLocation(source,lexbuf);return [0,kind,lexeme(lexbuf),_XD_]}
    function kindStr$0(kind)
     {switch(kind)
       {case 0:return _Sr_;
        case 1:return _Ss_;
        case 2:return _St_;
        case 3:return _Su_;
        case 4:return _Sv_;
        case 5:return _Sw_;
        case 6:return _Sx_;
        case 7:return _Sy_;
        case 8:return _Sz_;
        case 9:return _SA_;
        case 10:return _SB_;
        case 11:return _SC_;
        case 12:return _SD_;
        case 13:return _SE_;
        case 14:return _SF_;
        case 15:return _SG_;
        case 16:return _SH_;
        case 17:return _SI_;
        case 18:return _SJ_;
        case 19:return _SK_;
        case 20:return _SL_;
        case 21:return _SM_;
        case 22:return _SN_;
        case 23:return _SO_;
        case 24:return _SP_;
        case 25:return _SQ_;
        case 26:return _SR_;
        case 27:return _SS_;
        case 28:return _ST_;
        case 29:return _SU_;
        case 30:return _SV_;
        case 31:return _SW_;
        case 32:return _SX_;
        case 33:return _SY_;
        case 34:return _SZ_;
        case 35:return _S0_;
        case 36:return _S1_;
        case 37:return _S2_;
        default:return _S3_}}
    function tokenStr(l)
     {var _XC_=l[1];
      if(24 === _XC_)return _a_(_S5_,_a_(l[2],_S4_));
      if(!(4 <= _XC_))
       switch(_XC_)
        {case 1:return _a_(_S7_,_a_(l[2],_S6_));
         case 2:return _a_(_S9_,_a_(l[2],_S8_));
         case 3:return _a_(_S$_,_a_(l[2],_S__))
         }
      return kindStr$0(_XC_)}
    function next$0(counter,source,lexbuf)
     {a:
      for(;;)
       {var ocaml_lex_state$0=0;
        for(;;)
         {var ocaml_lex_state$1=engine(tbl,ocaml_lex_state$0,lexbuf);
          if(39 < ocaml_lex_state$1 >>> 0)
           {caml_call1(lexbuf[1],lexbuf);
            var ocaml_lex_state$0=ocaml_lex_state$1;
            continue}
          switch(ocaml_lex_state$1)
           {case 0:updateLocation(lexbuf,1,0);continue a;
            case 1:lexeme(lexbuf);continue a;
            case 2:return makeToken(source,26,lexbuf);
            case 3:return makeToken(source,25,lexbuf);
            case 4:return makeToken(source,34,lexbuf);
            case 5:return makeToken(source,16,lexbuf);
            case 6:return makeToken(source,17,lexbuf);
            case 7:return makeToken(source,12,lexbuf);
            case 8:return makeToken(source,14,lexbuf);
            case 9:return makeToken(source,13,lexbuf);
            case 10:return makeToken(source,15,lexbuf);
            case 11:return makeToken(source,18,lexbuf);
            case 12:return makeToken(source,19,lexbuf);
            case 13:return makeToken(source,29,lexbuf);
            case 14:return makeToken(source,30,lexbuf);
            case 15:return makeToken(source,20,lexbuf);
            case 16:return makeToken(source,21,lexbuf);
            case 17:return makeToken(source,22,lexbuf);
            case 18:return makeToken(source,23,lexbuf);
            case 19:return makeToken(source,36,lexbuf);
            case 20:return makeToken(source,37,lexbuf);
            case 21:return makeToken(source,24,lexbuf);
            case 22:return makeToken(source,24,lexbuf);
            case 23:return makeToken(source,24,lexbuf);
            case 24:return makeToken(source,24,lexbuf);
            case 25:return makeToken(source,24,lexbuf);
            case 26:return makeToken(source,24,lexbuf);
            case 27:return makeToken(source,24,lexbuf);
            case 28:return makeToken(source,24,lexbuf);
            case 29:return makeToken(source,24,lexbuf);
            case 30:return makeToken(source,24,lexbuf);
            case 31:return makeToken(source,24,lexbuf);
            case 32:return makeToken(source,24,lexbuf);
            case 33:return makeToken(source,1,lexbuf);
            case 34:return makeToken(source,2,lexbuf);
            case 35:
             var
              s=lexeme(lexbuf),
              kind=mem(keyword_table,s)?find$0(keyword_table,s):3;
             return [0,kind,s,getLocation(source,lexbuf)];
            case 36:
             var start_loc=getLocation(source,lexbuf),buffer=create(0);
             c:
             for(;;)
              {lexbuf[10] = caml_make_vect(2,-1);
               var ocaml_lex_state$6=62;
               for(;;)
                {var
                  ocaml_lex_state=
                   caml_new_lex_engine(tbl,ocaml_lex_state$6,lexbuf);
                 if(0 <= ocaml_lex_state)
                  {lexbuf[11] = lexbuf[12];
                   var _XA_=lexbuf[12];
                   lexbuf[12]
                   =
                   [0,_XA_[1],_XA_[2],_XA_[3],lexbuf[4] + lexbuf[6] | 0]}
                 if(4 < ocaml_lex_state >>> 0)
                  {caml_call1(lexbuf[1],lexbuf);
                   var ocaml_lex_state$6=ocaml_lex_state;
                   continue}
                 switch(ocaml_lex_state)
                  {case 0:break;
                   case 1:
                    var
                     _XB_=lexbuf[6],
                     i1=caml_check_bound(lexbuf[10],0)[1],
                     len=_XB_ - i1 | 0,
                     space=sub_string(lexbuf[2],i1,len);
                    updateLocation(lexbuf,1,caml_ml_string_length(space));
                    var s$0=lexeme(lexbuf);
                    add_string(buffer,s$0);
                    continue c;
                   case 2:
                    updateLocation(lexbuf,1,0);
                    var s$1=lexeme(lexbuf);
                    add_string(buffer,s$1);
                    continue c;
                   case 3:raiseError(_Ta_,getLocation(source,lexbuf));break;
                   default:
                    var s$2=lexeme(lexbuf);add_string(buffer,s$2);continue c}
                 var
                  end_loc=getLocation(source,lexbuf),
                  str=contents(buffer),
                  loc=merge(start_loc,end_loc);
                 return [0,4,str,loc]}}
            case 37:
             c:
             for(;;)
              {var ocaml_lex_state$2=48;
               for(;;)
                {var ocaml_lex_state$3=engine(tbl,ocaml_lex_state$2,lexbuf);
                 if(2 < ocaml_lex_state$3 >>> 0)
                  {caml_call1(lexbuf[1],lexbuf);
                   var ocaml_lex_state$2=ocaml_lex_state$3;
                   continue}
                 switch(ocaml_lex_state$3)
                  {case 0:
                    updateLocation(lexbuf,1,0);
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return next$0(counter$0,source,lexbuf)}
                    return caml_trampoline_return(next$0,[0,source,lexbuf]);
                   case 1:return makeToken(source,0,lexbuf);
                   default:continue c}}}
            case 38:
             var level=0;
             c:
             for(;;)
              {var ocaml_lex_state$4=53;
               for(;;)
                {var ocaml_lex_state$5=engine(tbl,ocaml_lex_state$4,lexbuf);
                 if(4 < ocaml_lex_state$5 >>> 0)
                  {caml_call1(lexbuf[1],lexbuf);
                   var ocaml_lex_state$4=ocaml_lex_state$5;
                   continue}
                 switch(ocaml_lex_state$5)
                  {case 0:updateLocation(lexbuf,1,0);continue c;
                   case 1:var level$0=level + 1 | 0,level=level$0;continue c;
                   case 2:
                    if(0 === level)
                     {if(counter < 50)
                       {var counter$1=counter + 1 | 0;
                        return next$0(counter$1,source,lexbuf)}
                      return caml_trampoline_return(next$0,[0,source,lexbuf])}
                    var level$1=level - 1 | 0,level=level$1;
                    continue c;
                   case 3:continue c;
                   default:return makeToken(source,0,lexbuf)}}}
            default:return makeToken(source,0,lexbuf)}}}}
    function next(source,lexbuf)
     {return caml_trampoline(next$0(0,source,lexbuf))}
    var ParserError=[248,_Tb_,caml_fresh_oo_id(0)];
    function TokenStream(S)
     {function skip(buffer)
       {buffer[5] = buffer[4];
        buffer[4] = caml_call2(S[1],buffer[6],buffer[1]);
        return 0}
      function current(buffer){return buffer[4]}
      function location(buffer){return buffer[4][3]}
      function peek(buffer){return buffer[4][1]}
      function makeError(buffer,message)
       {return [0,getNext(buffer[5][3]),message]}
      function setErrors(buffer,value){buffer[2] = value;return 0}
      function hasErrors(buffer){return buffer[2]}
      function getErrors(buffer){return buffer[3]}
      function notExpectedError(token)
       {var
         _Xz_=caml_call1(S[2],token[1]),
         message=caml_call1(sprintf(_Tc_),_Xz_);
        return [0,getNext(token[3]),message]}
      function appendError(buffer,error)
       {buffer[3] = [0,error,buffer[3]];return 0}
      function consume(buffer,kind)
       {var t=buffer[4];
        if(caml_equal(t[1],kind))
         {buffer[5] = buffer[4];
          buffer[4] = caml_call2(S[1],buffer[6],buffer[1]);
          return 0}
        if(caml_call1(S[4],t[1]))
         {var
           expected=caml_call1(S[2],kind),
           message=caml_call1(sprintf(_Td_),expected);
          throw [0,ParserError,makeError(buffer,message)]}
        var
         expected$0=caml_call1(S[2],kind),
         got=caml_call1(S[3],t),
         message$0=caml_call2(sprintf(_Te_),expected$0,got);
        throw [0,ParserError,makeError(buffer,message$0)]}
      function expect(buffer,kind)
       {var t=buffer[4];
        if(caml_equal(t[1],kind))return 0;
        if(caml_call1(S[4],t[1]))
         {var
           expected=caml_call1(S[2],kind),
           message=caml_call1(sprintf(_Tf_),expected);
          throw [0,ParserError,makeError(buffer,message)]}
        var
         expected$0=caml_call1(S[2],kind),
         got=caml_call1(S[2],t[1]),
         message$0=caml_call2(sprintf(_Tg_),expected$0,got);
        throw [0,ParserError,makeError(buffer,message$0)]}
      function optConsume(buffer,kind)
       {var t=buffer[4];return caml_equal(t[1],kind)?skip(buffer):0}
      function emptyLexedLines(param){return [0,create(100),0]}
      function fromString(file,str)
       {var
         _Xp_=[0],
         _Xq_=1,
         _Xr_=0,
         _Xs_=0,
         _Xt_=0,
         _Xu_=0,
         _Xv_=0,
         _Xw_=caml_ml_string_length(str),
         _Xo_=copy(str),
         lexbuf=
          [0,
           function(lexbuf){lexbuf[9] = 1;return 0},
           _Xo_,
           _Xw_,
           _Xv_,
           _Xu_,
           _Xt_,
           _Xs_,
           _Xr_,
           _Xq_,
           _Xp_,
           zero_pos,
           zero_pos];
        if(file)
         {var
           f=file[1],
           _Xx_=lexbuf[11],
           lex_start_p=[0,f,_Xx_[2],_Xx_[3],_Xx_[4]],
           _Xy_=lexbuf[12],
           lex_curr_p=[0,f,_Xy_[2],_Xy_[3],_Xy_[4]];
          lexbuf[11] = lex_start_p;
          lexbuf[12] = lex_curr_p;
          var source=[0,f]}
        else
         var source=[1,str];
        var first=caml_call2(S[1],source,lexbuf);
        return [0,lexbuf,0,0,first,first,source]}
      function fromChannel(chan,file)
       {var
         buf=caml_create_bytes(512),
         _Xb_=[0],
         _Xc_=0,
         _Xd_=0,
         _Xe_=0,
         _Xf_=0,
         _Xg_=0,
         _Xh_=0,
         _Xi_=0,
         _Xj_=caml_create_bytes(1024),
         lexbuf=
          [0,
           function(lexbuf)
            {var n=caml_ml_bytes_length(buf);
             if(0 <= n)
              if((caml_ml_string_length(buf) - n | 0) < 0)
               var switch$0=0;
              else
               var read=caml_ml_input(chan,buf,0,n),switch$0=1;
             else
              var switch$0=0;
             if(!switch$0)var read=invalid_arg(_g_);
             var n$0=0 < read?read:(lexbuf[9] = 1,0);
             if(caml_ml_bytes_length(lexbuf[2]) < (lexbuf[3] + n$0 | 0))
              {if
                (((lexbuf[3] - lexbuf[5] | 0) + n$0 | 0)
                 <=
                 caml_ml_bytes_length(lexbuf[2]))
                blit
                 (lexbuf[2],lexbuf[5],lexbuf[2],0,lexbuf[3] - lexbuf[5] | 0);
               else
                {var
                  newlen=
                   min
                    (2 * caml_ml_bytes_length(lexbuf[2]) | 0,max_string_length);
                 if(newlen < ((lexbuf[3] - lexbuf[5] | 0) + n$0 | 0))
                  failwith(_H_);
                 var newbuf=caml_create_bytes(newlen);
                 blit(lexbuf[2],lexbuf[5],newbuf,0,lexbuf[3] - lexbuf[5] | 0);
                 lexbuf[2] = newbuf}
               var s=lexbuf[5];
               lexbuf[4] = lexbuf[4] + s | 0;
               lexbuf[6] = lexbuf[6] - s | 0;
               lexbuf[5] = 0;
               lexbuf[7] = lexbuf[7] - s | 0;
               lexbuf[3] = lexbuf[3] - s | 0;
               var t=lexbuf[10],_Xm_=t.length - 1 - 1 | 0,_Xl_=0;
               if(!(_Xm_ < 0))
                {var i=_Xl_;
                 for(;;)
                  {var v=caml_check_bound(t,i)[i + 1];
                   if(0 <= v)caml_check_bound(t,i)[i + 1] = v - s | 0;
                   var _Xn_=i + 1 | 0;
                   if(_Xm_ !== i){var i=_Xn_;continue}
                   break}}}
             blit(buf,0,lexbuf[2],lexbuf[3],n$0);
             lexbuf[3] = lexbuf[3] + n$0 | 0;
             return 0},
           _Xj_,
           _Xi_,
           _Xh_,
           _Xg_,
           _Xf_,
           _Xe_,
           _Xd_,
           _Xc_,
           _Xb_,
           zero_pos,
           zero_pos],
         _Xk_=lexbuf[12];
        lexbuf[12] = [0,file,_Xk_[2],_Xk_[3],_Xk_[4]];
        var source=[0,file],first=caml_call2(S[1],source,lexbuf);
        return [0,lexbuf,0,0,first,first,source]}
      return [0,
              skip,
              current,
              location,
              peek,
              makeError,
              setErrors,
              hasErrors,
              getErrors,
              notExpectedError,
              appendError,
              consume,
              expect,
              optConsume,
              emptyLexedLines,
              fromString,
              fromChannel]}
    function isEOF(x){return 0 === x?1:0}
    var
     TokenKind=[0,next,kindStr$0,tokenStr,isEOF,0],
     Stream=TokenStream(TokenKind);
    function splitOnDot(s){return split$0(_Th_,s)}
    function moveToNextStatement(buffer)
     {for(;;)
       {var match=caml_call1(Stream[4],buffer);
        if(!(22 <= match))
         switch(match)
          {case 0:return 0;
           case 13:return caml_call1(Stream[1],buffer);
           case 21:return caml_call1(Stream[1],buffer);
           case 5:
           case 7:
           case 8:
           case 9:return 0
           }
        caml_call1(Stream[1],buffer);
        continue}}
    function getLhsExpLocation(e)
     {switch(e[0])
       {case 0:var attr=e[1];break;
        case 1:
        case 3:var attr=e[3];break;
        default:var attr=e[2]}
      return attr[1]}
    function getLbp(token)
     {var _W$_=token[1],_Xa_=token[2];
      if(20 <= _W$_)
       {var switcher=_W$_ - 20 | 0;
        switch(switcher)
         {case 0:return 10;
          case 2:return 20;
          case 4:
           var switch$0=caml_string_compare(_Xa_,_Ti_);
           if(0 <= switch$0)
            {if(!(0 < switch$0))return 40;
             if(!caml_string_notequal(_Xa_,_Tj_))return 40;
             if(!caml_string_notequal(_Xa_,_Tk_))return 40;
             if(!caml_string_notequal(_Xa_,_Tl_))return 40;
             if(!caml_string_notequal(_Xa_,_Tm_))return 40;
             if(!caml_string_notequal(_Xa_,_Tn_))return 40;
             if(!caml_string_notequal(_Xa_,_To_))return 30}
           else
            {if(!caml_string_notequal(_Xa_,_Tp_))return 60;
             if(!caml_string_notequal(_Xa_,_Tq_))return 35;
             if(!caml_string_notequal(_Xa_,_Tr_))return 60;
             if(!caml_string_notequal(_Xa_,_Ts_))return 50;
             if(!caml_string_notequal(_Xa_,_Tt_))return 50;
             if(!caml_string_notequal(_Xa_,_Tu_))return 60}
           break;
          case 17:return 10
          }}
      return 0}
    function prattParser(rbp,buffer,lbp,nud,led)
     {var current_token=caml_call1(Stream[2],buffer);
      caml_call1(Stream[1],buffer);
      var
       left=caml_call2(nud,buffer,current_token),
       token=caml_call1(Stream[2],buffer),
       repeat$1=rbp < caml_call1(lbp,token)?1:0,
       token$0=token,
       left$0=left,
       repeat=repeat$1;
      for(;;)
       {if(repeat)
         {caml_call1(Stream[1],buffer);
          var
           left$1=caml_call3(led,buffer,token$0,left$0),
           token$1=caml_call1(Stream[2],buffer),
           repeat$0=rbp < caml_call1(lbp,token$1)?1:0,
           token$0=token$1,
           left$0=left$1,
           repeat=repeat$0;
          continue}
        return left$0}}
    function identifierToken(token){return splitOnDot(token[2])}
    function commaSepList(parser,buffer)
     {var acc=0;
      for(;;)
       {var e=caml_call2(parser,20,buffer),match=caml_call1(Stream[4],buffer);
        if(22 === match)
         {caml_call1(Stream[1],buffer);var acc$0=[0,e,acc],acc=acc$0;continue}
        return rev([0,e,acc])}}
    function tagExpression(rbp,buffer)
     {return prattParser(rbp,buffer,getLbp,tag_nud,tag_led)}
    function tag_nud(buffer,token)
     {var _W9_=token[1],_W__=token[2];
      if(24 === _W9_)
       {if(!caml_string_notequal(_W__,_Tv_))
         {var right=tagExpression(70,buffer);
          switch(right[0])
           {case 2:
             var loc=right[2],value=right[1];return [2,_a_(_Tx_,value),loc];
            case 3:
             var loc$0=right[2],value$0=right[1];
             return [3,_a_(_Ty_,value$0),loc$0];
            default:return raiseError(_Tw_,token[3])}}}
      else
       if(!(5 <= _W9_))
        switch(_W9_)
         {case 1:return [2,token[2],token[3]];
          case 2:return [3,token[2],token[3]];
          case 3:
           var id=identifierToken(token),match=caml_call1(Stream[4],buffer);
           if(16 === match)
            {caml_call1(Stream[1],buffer);
             var match$0=caml_call1(Stream[4],buffer);
             if(17 === match$0)
              {caml_call1(Stream[1],buffer);return [0,id,token[3]]}
             var values=commaSepList(tagPair,buffer);
             caml_call2(Stream[11],buffer,17);
             return [1,id,values,token[3]]}
           return [0,id,token[3]];
          case 4:return [4,token[2],token[3]]
          }
      var message=caml_call1(Stream[9],token);
      throw [0,ParserError,message]}
    function tag_led(param,token,_W8_)
     {var message=caml_call1(Stream[9],token);throw [0,ParserError,message]}
    function tagPair(bp,buffer)
     {var id=identifierToken(caml_call1(Stream[2],buffer));
      caml_call1(Stream[1],buffer);
      caml_call2(Stream[11],buffer,23);
      var value=tagExpression(bp,buffer);
      return [0,id,value]}
    function optTagExpressions(buffer)
     {var match=caml_call1(Stream[4],buffer);
      if(25 === match)
       {caml_call2(Stream[11],buffer,25);
        caml_call2(Stream[11],buffer,14);
        var attr=commaSepList(tagExpression,buffer);
        caml_call2(Stream[11],buffer,15);
        return attr}
      return 0}
    function typeExpression(rbp,buffer)
     {return prattParser(rbp,buffer,getLbp,type_nud,type_led)}
    function type_nud(buffer,token)
     {var _W5_=token[1];
      if(4 <= _W5_)
       {if(34 <= _W5_)
         {if(!(37 <= _W5_))
           {var switcher=_W5_ - 34 | 0;
            switch(switcher)
             {case 0:return [0,[0,_Tz_,0,[0,token[3]]]];
              case 1:break;
              default:
               var match=caml_call1(Stream[4],buffer);
               if(3 === match)
                {var token$0=caml_call1(Stream[2],buffer);
                 caml_call1(Stream[1],buffer);
                 var match$0=identifierToken(token$0);
                 if(match$0)
                  if(!match$0[2])
                   {var id=match$0[1],_W6_=[0,token$0[3]];
                    return [0,[0,_a_(_TB_,id),0,_W6_]]}
                 var message$0=[0,token$0[3],_TA_];
                 throw [0,ParserError,message$0]}
               var message$1=caml_call1(Stream[9],token);
               throw [0,ParserError,message$1]}}}
        else
         if(16 === _W5_)
          {var start_loc=token[3],match$1=caml_call1(Stream[4],buffer);
           if(17 === match$1)
            {caml_call1(Stream[1],buffer);return [0,[1,_TC_,[0,start_loc]]]}
           var el=typeArgList(buffer);
           if(el)
            {if(el[2])
              {caml_call2(Stream[11],buffer,17);
               return [0,[2,_TD_,el,[0,start_loc]]]}
             var tp=el[1];
             return tp}
           return [0,[1,_TE_,[0,start_loc]]]}}
      else
       if(0 !== _W5_)
        {var switcher$0=_W5_ - 1 | 0;
         switch(switcher$0)
          {case 0:
            var _W7_=[0,token[3]];
            return [0,[6,caml_int_of_string(token[2]),_W7_]];
           case 1:break;
           default:
            var
             id$0=identifierToken(token),
             match$2=caml_call1(Stream[4],buffer);
            if(16 === match$2)
             {caml_call1(Stream[1],buffer);
              var
               match$3=caml_call1(Stream[4],buffer),
               args=17 === match$3?0:typeArgList(buffer);
              caml_call2(Stream[11],buffer,17);
              return [0,[2,id$0,args,[0,token[3]]]]}
            return [0,[1,id$0,[0,token[3]]]]}}
      var message=caml_call1(Stream[9],token);
      throw [0,ParserError,message]}
    function type_led(buffer,token,left)
     {if(37 === token[1])
       {var
         right=typeExpression(0,buffer),
         typ=[0,[3,left,right,[0,token[3]]]],
         match=fixType(0,typ),
         typ$0=match[1];
        return typ$0}
      var message=caml_call1(Stream[9],token);
      throw [0,ParserError,message]}
    function typeArgList(buffer){return commaSepList(typeExpression,buffer)}
    function lhs_expression(rbp,buffer)
     {return prattParser(rbp,buffer,getLbp,lhs_nud,lhs_led)}
    function lhs_nud(buffer,token)
     {var _W4_=token[1];
      if(3 === _W4_)
       {var id=identifierToken(token);return [1,id,0,makeAttr(token[3])]}
      if(16 === _W4_)
       {var match=caml_call1(Stream[4],buffer);
        if(17 === match)
         {var message=caml_call1(Stream[9],token);
          throw [0,ParserError,message]}
        var e=lhs_expression(0,buffer);
        caml_call2(Stream[11],buffer,17);
        var attr=makeAttr(token[3]);
        return [4,e,attr]}
      if(34 === _W4_)return [0,makeAttr(token[3])];
      var message$0=caml_call1(Stream[9],token);
      throw [0,ParserError,message$0]}
    function lhs_led(buffer,token,left)
     {var switcher=token[1] - 20 | 0;
      if(!(2 < switcher >>> 0))
       switch(switcher)
        {case 0:
          var vtype=typeExpression(0,buffer);
          return [3,left,vtype,makeAttr(token[3])];
         case 1:break;
         default:
          var
           right=lhs_expression(getLbp(token),buffer),
           getElems=
            function(e)
             {if(2 === e[0]){var elems=e[1];return elems}return [0,e,0]},
           elems1=getElems(left),
           elems2=getElems(right),
           loc=getLhsExpLocation(left),
           _W3_=makeAttr(loc);
          return [2,joinErrors(elems1,elems2),_W3_]}
      return failwith(_TF_)}
    function expression(rbp,buffer)
     {return prattParser(rbp,buffer,getLbp,exp_nud,exp_led)}
    function exp_nud(buffer,token)
     {var _W1_=token[2];
      switch(token[1])
       {case 1:
         var attr=makeAttr(token[3]);
         return [2,caml_int_of_string(token[2]),attr];
        case 2:
         var attr$0=makeAttr(token[3]);
         return [3,caml_float_of_string(token[2]),attr$0];
        case 3:
         var id=identifierToken(token),match=caml_call1(Stream[4],buffer);
         if(16 === match)
          {caml_call1(Stream[1],buffer);
           var
            match$2=caml_call1(Stream[4],buffer),
            args$0=17 === match$2?0:expressionList(buffer);
           caml_call2(Stream[11],buffer,17);
           var attr$9=makeAttr(token[3]);
           return [9,0,id,args$0,attr$9]}
         if(20 === match)
          {caml_call1(Stream[1],buffer);
           var exp_call=expression(100,buffer);
           if(typeof exp_call !== "number" && 9 === exp_call[0])
            if(!exp_call[1])
             {var attr$1=exp_call[4],args=exp_call[3],fname=exp_call[2];
              return [9,[0,id],fname,args,attr$1]}
           var loc=fromExp$0(exp_call)[1],error=[0,getNext(loc),_TG_];
           throw [0,ParserError,error]}
         return [5,id,makeAttr(token[3])];
        case 4:var attr$2=makeAttr(token[3]);return [4,token[2],attr$2];
        case 9:
         var cond=expression(0,buffer);
         caml_call2(Stream[11],buffer,10);
         var then_exp=expression(0,buffer);
         caml_call2(Stream[11],buffer,11);
         var else_exp=expression(0,buffer),attr$3=makeAttr(token[3]);
         return [10,cond,then_exp,else_exp,attr$3];
        case 14:
         var start_loc=token[3],match$0=caml_call1(Stream[4],buffer);
         if(15 === match$0)
          {var attr$4=makeAttr(start_loc);
           caml_call2(Stream[11],buffer,15);
           return [6,[0],attr$4]}
         var start_loc$0=token[3],elems=expressionList(buffer);
         caml_call2(Stream[11],buffer,15);
         var attr$5=makeAttr(start_loc$0);
         return [6,of_list(elems),attr$5];
        case 16:
         var start_loc$1=token[3],match$1=caml_call1(Stream[4],buffer);
         if(17 === match$1)
          {caml_call1(Stream[1],buffer);return [0,makeAttr(start_loc$1)]}
         var e=expression(0,buffer);
         caml_call2(Stream[11],buffer,17);
         return [11,e,makeAttr(start_loc$1)];
        case 18:
         var acc=0;
         for(;;)
          {var match$3=caml_call1(Stream[4],buffer);
           if(19 === match$3)
            {caml_call1(Stream[1],buffer);var _W2_=rev(acc)}
           else
            {if(0 !== match$3)
              {var s=stmt$4(buffer),acc$0=[0,s,acc],acc=acc$0;continue}
             caml_call2(Stream[12],buffer,19);
             var _W2_=0}
           var attr$6=makeAttr(token[3]);
           return [13,0,[8,0,_W2_,attr$6],attr$6]}
        case 24:
         if(!caml_string_notequal(_W1_,_TH_))
          {var right=expression(70,buffer),attr$10=makeAttr(token[3]);
           return [7,token[2],right,attr$10]}
         break;
        case 31:var attr$7=makeAttr(token[3]);return [1,1,attr$7];
        case 32:var attr$8=makeAttr(token[3]);return [1,0,attr$8]
        }
      var message=caml_call1(Stream[9],token);
      throw [0,ParserError,message]}
    function exp_led(buffer,token,left)
     {var switcher=token[1] - 22 | 0;
      if(!(2 < switcher >>> 0))
       switch(switcher)
        {case 0:
          var
           right=expression(getLbp(token),buffer),
           getElems=
            function(e)
             {if(typeof e !== "number" && 12 === e[0])
               {var elems=e[1];return elems}
              return [0,e,0]},
           elems1=getElems(left),
           elems2=getElems(right),
           start_loc=fromExp$0(left)[1],
           attr=makeAttr(start_loc);
          return [12,joinErrors(elems1,elems2),attr];
         case 1:break;
         default:
          var
           right$0=expression(getLbp(token),buffer),
           attr$0=makeAttr(token[3]);
          return [8,token[2],[0,left,[0,right$0,0]],attr$0]}
      return failwith(_TI_)}
    function expressionList(buffer){return commaSepList(expression,buffer)}
    function typedArgOpt(buffer)
     {caml_call2(Stream[12],buffer,3);
      var token=caml_call1(Stream[2],buffer);
      caml_call1(Stream[1],buffer);
      var match=caml_call1(Stream[4],buffer);
      if(20 === match)
       {caml_call1(Stream[1],buffer);
        var e=typeExpression(20,buffer),attr=makeAttr(token[3]);
        return [1,splitOnDot(token[2]),e,0,attr]}
      var attr$0=makeAttr(token[3]);
      return [0,splitOnDot(token[2]),0,attr$0]}
    function typedArg(buffer)
     {caml_call2(Stream[12],buffer,3);
      var token=caml_call1(Stream[2],buffer);
      caml_call1(Stream[1],buffer);
      caml_call2(Stream[11],buffer,20);
      var e=typeExpression(20,buffer),attr=makeAttr(token[3]);
      return [1,splitOnDot(token[2]),e,0,attr]}
    function id(buffer)
     {caml_call2(Stream[12],buffer,3);
      var token=caml_call1(Stream[2],buffer);
      caml_call1(Stream[1],buffer);
      return identifierToken(token)}
    function typedArgList(optional_type,buffer)
     {var match=caml_call1(Stream[4],buffer);
      if(3 === match)
       {var
         fn=optional_type?typedArgOpt:typedArg,
         first=fn(buffer),
         match$0=caml_call1(Stream[4],buffer);
        return 22 === match$0
                ?(caml_call2(Stream[11],buffer,22),
                  [0,first,typedArgList(optional_type,buffer)])
                :[0,first,0]}
      return 0}
    function stmtVal(buffer)
     {var start_loc=caml_call1(Stream[3],buffer);
      caml_call2(Stream[11],buffer,7);
      var lhs=lhs_expression(0,buffer),match=caml_call1(Stream[4],buffer);
      if(23 === match)
       {caml_call1(Stream[1],buffer);
        var rhs=expression(0,buffer);
        caml_call2(Stream[11],buffer,21);
        var attr=makeAttr(start_loc);
        return [0,lhs,[0,rhs],attr]}
      caml_call2(Stream[11],buffer,21);
      var attr$0=makeAttr(start_loc);
      return [0,lhs,0,attr$0]}
    function stmtMem(buffer)
     {var start_loc=caml_call1(Stream[3],buffer);
      caml_call2(Stream[11],buffer,6);
      var lhs=lhs_expression(0,buffer),match=caml_call1(Stream[4],buffer);
      if(23 === match)
       {caml_call1(Stream[1],buffer);
        var rhs=expression(0,buffer);
        caml_call2(Stream[11],buffer,21);
        var attr=makeAttr(start_loc);
        return [1,lhs,[0,rhs],attr]}
      caml_call2(Stream[11],buffer,21);
      var attr$0=makeAttr(start_loc);
      return [1,lhs,0,attr$0]}
    function stmtReturn(buffer)
     {var start_loc=caml_call1(Stream[3],buffer);
      caml_call2(Stream[11],buffer,8);
      var e=expression(0,buffer);
      caml_call2(Stream[11],buffer,21);
      return [3,e,makeAttr(start_loc)]}
    function stmtBind(buffer)
     {var
       e1=lhs_expression(0,buffer),
       start_loc=getLhsExpLocation(e1),
       match=caml_call1(Stream[4],buffer);
      if(23 === match)
       {caml_call2(Stream[11],buffer,23);
        var e2=expression(0,buffer);
        caml_call2(Stream[11],buffer,21);
        return [7,e1,e2,makeAttr(start_loc)]}
      var message=sprintf(_TJ_);
      throw [0,ParserError,caml_call2(Stream[5],buffer,message)]}
    function stmtIf(buffer)
     {caml_call2(Stream[11],buffer,9);
      caml_call2(Stream[11],buffer,16);
      var cond=expression(0,buffer);
      caml_call2(Stream[11],buffer,17);
      var
       tstm=stmtList(buffer),
       start_loc=fromExp$0(cond)[1],
       match=caml_call1(Stream[4],buffer);
      if(11 === match)
       {caml_call2(Stream[11],buffer,11);
        var fstm=stmtList(buffer);
        return [4,cond,tstm,[0,fstm],makeAttr(start_loc)]}
      return [4,cond,tstm,0,makeAttr(start_loc)]}
    function stmtExternal(buffer)
     {caml_call1(Stream[1],buffer);
      var name=id(buffer),token$0=caml_call1(Stream[2],buffer);
      caml_call2(Stream[11],buffer,16);
      var
       match=caml_call1(Stream[4],buffer),
       args=17 === match?0:typedArgList(0,buffer);
      caml_call2(Stream[11],buffer,17);
      caml_call2(Stream[11],buffer,20);
      var vtype=typeExpression(0,buffer),match$0=caml_call1(Stream[4],buffer);
      if(4 === match$0)
       {caml_call2(Stream[12],buffer,4);
        var token=caml_call1(Stream[2],buffer);
        caml_call1(Stream[1],buffer);
        var
         _WZ_=token[2],
         tag_exp=optTagExpressions(buffer),
         link_name=[0,_WZ_],
         link_name$0=link_name,
         tag=tag_exp}
      else
       {if(25 !== match$0)
         {var message=sprintf(_TK_);
          throw [0,ParserError,caml_call2(Stream[5],buffer,message)]}
        var tag$0=optTagExpressions(buffer),link_name$0=0,tag=tag$0}
      caml_call2(Stream[11],buffer,21);
      var
       start_loc=token$0[3],
       _W0_=makeAttr(start_loc),
       attr=
        [0,
         _W0_[1],
         _W0_[2],
         _W0_[3],
         _W0_[4],
         _W0_[5],
         link_name$0,
         _W0_[7],
         tag,
         _W0_[9]];
      return [6,name,args,vtype,link_name$0,attr]}
    function stmtFunction(buffer)
     {var match=caml_call1(Stream[4],buffer),isjoin=33 === match?1:0;
      caml_call1(Stream[1],buffer);
      var start_loc=caml_call1(Stream[2],buffer)[3],name=id(buffer);
      caml_call2(Stream[11],buffer,16);
      var
       match$0=caml_call1(Stream[4],buffer),
       args=17 === match$0?0:typedArgList(1,buffer);
      caml_call2(Stream[11],buffer,17);
      var
       match$1=caml_call1(Stream[4],buffer),
       vtype=
        20 === match$1
         ?(caml_call1(Stream[1],buffer),[0,typeExpression(0,buffer)])
         :0,
       tag_exp=optTagExpressions(buffer),
       body=stmtList(buffer),
       attr=
        [0,
         start_loc,
         init$0[2],
         init$0[3],
         init$0[4],
         init$0[5],
         init$0[6],
         init$0[7],
         tag_exp,
         init$0[9]],
       attr$0=
        isjoin
         ?[0,
           attr[1],
           1,
           attr[3],
           attr[4],
           attr[5],
           attr[6],
           attr[7],
           attr[8],
           attr[9]]
         :attr;
      return [5,name,args,body,vtype,attr$0]}
    function stmtType(buffer)
     {caml_call2(Stream[11],buffer,28);
      var
       token=caml_call1(Stream[2],buffer),
       start_loc=token[3],
       type_name=typeExpression(10,buffer),
       match=caml_call1(Stream[4],buffer);
      if(12 === match)
       {caml_call1(Stream[1],buffer);
        var acc=0;
        for(;;)
         {var match$0=caml_call1(Stream[4],buffer);
          if(7 === match$0)
           {caml_call2(Stream[12],buffer,7);
            var token$0=caml_call1(Stream[2],buffer),start_loc$0=token$0[3];
            caml_call1(Stream[1],buffer);
            var id$0=id(buffer);
            caml_call2(Stream[11],buffer,20);
            var
             val_type=typeExpression(10,buffer),
             decl=[0,id$0,val_type,makeAttr(start_loc$0)];
            caml_call2(Stream[11],buffer,21);
            var acc$0=[0,decl,acc],acc=acc$0;
            continue}
          var val_decl=rev(acc);
          caml_call2(Stream[11],buffer,13);
          return [9,type_name,val_decl,makeAttr(start_loc)]}}
      if(20 === match)
       {caml_call1(Stream[1],buffer);
        var vtype=typeExpression(10,buffer);
        caml_call2(Stream[13],buffer,21);
        return [10,type_name,vtype,makeAttr(start_loc)]}
      var
       got=tokenStr(caml_call1(Stream[2],buffer)),
       message=caml_call1(sprintf(_TL_),got);
      throw [0,ParserError,caml_call2(Stream[5],buffer,message)]}
    function stmtWhile(buffer)
     {var start_loc=caml_call1(Stream[3],buffer);
      caml_call2(Stream[11],buffer,27);
      caml_call2(Stream[11],buffer,16);
      var cond=expression(0,buffer);
      caml_call2(Stream[11],buffer,17);
      var tstm=stmtList(buffer);
      return [2,cond,tstm,makeAttr(start_loc)]}
    function stmt$4(buffer)
     {try
       {var match=caml_call1(Stream[4],buffer);
        switch(match)
         {case 5:var _WY_=stmtFunction(buffer);break;
          case 6:var _WY_=stmtMem(buffer);break;
          case 7:var _WY_=stmtVal(buffer);break;
          case 8:var _WY_=stmtReturn(buffer);break;
          case 9:var _WY_=stmtIf(buffer);break;
          case 27:var _WY_=stmtWhile(buffer);break;
          case 28:var _WY_=stmtType(buffer);break;
          case 33:var _WY_=stmtFunction(buffer);break;
          case 35:var _WY_=stmtExternal(buffer);break;
          default:var _WY_=stmtBind(buffer)}
        return _WY_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === ParserError)
         {var error=exn[2];
          caml_call2(Stream[10],buffer,error);
          moveToNextStatement(buffer);
          caml_call2(Stream[6],buffer,1);
          return 0}
        throw exn}}
    function stmtList(buffer)
     {var
       start_loc=caml_call1(Stream[3],buffer),
       match$0=caml_call1(Stream[4],buffer);
      if(12 === match$0)
       {caml_call1(Stream[1],buffer);
        var acc=0;
        for(;;)
         {var match=caml_call1(Stream[4],buffer);
          if(13 === match)
           {var
             end_loc=caml_call1(Stream[3],buffer),
             loc=merge(start_loc,end_loc);
            caml_call1(Stream[1],buffer);
            var _WX_=makeAttr(loc);
            return [8,0,rev(acc),_WX_]}
          if(0 === match)
           {caml_call2(Stream[12],buffer,13);
            return [8,0,0,makeAttr(start_loc)]}
          var s=stmt$4(buffer),acc$0=[0,s,acc],acc=acc$0;
          continue}}
      var s$0=stmt$4(buffer);
      if(typeof s$0 === "number")
       var loc$0=default$0,switch$0=1;
      else
       switch(s$0[0])
        {case 3:var attr=s$0[2],switch$0=0;break;
         case 4:var attr=s$0[4],switch$0=0;break;
         case 5:
         case 6:var attr=s$0[5],switch$0=0;break;
         default:var attr=s$0[3],switch$0=0}
      if(!switch$0)var loc$0=attr[1];
      return [8,0,[0,s$0,0],makeAttr(loc$0)]}
    function parseBuffer(file,buffer)
     {try
       {var
         loop=
          function(acc)
           {var acc$0=acc;
            for(;;)
             {var match=caml_call1(Stream[4],buffer);
              if(0 === match)return rev(acc$0);
              var acc$1=[0,stmt$4(buffer),acc$0],acc$0=acc$1;
              continue}},
         result=loop(0);
        if(caml_call1(Stream[7],buffer))
         throw [0,Errors,rev(caml_call1(Stream[8],buffer))];
        var _WW_=[0,result,file];
        return _WW_}
      catch(e)
       {e = caml_wrap_exception(e);
        if(e[1] === ParserError){var error=e[2];throw [0,Errors,[0,error,0]]}
        if(e[1] === Errors)throw e;
        throw e}}
    function loadFiles(arguments$0,files$1)
     {var
       current=caml_sys_getcwd(0),
       implicit_dirs=
        map(function(input){var f=input[1];return dirname$2(f)},files$1),
       _WO_=arguments$0[13],
       explicit_dir=
        map(function(a){return is_relative$1(a)?concat$1(current,a):a},_WO_),
       includes=
        sort_uniq
         (caml_string_compare,
          joinErrors([0,current,implicit_dirs],explicit_dir));
      arguments$0[13] = includes;
      var parsed=create$0(0,8),dependencies=create$0(0,8),files=files$1;
      for(;;)
       {if(files)
         {var input=files[1],h=input[1],t=files[2];
          if(mem(parsed,h)){var files=t;continue}
          var h_module=moduleName(h);
          if(0 === input[0])
           {var match$0=read(h);
            if(match$0)
             var
              contents=match$0[1],
              buffer=caml_call2(Stream[15],[0,h],contents),
              result=parseBuffer(h,buffer),
              _WP_=result;
            else
             var _WP_=raiseErrorMsg(_a_(_TM_,h));
            var h_parsed=_WP_}
          else
           var
            txt=input[2],
            buffer$0=caml_call2(Stream[15],0,txt),
            result$0=parseBuffer(_TN_,buffer$0),
            h_parsed=result$0;
          var
           _WQ_=h_parsed[1],
           match=map_stmt_list(mapper$1,empty$1(IdSet[1]),_WQ_),
           s=match[1],
           h_deps=map(hd,caml_call1(IdSet[32],s[1])),
           _WR_=
            filter_map
             (function(module_name)
               {var includes$0=includes;
                for(;;)
                 {if(includes$0)
                   {var
                     t=includes$0[2],
                     h=includes$0[1],
                     file1=
                      concat$1(h,_a_(apply1(lowercase_ascii,module_name),_TO_));
                    if(caml_sys_file_exists(file1))return [0,file1];
                    var file2=concat$1(h,_a_(module_name,_TP_));
                    if(caml_sys_file_exists(file2))return [0,file2];
                    var includes$0=t;
                    continue}
                  return 0}},
              h_deps),
           _WS_=
            caml_call1
             (find_all
               (function(h)
                  {return function(a){return caml_string_notequal(a,h)}}
                 (h)),
              _WR_),
           h_dep_files=map(function(a){return [0,a]},_WS_);
          add(dependencies,h_module,h_deps);
          add(parsed,h_module,h_parsed);
          var files$0=joinErrors(t,h_dep_files),files=files$0;
          continue}
        var
         _WU_=0,
         dep_list=
          fold(function(a,b,acc){return [0,[0,a,b],acc]},dependencies,_WU_),
         comps$1=components(dep_list),
         comps=comps$1;
        for(;;)
         {if(comps)
           {var _WT_=comps[1];
            if(_WT_)if(!_WT_[2]){var comps$0=comps[2],comps=comps$0;continue}
            var msg=_a_(_TR_,concat$0(_TQ_,_WT_));
            raiseErrorMsg(msg)}
          var sorted_deps=map(hd,comps$1);
          return filter_map
                  (function(module_name)
                    {try
                      {var found=find$0(parsed,module_name)}
                     catch(_WV_)
                      {_WV_ = caml_wrap_exception(_WV_);
                       if(_WV_ === Not_found)return 0;
                       throw _WV_}
                     return [0,found]},
                   sorted_deps)}}}
    function generateCode(args,parser_results)
     {if(args[5])
       var switch$0=0;
      else
       if(args[7])
        var switch$0=0;
       else
        if(args[8])
         var switch$0=0;
        else
         {if(args[6])
           if(0 === parser_results)
            var switch$1=1;
           else
            var switch$0=0,switch$1=0;
          else
           var switch$1=1;
          if(switch$1)var results=0,switch$0=1}
      if(!switch$0)
       {registerReplacements(_NQ_,replacements);
        registerReplacements(_NR_,replacements$0);
        registerReplacements(_NS_,replacements$1);
        registerReplacements(_NT_,replacements$2);
        var _Wb_=args[10];
        if(caml_string_notequal(_Wb_,_RR_))
         if(caml_string_notequal(_Wb_,_RS_))
          if(caml_string_notequal(_Wb_,_RT_))
           {var msg=_a_(_RV_,_a_(_Wb_,_RU_));raiseErrorMsg(msg)}
        var
         stmts$3=applyTransformations(args,0,parser_results),
         params=createParameters(stmts$3,args),
         params$0=
          createParameters
           (stmts$3,
            [0,
             args[1],
             args[2],
             args[3],
             args[4],
             args[5],
             args[6],
             args[7],
             args[8],
             args[9],
             _Sp_,
             args[11],
             args[12],
             args[13],
             args[14]]),
         params$1=
          createParameters
           (stmts$3,
            [0,
             args[1],
             args[2],
             args[3],
             args[4],
             args[5],
             args[6],
             args[7],
             args[8],
             args[9],
             _Sq_,
             args[11],
             args[12],
             args[13],
             args[14]]),
         stmts$4=concat(map(function(a){return a[1]},stmts$3));
        if(args[6])
         {var
           cparams$0=[0,params[5],1,1],
           stmts$0=convert(cparams$0,stmts$4),
           _VM_=_a_(_hb_,_K2_[3]),
           _VN_=_a_(_hc_,_a_(_K2_[2],_VM_)),
           m=[0,[0,_K3_,[0,_a_(_K2_[1],_VN_)],[1,_K1_],0,0,0],_g__],
           _V7_=[0,m,IdMap[1]],
           match=
            fold_left
             (function(param,stmt)
               {var vars$2=param[2],m$4=param[1];
                if(typeof stmt !== "number")
                 switch(stmt[0])
                  {case 3:
                    var
                     body$0=stmt[4],
                     args=stmt[3],
                     name=stmt[2],
                     ntype=stmt[1],
                     ret=printTypeDescr$0(ntype),
                     fname=[0,ret,[0,[0,name]]],
                     match$1=fold_left(declareFunctionArg,[0,m$4,0],args),
                     rev_args=match$1[2],
                     m$1=match$1[1],
                     args$0=rev(rev_args),
                     match$2=_hd_(m$1,_g1_,_a_(name,_K0_)),
                     fun_entry=match$2[2],
                     m$2=match$2[1];
                    if(typeof body$0 === "number")
                     var switch$0=0;
                    else
                     if(6 === body$0[0])
                      {var _WF_=body$0[1];
                       if(_WF_)
                        var
                         _WG_=[0,m$2,vars$2,0],
                         match$0=
                          fold_left
                           (function(param,stmt)
                             {var
                               acc=param[3],
                               vars=param[2],
                               m=param[1],
                               match=printStmt$1(m,vars,stmt),
                               s=match[3],
                               vars$0=match[2],
                               m$0=match[1];
                              return [0,m$0,vars$0,joinErrors(s,acc)]},
                            _WG_,
                            _WF_),
                         body=match$0[3],
                         vars$0=match$0[2],
                         m$0=match$0[1],
                         match$3=[0,m$0,vars$0,rev(body)],
                         switch$0=1;
                       else
                        var match$3=[0,m$2,vars$2,0],switch$0=1}
                     else
                      var switch$0=0;
                    if(!switch$0)
                     var
                      match=printStmt$1(m$2,vars$2,body$0),
                      s=match[3],
                      vars=match[2],
                      m=match[1],
                      match$3=[0,m,vars,s];
                    var
                     body$1=match$3[3],
                     vars$1=match$3[2],
                     m$3=match$3[1],
                     _WH_=[0,[0,_g4_(fun_entry)[2],body$1],0],
                     _Wq_=map(_g4_,args$0),
                     _Wr_=
                      map
                       (function(_WL_)
                         {var _WN_=_WL_[1],_WM_=_WL_[2];
                          if(0 === _WN_[0])throw [0,Assert_failure,_g9_];
                          return [0,_WN_[1],_WM_]},
                        _WH_),
                     _Ws_=map(function(_WK_){return _WK_[1]},_Wq_),
                     _Wn_=_g4_(fname),
                     _Wo_=[0,0,map(function(_WJ_){return 0},_Ws_)],
                     _Wp_=[0,_Wn_[2],[3,[0,_Wn_[1],_Ws_]],_Wo_],
                     _Wt_=0,
                     _Wu_=0,
                     _Wv_=0,
                     _Ww_=0,
                     _Wx_=0,
                     _Wy_=0,
                     _Wz_=0,
                     _WA_=0,
                     def=
                      [0,
                       _Wp_,
                       map(function(_WI_){return _WI_[2]},_Wq_),
                       _Wr_,
                       _WA_,
                       _Wz_,
                       _Wy_,
                       _Wx_,
                       _Ww_,
                       _Wv_,
                       _Wu_,
                       _Wt_],
                     _WB_=def[1],
                     _WC_=_WB_[1];
                    if(0 === _WC_[0])
                     {var _WD_=_WC_[1],_WE_=m$3[1];
                      return [0,
                              [0,
                               [0,
                                _WE_[1],
                                _WE_[2],
                                _WE_[3],
                                _WE_[4],
                                [0,[0,_WD_,_WB_],m$3[1][5]],
                                [0,[0,_WD_,def],m$3[1][6]]],
                               m$3[2]],
                              vars$1]}
                    throw [0,Match_failure,_he_];
                   case 8:return [0,m$4,vars$2]
                   }
                return failwith(_KZ_)},
              _V7_,
              stmts$0),
           m$0=match[1],
           buffer=create(0),
           formatter=formatter_of_buffer(buffer),
           _V8_=m$0[1],
           _VL_=[0,[0,0],create$0(0,0)];
          caml_call3(_ds_,[0,[0,[0,0],create$0(0,0)],_VL_],formatter,_V8_);
          var
           _V9_=0,
           _V__=contents(buffer),
           llvm=[0,[0,function(_Wm_){return string(_V__,_Wm_)},_K4_],_V9_]}
        else
         var llvm=0;
        if(args[5])
         var
          cparams=[0,params[5],1,0],
          stmts=convert(cparams,stmts$4),
          header_code=
           printStmtList
            ([0,params[1],params[2],1,params[4],params[5],params[6],params[7]],
             stmts),
          impl_code=
           printStmtList
            ([0,params[1],params[2],0,params[4],params[5],params[6],params[7]],
             stmts),
          _VO_=params[2],
          template=
           caml_string_notequal(_VO_,_Ga_)
            ?caml_string_notequal(_VO_,_Gb_)
              ?caml_string_notequal(_VO_,_Gc_)
                ?caml_string_notequal(_VO_,_Gd_)
                  ?caml_string_notequal(_VO_,_Ge_)
                    ?caml_string_notequal(_VO_,_Gf_)
                      ?failwith(caml_call1(sprintf(_Gg_),_VO_))
                      :get$2
                    :get$1
                  :get$3
                :get$0
              :get
            :get$3,
          ccode=caml_call3(template,params,header_code,impl_code);
        else
         var ccode=0;
        if(args[7])
         {var
           cparams$1=[0,params$0[5],0,0],
           stmts$1=convert(cparams$1,stmts$4),
           code=printStmtList$0(params$0,stmts$1),
           _V5_=params$0[2],
           _V6_=params$0[6];
          if(caml_string_notequal(_V5_,_Jk_))
           if(caml_string_notequal(_V5_,_Jl_))
            if(caml_string_notequal(_V5_,_Jm_))
             var js_text=code;
            else
             {var
               config=params$0[7],
               module_name$1=params$0[6],
               nprocess_inputs=length(config[2]),
               nprocess_outputs=length(config[3]),
               _VZ_=config[2],
               _V0_=
                mapi
                 (function(i,param,buffer)
                   {append(buffer,_In_);
                    int$0(i,buffer);
                    append(buffer,_Io_);
                    int$0(i,buffer);
                    append(buffer,_Ip_);
                    return 0},
                  _VZ_),
               _V1_=config[3],
               _V2_=
                mapi
                 (function(i,param,buffer)
                   {append(buffer,_Iq_);
                    int$0(i,buffer);
                    append(buffer,_Ir_);
                    int$0(i,buffer);
                    append(buffer,_Is_);
                    return 0},
                  _V1_),
               _V3_=params$0[7],
               _V4_=params$0[6],
               _VP_=_V3_[2],
               a=
                mapi
                 (function(i,param,buffer)
                   {append(buffer,_HN_);
                    int$0(i,buffer);
                    append(buffer,_HO_);
                    return 0},
                  _VP_),
               _VQ_=_V3_[8]?[0,function(_Wj_){return string(_HP_,_Wj_)},a]:a;
              if(1 < length(_V3_[3]))
               var
                _VR_=0,
                _VS_=
                 joinErrors
                  (_VQ_,[0,function(_Wi_){return string(_HQ_,_Wi_)},_VR_]);
              else
               var _VS_=_VQ_;
              var _VT_=_V3_[3];
              if(_VT_)
               {if(_VT_[2])
                 var
                  _VU_=
                   mapi
                    (function(i,param)
                      {return function(buffer)
                        {append(buffer,_HS_);
                         int$0(i,buffer);
                         append(buffer,_HT_);
                         append(buffer,_HR_);
                         int$0(i,buffer);
                         append(buffer,_HU_);
                         return 0}},
                     _VT_),
                  _VV_=
                   function(_Wh_){return join_sep_all(newline$0,_VU_,_Wh_)};
                else
                 var
                  _VV_=
                   function(buffer)
                    {append(buffer,_H2_);
                     string(_H1_,buffer);
                     append(buffer,_H3_);
                     return 0};
                var copy=_VV_}
              else
               var copy=ret;
              var
               module_name=params$0[6],
               _VW_=params$0[7][8]?[0,_H4_,a$8]:a$8,
               _VX_=params$0[7][8]?[0,_H5_,a$9]:a$9,
               off_args=function(_Wg_){return map_sep(comma,string,_VX_,_Wg_)},
               module_name$0=params$0[6],
               _VY_=params$0[7][8]?[0,_Ih_,a$10]:a$10,
               text=
                function(buffer)
                 {newline(buffer);
                  append(buffer,_It_);
                  newline(buffer);
                  append(buffer,_Iu_);
                  newline(buffer);
                  append(buffer,_Iv_);
                  runtime(buffer);
                  newline(buffer);
                  append(buffer,_Iw_);
                  caml_call1(code,buffer);
                  newline(buffer);
                  append(buffer,_Ix_);
                  string(module_name$1,buffer);
                  append(buffer,_Iy_);
                  newline(buffer);
                  append(buffer,_Iz_);
                  string(module_name$1,buffer);
                  append(buffer,_IA_);
                  newline(buffer);
                  append(buffer,_IB_);
                  newline(buffer);
                  append(buffer,_IC_);
                  newline(buffer);
                  append(buffer,_ID_);
                  int$0(nprocess_inputs,buffer);
                  append(buffer,_IE_);
                  int$0(nprocess_outputs,buffer);
                  append(buffer,_IF_);
                  newline(buffer);
                  append(buffer,_IG_);
                  int$0(nprocess_inputs,buffer);
                  append(buffer,_IH_);
                  newline(buffer);
                  append(buffer,_II_);
                  int$0(nprocess_outputs,buffer);
                  append(buffer,_IJ_);
                  newline(buffer);
                  append(buffer,_IK_);
                  newline(buffer);
                  indent(buffer);
                  join_sep(newline$0,_V0_,buffer);
                  outdent(buffer);
                  newline(buffer);
                  indent(buffer);
                  join_sep(newline$0,_V2_,buffer);
                  outdent(buffer);
                  newline(buffer);
                  indent(buffer);
                  append(buffer,_HV_);
                  newline(buffer);
                  append(buffer,_HW_);
                  string(_V4_,buffer);
                  append(buffer,_HX_);
                  join_sep(comma,_VS_,buffer);
                  append(buffer,_HY_);
                  newline(buffer);
                  copy(buffer);
                  append(buffer,_HZ_);
                  newline(buffer);
                  append(buffer,_H0_);
                  outdent(buffer);
                  newline(buffer);
                  append(buffer,_IL_);
                  newline(buffer);
                  newline(buffer);
                  append(buffer,_H$_);
                  newline(buffer);
                  append(buffer,_Ia_);
                  string(module_name,buffer);
                  append(buffer,_Ib_);
                  map_sep(comma,string,_VW_,buffer);
                  append(buffer,_Ic_);
                  newline(buffer);
                  append(buffer,_Id_);
                  string(module_name,buffer);
                  append(buffer,_Ie_);
                  off_args(buffer);
                  append(buffer,_If_);
                  newline(buffer);
                  append(buffer,_Ig_);
                  newline(buffer);
                  newline(buffer);
                  append(buffer,_H6_);
                  newline(buffer);
                  append(buffer,_H7_);
                  string(module_name,buffer);
                  append(buffer,_H8_);
                  off_args(buffer);
                  append(buffer,_H9_);
                  newline(buffer);
                  append(buffer,_H__);
                  newline(buffer);
                  newline(buffer);
                  append(buffer,_Ii_);
                  newline(buffer);
                  append(buffer,_Ij_);
                  string(module_name$0,buffer);
                  append(buffer,_Ik_);
                  map_sep(comma,string,_VY_,buffer);
                  append(buffer,_Il_);
                  newline(buffer);
                  append(buffer,_Im_);
                  newline(buffer);
                  newline(buffer);
                  append(buffer,_IM_);
                  newline(buffer);
                  append(buffer,_IN_);
                  newline(buffer);
                  return 0},
               js_text=text}
           else
            var
             exports$0=function(_Wk_){return string(_Jj_,_Wk_)},
             js_text=common(exports$0,_V6_,code);
          else
           var
            exports=function(_Wl_){return string(_Ji_,_Wl_)},
            js_text=common(exports,_V6_,code);
          var jscode=[0,[0,js_text,_KQ_],0]}
        else
         var jscode=0;
        if(args[8])
         {var
           cparams$2=[0,params$1[5],0,0],
           stmts$2=convert(cparams$2,stmts$4),
           code$0=printStmtList$1(params$1,stmts$2),
           _V$_=params$1[6],
           _Wa_=params$1[7];
          if(caml_string_notequal(params$1[2],_LW_))
           var js_text$0=code$0;
          else
           var
            count_context=function(args){return _Wa_[8]?1 + args | 0:args},
            get_args=
             function(inputs)
              {var
                args=
                 mapi
                  (function(i,param){return _a_(_K8_,caml_new_string("" + i))},
                   inputs),
                _We_=_Wa_[8]?[0,_K7_,args]:args;
               return function(_Wf_){return map_sep(comma,string,_We_,_Wf_)}},
            process_inputs=get_args(_Wa_[2]),
            noteon_inputs=get_args(_Wa_[4]),
            noteoff_inputs=get_args(_Wa_[5]),
            controlchange_inputs=get_args(_Wa_[6]),
            nprocess_inputs$0=count_context(length(_Wa_[2])),
            nprocess_outputs$0=length(_Wa_[3]),
            nnoteon_inputs=count_context(length(_Wa_[4])),
            nnoteoff_inputs=count_context(length(_Wa_[5])),
            ncontrolchange_inputs=count_context(length(_Wa_[6])),
            pass_data=
             _Wa_[8]
              ?function(_Wc_){return string(_K9_,_Wc_)}
              :function(_Wd_){return string(_LV_,_Wd_)},
            js_text$0=
             function(buffer)
              {newline(buffer);
               append(buffer,_K__);
               newline(buffer);
               append(buffer,_K$_);
               newline(buffer);
               append(buffer,_La_);
               newline(buffer);
               append(buffer,_Lb_);
               newline(buffer);
               append(buffer,_Lc_);
               newline(buffer);
               append(buffer,_Ld_);
               newline(buffer);
               append(buffer,_Le_);
               newline(buffer);
               append(buffer,_Lf_);
               newline(buffer);
               append(buffer,_Lg_);
               newline(buffer);
               append(buffer,_Lh_);
               newline(buffer);
               append(buffer,_Li_);
               newline(buffer);
               append(buffer,_Lj_);
               newline(buffer);
               append(buffer,_Lk_);
               newline(buffer);
               append(buffer,_Ll_);
               newline(buffer);
               append(buffer,_Lm_);
               newline(buffer);
               append(buffer,_Ln_);
               newline(buffer);
               append(buffer,_Lo_);
               newline(buffer);
               append(buffer,_Lp_);
               newline(buffer);
               append(buffer,_Lq_);
               newline(buffer);
               append(buffer,_Lr_);
               newline(buffer);
               append(buffer,_Ls_);
               newline(buffer);
               caml_call1(code$0,buffer);
               newline(buffer);
               append(buffer,_Lt_);
               caml_call1(process_inputs,buffer);
               append(buffer,_Lu_);
               string(_V$_,buffer);
               append(buffer,_Lv_);
               caml_call1(process_inputs,buffer);
               append(buffer,_Lw_);
               newline(buffer);
               append(buffer,_Lx_);
               caml_call1(noteon_inputs,buffer);
               append(buffer,_Ly_);
               string(_V$_,buffer);
               append(buffer,_Lz_);
               caml_call1(noteon_inputs,buffer);
               append(buffer,_LA_);
               newline(buffer);
               append(buffer,_LB_);
               caml_call1(noteoff_inputs,buffer);
               append(buffer,_LC_);
               string(_V$_,buffer);
               append(buffer,_LD_);
               caml_call1(noteoff_inputs,buffer);
               append(buffer,_LE_);
               newline(buffer);
               append(buffer,_LF_);
               caml_call1(controlchange_inputs,buffer);
               append(buffer,_LG_);
               string(_V$_,buffer);
               append(buffer,_LH_);
               caml_call1(controlchange_inputs,buffer);
               append(buffer,_LI_);
               newline(buffer);
               append(buffer,_LJ_);
               string(_V$_,buffer);
               append(buffer,_LK_);
               newline(buffer);
               append(buffer,_LL_);
               string(_V$_,buffer);
               append(buffer,_LM_);
               newline(buffer);
               append(buffer,_LN_);
               int$0(nprocess_inputs$0,buffer);
               append(buffer,_LO_);
               int$0(nprocess_outputs$0,buffer);
               append(buffer,_LP_);
               int$0(nnoteon_inputs,buffer);
               append(buffer,_LQ_);
               int$0(nnoteoff_inputs,buffer);
               append(buffer,_LR_);
               int$0(ncontrolchange_inputs,buffer);
               append(buffer,_LS_);
               pass_data(buffer);
               append(buffer,_LT_);
               newline(buffer);
               append(buffer,_LU_);
               newline(buffer);
               return 0};
          var luacode=[0,[0,js_text$0,_No_],0]}
        else
         var luacode=0;
        var
         results=
          joinErrors(jscode,joinErrors(ccode,joinErrors(luacode,llvm)))}
      return results?[0,[4,results],0]:0}
    function dumpParsedFiles(args,eta)
     {if(args[2])
       {var
         _VJ_=applyTransformations(args,0,eta),
         a=
          concat$0
           (_TS_,
            map
             (function(a)
               {var _VK_=a[1],print_buffer=makePrintBuffer(0);
                stmtListBuff(print_buffer,_VK_);
                return contents$0(print_buffer)},
              _VJ_));
        return [0,[3,a],0]}
      return 0}
    function runFiles(args,parser_results)
     {function print_val(e)
       {if(typeof e !== "number" && 0 === e[0])return 0;
        var print_buffer=makePrintBuffer(0);
        f(print_buffer,e);
        return [0,contents$0(print_buffer),0]}
      if(args[3])
       {var
         results$0=
          applyTransformations(args,[0,interpreter_options],parser_results),
         env=top(0);
        builtinFunctions(env);
        var
         state=empty$1(0),
         _VH_=[0,state,0],
         match=
          fold_left
           (function(param,result$0)
             {var
               acc=param[2],
               state$2=param[1],
               module_name=[0,moduleName(result$0[2]),0],
               state=enter$0(1,state$2,module_name,init$0),
               match=inferStmtList(state,0,result$0[1]),
               state$0=match[2],
               stmts=match[1],
               state$1=exit$0(state$0),
               result=[0,stmts,result$0[2]];
              return [0,state$1,[0,result,acc]]},
            _VH_,
            results$0),
         results=match[2],
         _VI_=rev(results),
         a=
          concat
           (map
             (print_val,
              map
               (function(results)
                 {var module_name=moduleName(results[2]);
                  addModule(env,[0,module_name,0]);
                  var env$0=enterModule(env,[0,module_name,0]);
                  return evalStmts(env$0,results[1])},
                _VI_)));
        return [0,[5,concat$0(_TT_,a)],0]}
      return 0}
    var version$0=k(version,1,7);
    function main(args)
     {try
       {if(args[12])
         var _VA_=[0,[0,version$0],0];
        else
         {if(args[1])
           {var parser_results=loadFiles(args,args[1]);
            if(args[14])
             var
              _VB_=map(function(r){return r[2]},parser_results),
              _VC_=function(s){return [0,[2,s],0]}(_VB_);
            else
             {if(args[4])
               try
                {var
                  _Vy_=
                   function(eta){return applyTransformations(args,0,eta)}
                    (parser_results),
                  _Vz_=function(param){return _TU_}(_Vy_),
                  _VE_=_Vz_}
               catch(exn)
                {exn = caml_wrap_exception(exn);
                 if(exn[1] !== Errors)throw exn;
                 var errors=exn[2],_VE_=[0,[6,errors],0]}
              else
               var _VE_=0;
              var
               _VF_=joinErrors(runFiles(args,parser_results),_VE_),
               _VG_=joinErrors(generateCode(args,parser_results),_VF_),
               _VC_=joinErrors(dumpParsedFiles(args,parser_results),_VG_)}
            var _VD_=_VC_}
          else
           var _VD_=[0,[1,_a_(_TW_,_a_(version$0,_TV_))],0];
          var _VA_=_VD_}
        return _VA_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Errors){var errors$0=exn[2];return [0,[6,errors$0],0]}
        throw exn}}
    function convertOutputErrors(errors)
     {function makeErrorObject(error)
       {var
         match=reportErrorStringNoLoc(error),
         col=match[4],
         line=match[3],
         file=match[2],
         msg=match[1];
        return {"msg":msg.toString(),
                "file":file.toString(),
                "line":line,
                "col":col}}
      return caml_js_from_array(of_list(map(makeErrorObject,errors)))}
    function convertInputFile(i)
     {var match=to_option(i.file),match$0=to_option(i.code);
      if(match)
       {var _Vx_=match[1];
        if(match$0)
         {var code=match$0[1];
          return [0,[1,caml_js_to_string(_Vx_),caml_js_to_string(code)],0]}
        return [0,[0,caml_js_to_string(_Vx_)],0]}
      if(match$0)
       {var code$0=match$0[1];return [0,[1,_TZ_,caml_js_to_string(code$0)],0]}
      return 0}
    function convertInputFiles(files)
     {return concat(to_list(map$1(convertInputFile,caml_js_to_array(files))))}
    function convertOutputFiles(args,files)
     {return caml_js_from_array
              (of_list
                (map
                  (function(param)
                    {var file=param[2],text=param[1],code=print(text);
                     if(0 === file[0])
                      var e=file[1],_Vv_=_a_(_T0_,e),_Vw_=_a_(args[9],_Vv_);
                     else
                      var n=file[1],_Vw_=concat$1(dirname$2(args[9]),n);
                     var obj={};
                     obj.file = _Vw_.toString();
                     obj.code = code.toString();
                     return obj},
                   files)))}
    function set$1(a,fset)
     {var _Vt_=a !== undefined$0?1:0;
      if(_Vt_)
       {var _Vu_=a !== undefined$0?1:0;return _Vu_?caml_call1(fset,a):_Vu_}
      return _Vt_}
    function applyOptions(options,args)
     {function _Vp_(v){args[9] = caml_js_to_string(v);return 0}
      set$1(options.output,_Vp_);
      function _Vq_(v){args[10] = caml_js_to_string(v);return 0}
      set$1(options.real,_Vq_);
      function _Vr_(v){args[11] = caml_js_to_string(v);return 0}
      set$1(options.template,_Vr_);
      function _Vs_(v)
       {args[13] = to_list(map$1(caml_js_to_string,caml_js_to_array(v)));
        return 0}
      return set$1(options.includes,_Vs_)}
    function main$0(input)
     {var
       args=
        [0,0,_iZ_,_iY_,_iX_,_iW_,_iV_,_iU_,_iT_,_iS_,_iR_,_iQ_,_iP_,_iO_,_iN_];
      function _Vb_(v){args[2] = v;return 0}
      set$1(input.dparse,_Vb_);
      function _Vc_(v){args[14] = v;return 0}
      set$1(input.deps,_Vc_);
      function _Vd_(v){args[5] = v;return 0}
      set$1(input.ccode,_Vd_);
      function _Ve_(v){args[4] = v;return 0}
      set$1(input.check,_Ve_);
      function _Vf_(v){args[7] = v;return 0}
      set$1(input.jscode,_Vf_);
      function _Vg_(v){args[8] = v;return 0}
      set$1(input.luacode,_Vg_);
      function _Vh_(v){args[6] = v;return 0}
      set$1(input.llvm,_Vh_);
      function _Vi_(v){args[3] = v;return 0}
      set$1(input[caml_new_string("eval")],_Vi_);
      function _Vj_(v){args[12] = v;return 0}
      set$1(input.version,_Vj_);
      function _Vk_(v){args[9] = caml_js_to_string(v);return 0}
      set$1(input.output,_Vk_);
      function _Vl_(v){args[10] = caml_js_to_string(v);return 0}
      set$1(input.real,_Vl_);
      function _Vm_(v){args[11] = caml_js_to_string(v);return 0}
      set$1(input.template,_Vm_);
      function _Vn_(v)
       {args[13] = to_list(map$1(caml_js_to_string,caml_js_to_array(v)));
        return 0}
      set$1(input.includes,_Vn_);
      function _Vo_(v){args[1] = convertInputFiles(v);return 0}
      set$1(input.files,_Vo_);
      var results=main(args);
      return caml_js_from_array
              (of_list
                (map
                  (function(output)
                    {if(typeof output === "number")
                      {var obj={};obj.check = !!1;return obj}
                     else
                      switch(output[0])
                       {case 0:
                         var v=output[1],obj$0={};
                         obj$0.version = v.toString();
                         return obj$0;
                        case 1:
                         var v$0=output[1],obj$1={};
                         obj$1.message = v$0.toString();
                         return obj$1;
                        case 2:
                         var deps=output[1],obj$2={};
                         obj$2.dependencies
                         =
                         caml_js_from_array(of_list(map(caml_js_from_string,deps)));
                         return obj$2;
                        case 3:
                         var v$1=output[1],obj$3={};
                         obj$3.parsedCode = v$1.toString();
                         return obj$3;
                        case 4:
                         var files=output[1],obj$4={};
                         obj$4.generatedCode = convertOutputFiles(args,files);
                         return obj$4;
                        case 5:
                         var v$2=output[1],obj$5={};
                         obj$5.interpret = v$2.toString();
                         return obj$5;
                        default:
                         var errors=output[1],obj$6={};
                         obj$6.errors = convertOutputErrors(errors);
                         return obj$6}},
                   results)))}
    var
     args=
      [0,_i0_,_iZ_,_iY_,_iX_,_iW_,_iV_,_iU_,_iT_,_iS_,_iR_,_iQ_,1,_iO_,_iN_],
     match$0=main(args);
    if(match$0)
     {var _T1_=match$0[1];
      if(typeof _T1_ === "number")
       var switch$2=1;
      else
       if(0 === _T1_[0])
        if(match$0[2])
         var switch$1=0,switch$2=0;
        else
         var v=_T1_[1],version$1=v.toString(),switch$1=1,switch$2=0;
       else
        var switch$2=1;
      if(switch$2)var switch$1=0}
    else
     var switch$1=0;
    if(!switch$1)var version$1=failwith(_T2_);
    function codeGeneration(args,results)
     {if(results)
       {var _Va_=results[1];
        if(typeof _Va_ !== "number")
         switch(_Va_[0])
          {case 4:var files=_Va_[1];return convertOutputFiles(args,files);
           case 6:var errors=_Va_[1];return convertOutputErrors(errors)
           }}
      return failwith(_T3_)}
    function generateJs(files,options)
     {var
       args=
        [0,
         convertInputFiles(files),
         _iZ_,
         _iY_,
         _iX_,
         _iW_,
         _iV_,
         1,
         _iT_,
         _iS_,
         _iR_,
         _iQ_,
         _iP_,
         _iO_,
         _iN_];
      applyOptions(options,args);
      var results=main(args);
      return codeGeneration(args,results)}
    function generateC(files,options)
     {var
       args=
        [0,
         convertInputFiles(files),
         _iZ_,
         _iY_,
         _iX_,
         1,
         _iV_,
         _iU_,
         _iT_,
         _iS_,
         _iR_,
         _iQ_,
         _iP_,
         _iO_,
         _iN_];
      applyOptions(options,args);
      var results=main(args);
      return codeGeneration(args,results)}
    function generateLua(files,options)
     {var
       args=
        [0,
         convertInputFiles(files),
         _iZ_,
         _iY_,
         _iX_,
         _iW_,
         _iV_,
         _iU_,
         1,
         _iS_,
         _iR_,
         _iQ_,
         _iP_,
         _iO_,
         _iN_];
      applyOptions(options,args);
      var results=main(args);
      return codeGeneration(args,results)}
    var _T4_=[0,0,0,0];
    function _T5_(self,main,version,generateJs,generateC,generateLua)
     {if(!_T4_[1])
       {var
         _UX_=create_table(_TY_),
         _UY_=new_variable(_UX_,_T6_),
         _UZ_=get_method_labels(_UX_,_TX_),
         _U0_=_UZ_[1],
         _U1_=_UZ_[2],
         _U2_=_UZ_[3],
         _U3_=_UZ_[4],
         _U4_=_UZ_[5],
         _U5_=
          function(self_3)
           {var env=self_3[_UY_ + 1];return caml_call1(env[2],env[1])},
         _U6_=
          function(self_3)
           {var env=self_3[_UY_ + 1];return caml_call1(env[3],env[1])},
         _U7_=
          function(self_3)
           {var env=self_3[_UY_ + 1];return caml_call1(env[4],env[1])},
         _U8_=
          function(self_3)
           {var env=self_3[_UY_ + 1];return caml_call1(env[5],env[1])};
        set_methods
         (_UX_,
          [0,
           _U1_,
           function(self_3)
            {var env=self_3[_UY_ + 1];return caml_call1(env[6],env[1])},
           _U0_,
           _U8_,
           _U3_,
           _U7_,
           _U4_,
           _U6_,
           _U2_,
           _U5_]);
        var
         _U9_=
          function(_U__)
           {var _U$_=create_object_opt(0,_UX_);
            _U$_[_UY_ + 1] = _U__;
            return _U$_};
        init_class(_UX_);
        _T4_[1] = _U9_}
      return caml_call1
              (_T4_[1],[0,self,generateLua,generateC,generateJs,version,main])}
    function _T7_(param){return generateLua}
    function _T8_(param){return generateC}
    function _T9_(param){return generateJs}
    function _T__(param){return version$1}
    function _T$_(param){return main$0}
    export_all
     (function(t44,t45,t46,t47,t48,param)
        {return {"main":caml_js_wrap_meth_callback(t44),
                 "version":caml_js_wrap_meth_callback(t45),
                 "generateJs":caml_js_wrap_meth_callback(t46),
                 "generateC":caml_js_wrap_meth_callback(t47),
                 "generateLua":caml_js_wrap_meth_callback(t48)}}
       (_T$_,_T__,_T9_,_T8_,_T7_,_T5_));
    function generateJSCode(s)
     {var
       args=
        [0,
         [0,[1,_Ud_,caml_js_to_string(s)],0],
         _iZ_,
         _iY_,
         _iX_,
         _iW_,
         _iV_,
         1,
         _iT_,
         _iS_,
         _Uc_,
         _Ub_,
         _iP_,
         _iO_,
         _iN_],
       match=main(args);
      if(match)
       {var _UV_=match[1];
        if(typeof _UV_ === "number")
         var switch$0=0;
        else
         switch(_UV_[0])
          {case 4:
            var _UW_=_UV_[1];
            if(_UW_)
             if(_UW_[2])
              var switch$0=1;
             else
              {if(!match[2])
                {var match$0=_UW_[1],code=match$0[1];
                 return print(code).toString()}
               var switch$0=1}
            else
             var switch$0=1;
            break;
           case 6:
            if(!match[2])
             {var
               errors=_UV_[1],
               error_strings=
                concat$0
                 (_Ue_,
                  map
                   (function(error)
                     {var match=reportErrorStringNoLoc(error),msg=match[1];
                      return msg},
                    errors));
              return _a_(_Uf_,error_strings).toString()}
            var switch$0=1;
            break;
           default:var switch$0=0}}
      return "unknown error"}
    function makeAceError(e)
     {var
       match=reportErrorStringNoLoc(e),
       col=match[4],
       line=match[3],
       msg=match[1];
      return {"text":msg.toString(),
              "row":caml_new_string("" + (line - 1 | 0)).toString(),
              "column":caml_new_string("" + (col - 1 | 0)).toString(),
              "type":"error",
              "raw":msg.toString()}}
    function checkCode(s)
     {var
       args=
        [0,
         [0,[1,_Ug_,caml_js_to_string(s)],0],
         _iZ_,
         _iY_,
         1,
         _iW_,
         _iV_,
         _iU_,
         _iT_,
         _iS_,
         _iR_,
         _iQ_,
         _iP_,
         _iO_,
         _iN_],
       match=main(args);
      if(match)
       {var _UU_=match[1];
        if(typeof _UU_ === "number")
         var switch$0=0;
        else
         if(6 === _UU_[0])
          {if(!match[2])
            {var errors=_UU_[1],error_objects=map(makeAceError,errors);
             return caml_js_from_array(of_list(error_objects))}
           var switch$0=1}
         else
          var switch$0=0}
      return caml_js_from_array([0])}
    var _Uh_=[0,0,0,0];
    function _Ui_
     (self,
      main,
      version,
      generateJs,
      generateC,
      generateLua,
      checkCode,
      generateJSCode)
     {if(!_Uh_[1])
       {var
         _UB_=create_table(_Ua_),
         _UC_=new_variable(_UB_,_Uj_),
         _UD_=get_method_labels(_UB_,shared),
         _UE_=_UD_[1],
         _UF_=_UD_[2],
         _UG_=_UD_[3],
         _UH_=_UD_[4],
         _UI_=_UD_[5],
         _UJ_=_UD_[6],
         _UK_=_UD_[7],
         _UL_=
          function(self_1)
           {var env=self_1[_UC_ + 1];return caml_call1(env[2],env[1])},
         _UM_=
          function(self_1)
           {var env=self_1[_UC_ + 1];return caml_call1(env[3],env[1])},
         _UN_=
          function(self_1)
           {var env=self_1[_UC_ + 1];return caml_call1(env[4],env[1])},
         _UO_=
          function(self_1)
           {var env=self_1[_UC_ + 1];return caml_call1(env[5],env[1])},
         _UP_=
          function(self_1)
           {var env=self_1[_UC_ + 1];return caml_call1(env[6],env[1])},
         _UQ_=
          function(self_1)
           {var env=self_1[_UC_ + 1];return caml_call1(env[7],env[1])};
        set_methods
         (_UB_,
          [0,
           _UF_,
           function(self_1)
            {var env=self_1[_UC_ + 1];return caml_call1(env[8],env[1])},
           _UE_,
           _UQ_,
           _UH_,
           _UP_,
           _UJ_,
           _UO_,
           _UG_,
           _UN_,
           _UK_,
           _UM_,
           _UI_,
           _UL_]);
        var
         _UR_=
          function(_US_)
           {var _UT_=create_object_opt(0,_UB_);
            _UT_[_UC_ + 1] = _US_;
            return _UT_};
        init_class(_UB_);
        _Uh_[1] = _UR_}
      return caml_call1
              (_Uh_[1],
               [0,
                self,
                generateJSCode,
                checkCode,
                generateLua,
                generateC,
                generateJs,
                version,
                main])}
    function _Uk_(param){return generateJSCode}
    function _Ul_(param){return checkCode}
    function _Um_(param){return generateLua}
    function _Un_(param){return generateC}
    function _Uo_(param){return generateJs}
    function _Up_(param){return version$1}
    function _Uq_(param){return main$0}
    export$0
     (_Ur_,
      function(t0,t1,t2,t3,t4,t5,t6,param)
        {return {"main":caml_js_wrap_meth_callback(t0),
                 "version":caml_js_wrap_meth_callback(t1),
                 "generateJs":caml_js_wrap_meth_callback(t2),
                 "generateC":caml_js_wrap_meth_callback(t3),
                 "generateLua":caml_js_wrap_meth_callback(t4),
                 "checkCode":caml_js_wrap_meth_callback(t5),
                 "generateJSCode":caml_js_wrap_meth_callback(t6)}}
       (_Uq_,_Up_,_Uo_,_Un_,_Um_,_Ul_,_Uk_,_Ui_));
    do_at_exit(0);
    return}
  (function(){return this}()));
